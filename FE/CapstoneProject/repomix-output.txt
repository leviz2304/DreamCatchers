This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-30T07:18:48.815Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
package.json
postcss.config.js
public/index.html
README.md
src/api/apiService/authService.js
src/api/apiService/dataService.js
src/api/instance.js
src/App.js
src/App.module.scss
src/assets/images/alert.svg
src/assets/images/app_dash.svg
src/assets/images/bell.svg
src/assets/images/bills.svg
src/assets/images/btnClose.svg
src/assets/images/budget.svg
src/assets/images/card copy.svg
src/assets/images/check.svg
src/assets/images/delete.svg
src/assets/images/ecommerce_dash.svg
src/assets/images/edit.svg
src/assets/images/empty_check.svg
src/assets/images/facebook-svgrepo-com.svg
src/assets/images/fileSelect.svg
src/assets/images/FolderNotchOpen.svg
src/assets/images/gears.svg
src/assets/images/github-svgrepo-com.svg
src/assets/images/google-color-svgrepo-com.svg
src/assets/images/home.svg
src/assets/images/ic_category_.svg
src/assets/images/ic_noData.svg
src/assets/images/ic_user.svg
src/assets/images/icCourse.svg
src/assets/images/menu.svg
src/assets/images/plane.svg
src/assets/images/PlayCircle.svg
src/assets/images/plus.svg
src/assets/images/react.svg
src/assets/images/report.svg
src/assets/images/restore.svg
src/assets/images/search.svg
src/assets/images/thongKe.svg
src/assets/images/user.svg
src/assets/images/view.svg
src/assets/images/vnpay-logo.html
src/assets/images/wallet.svg
src/assets/images/wealth.svg
src/component/auth/Button.js
src/component/auth/CheckBox.js
src/component/auth/Oauth2.module.scss
src/component/auth/OAuth2Form.js
src/component/auth/ShowPassword.js
src/component/card/index.js
src/component/cardTotal/CardSatiscal.module.scss
src/component/cardTotal/index.js
src/component/categories/CattegoryCard.js
src/component/combobox/Combobox.module.scss
src/component/combobox/index.js
src/component/comment/Comment.module.scss
src/component/comment/commentItem/CommentItem.module.scss
src/component/comment/commentItem/index.js
src/component/comment/index.js
src/component/dashboard/leftNavDash/index.js
src/component/dashboard/leftNavDash/LeftNavDash.module.scss
src/component/dashboard/MainDash/index.js
src/component/dashboard/MainDash/MainDash.module.scss
src/component/dashboard/NavigationTopBar.js
src/component/dashboard/NavigationTopBar.module.scss
src/component/dashboard/Sidebar/index.js
src/component/dashboard/SideBar2/index.js
src/component/dropDown/index.js
src/component/dropDown/Menu.module.scss
src/component/footerDataAdmin/FooterDataAdmin.module.scss
src/component/footerDataAdmin/index.js
src/component/globalStyles/dropDown/index.js
src/component/globalStyles/dropDown/Menu.module.scss
src/component/globalStyles/footerDataAdmin/FooterDataAdmin.module.scss
src/component/globalStyles/footerDataAdmin/index.js
src/component/globalStyles/GlobalStyles.scss
src/component/globalStyles/imgPreview/index.js
src/component/globalStyles/index.js
src/component/globalStyles/ladingComponent/CourseCard.js
src/component/globalStyles/ladingComponent/CourseSection.js
src/component/globalStyles/ladingComponent/ImageLandingPage.js
src/component/globalStyles/ladingComponent/Slideshow.css
src/component/globalStyles/ladingComponent/SlideShow.js
src/component/globalStyles/modal/index.js
src/component/globalStyles/modal/Model.module.scss
src/component/globalStyles/notificationItem/index.js
src/component/globalStyles/notificationItem/NotificationItem.module.scss
src/component/globalStyles/search/index.js
src/component/globalStyles/search/Search.module.scss
src/component/globalStyles/useNotificationWebSocket/index.js
src/component/globalStyles/validation/index.js
src/component/imgPreview/index.js
src/component/ladingComponent/CourseCard.js
src/component/ladingComponent/CourseSection.js
src/component/ladingComponent/ImageLandingPage.js
src/component/ladingComponent/Slideshow.css
src/component/ladingComponent/SlideShow.js
src/component/LearningComponent/CourseInfo.js
src/component/LearningComponent/CourseInfoButtons.js
src/component/LearningComponent/CourseInfoDetail.js
src/component/LearningComponent/CourseInfoHeader.js
src/component/LearningComponent/Header.js
src/component/modal/index.js
src/component/modal/Model.module.scss
src/component/notificationItem/index.js
src/component/notificationItem/NotificationItem.module.scss
src/component/profileComponent/Messages.js
src/component/profileComponent/Setting.js
src/component/Quiz/Flashcard/index.js
src/component/Quiz/FlashcardSet/index.js
src/component/Quiz/VocabularyManager/index.js
src/component/search/index.js
src/component/search/Search.module.scss
src/component/useNotificationWebSocket/index.js
src/component/validation/index.js
src/context/sidebarContext.js
src/index.css
src/index.js
src/Interceptor.js
src/layout/footer/AppDownloadButton.js
src/layout/footer/CategoryLink.js
src/layout/footer/FooterColumn.js
src/layout/footer/index.js
src/layout/footer/SocialIcon.js
src/layout/header/Header.module.scss
src/layout/header/index.js
src/layout/headerAdmin/HeaderAdmin.module.scss
src/layout/headerAdmin/index.js
src/pages/admin/Category/create/index.js
src/pages/admin/Category/edit/index.js
src/pages/admin/Category/historyDeleted/index.js
src/pages/admin/Category/list/index.js
src/pages/admin/Course/create/CreateCourse.module.scss
src/pages/admin/Course/create/index.js
src/pages/admin/Course/detail/index.js
src/pages/admin/Course/edit/index.js
src/pages/admin/Course/historyDeleted/index.js
src/pages/admin/Course/list/index.js
src/pages/admin/Course/list/List.module.scss
src/pages/admin/Dashboard.module.scss
src/pages/admin/index.js
src/pages/admin/invoice/historyDelete/index.js
src/pages/admin/invoice/list/index.js
src/pages/admin/Test/WritingTask/Create/index.js
src/pages/admin/Test/WritingTask/Edit/index.js
src/pages/admin/Test/WritingTask/List/index.js
src/pages/admin/user/create/index.js
src/pages/admin/user/historyDeleted/index.js
src/pages/admin/user/list/index.js
src/pages/admin/user/userProfileAdmin/index.js
src/pages/course/Course.module.scss
src/pages/course/detail/DetailCourse.module.scss
src/pages/course/detail/index.js
src/pages/course/index.js
src/pages/IELTS/WritingSubmission/index.js
src/pages/landing/index.js
src/pages/login/index.js
src/pages/login/Login.module.scss
src/pages/notFound/index.js
src/pages/notFound/NotFound.module.scss
src/pages/payment/failure/index.js
src/pages/payment/index.js
src/pages/payment/Payment.module.scss
src/pages/payment/success/index.js
src/pages/Post/create/CreatePost.module.scss
src/pages/Post/create/index.js
src/pages/Post/create/subContent/index.js
src/pages/Post/index.js
src/pages/Quiz/VocabularyPage.js
src/pages/searchResult/index.js
src/pages/searchResult/searchResult.module.scss
src/pages/signUp/index.js
src/pages/user/courseFilterPage/component/CoursesComponent.js
src/pages/user/courseFilterPage/component/FilterSortBar.js
src/pages/user/courseFilterPage/index.js
src/pages/user/usercourse/index.js
src/pages/user/usercourse/userCourses.module.scss
src/pages/user/userprofile/index.js
src/pages/user/userprofile/userProfile.module.scss
src/redux/reducers/loginSlice.js
src/redux/reducers/notificationSlice.js
src/redux/reducers/sidebarReducer.js
src/redux/selector.js
src/redux/store.js
src/router/index.js
src/util/utils.js
src/utils/validation.js
src/utils/WebSocket.js
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
    "name": "CapstoneProject",
    "version": "0.1.0",
    "private": true,
    "dependencies": {
        "@chakra-ui/react": "^3.1.1",
        "@emotion/react": "^11.13.3",
        "@emotion/styled": "^11.13.0",
        "@headlessui/react": "^1.7.18",
        "@heroicons/react": "^2.1.3",
        "@material-tailwind/react": "^2.1.10",
        "@mui/icons-material": "^6.1.6",
        "@mui/material": "^6.1.9",
        "@radix-ui/react-avatar": "^1.1.1",
        "@radix-ui/react-dropdown-menu": "^2.1.2",
        "@radix-ui/react-tooltip": "^1.1.3",
        "@reduxjs/toolkit": "^2.2.2",
        "@stomp/stompjs": "^7.0.0",
        "@tabler/icons-react": "^3.22.0",
        "@testing-library/jest-dom": "^5.17.0",
        "@testing-library/react": "^13.4.0",
        "@testing-library/user-event": "^13.5.0",
        "axios": "^1.7.7",
        "axios-oauth-client": "^2.2.0",
        "bootstrap": "^5.3.3",
        "class-variance-authority": "^0.7.0",
        "clsx": "^2.1.1",
        "framer-motion": "^11.11.13",
        "lucide-react": "^0.456.0",
        "mdb-react-ui-kit": "^7.2.0",
        "moment": "^2.30.1",
        "net": "^1.0.2",
        "nice-select2": "^2.2.0",
        "quill-image-uploader": "^1.3.0",
        "react": "^18.2.0",
        "react-bootstrap": "^2.10.2",
        "react-dom": "^18.2.0",
        "react-icons": "^5.3.0",
        "react-quill": "^2.0.0",
        "react-quilljs": "^1.3.4",
        "react-redux": "^9.1.0",
        "react-router-dom": "^6.22.3",
        "react-scripts": "^5.0.1",
        "react-select": "^5.8.0",
        "react-tailwindcss-datepicker": "^1.6.6",
        "recharts": "^2.13.3",
        "sass": "^1.75.0",
        "sockjs-client": "^1.6.1",
        "sonner": "^1.4.41",
        "stomp-client": "^0.9.0",
        "stompjs": "^2.3.3",
        "swiper": "^11.1.14",
        "tailwind-merge": "^2.5.4",
        "tailwindcss-animate": "^1.0.7",
        "web-vitals": "^2.1.4"
    },
    "scripts": {
        "start": "react-scripts start --port 3001",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
    },
    "eslintConfig": {
        "extends": [
            "react-app",
            "react-app/jest"
        ]
    },
    "browserslist": {
        "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
        ],
        "development": [
            "last 1 chrome version",
            "last 1 firefox version",
            "last 1 safari version"
        ]
    },
    "devDependencies": {
        "autoprefixer": "^10.4.19",
        "css-loader": "^7.1.1",
        "daisyui": "^4.12.14",
        "postcss": "^8.4.38",
        "sass-loader": "^14.2.1",
        "style-loader": "^4.0.0",
        "tailwindcss": "^3.4.1"
    }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" href="./E-tutor_logo.png" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="theme-color" content="#000000" />
        <meta
            name="description"
            content="Web site created using create-react-app"
        />
        <title>Dream Catchers</title>
    </head>
    <body>
        <noscript>You need to enable JavaScript to run this app.</noscript>
        <div id="root"></div>
    </body>
</html>

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: src/api/apiService/authService.js
================
import publicInstance, { userInstance } from "../instance";
import axios from "axios";
import instance, { privateInstance } from "../instance";
export const enrollCourse = async (enrollDTO) => {
    try {
        return await userInstance.post("/enroll/course", enrollDTO);
    } catch (error) {
        return Promise.reject(error);
    }
};
export const register = async ({
    firstName,
    lastName,
    email,
    password,
    otp,
}) => {
    try {
        const res = await instance.post(
            "/user/register",
            {
                firstName,
                lastName,
                email,
                password,
            },
            {
                "content-type": "application/json",
            }
        );
        return res;
    } catch (error) {
        return Promise.reject(error);
    }
};

export const login = async ({ email, password }) => {
    try {
        const res = await instance.post(
            "/user/login",
            {
                email,
                password,
            },
            { "content-type": "application/json" }
        );

        return res;
    } catch (error) {
        return Promise.reject(error);
    }
};
export const updateLessonProgress = async (userId, lessonId, progressPercentage) => {
    try {
      return await privateInstance.post(`/lesson/progress`, {
        userId,
        lessonId,
        progressPercentage,
      });
    } catch (error) {
      return Promise.reject(error);
    }
  };
  export const fetchInstructors = async (userId) => {
    try {
        console.log("User ID passed to fetchInstructors:", userId);
        const url = `/instructor/${userId}`;
        console.log("API Call URL:", url);
        const response = await privateInstance.get(url);
        return response; 
    } catch (error) {
        return Promise.reject(error);
    }
};

  // Get user progress for a course

export const sendMail = async (email) => {
    try {
        const res = await instance.post(
            "/user/send-verify-email",
            {
                email,
            },
            {
                "content-type": "application/json",
            }
        );
        return res;
    } catch (error) {
        return Promise.reject(error);
    }
};

export const sendResetPasswordEmail = async (email) => {
    try {
        return await instance.post(
            "/user/send-reset-password-email",
            { email },
            { "content-type": "application/json" }
        );
    } catch (error) {
        return Promise.reject(error);
    }
};

export const validateCode = async ({ email, code }) => {
    try {
        return await instance.post(
            "/user/verify-reset-password-code",
            {
                email,
                code,
            },
            { "content-type": "application/json" }
        );
    } catch (error) {}
};

export const resetPassword = async ({ email, password }) => {
    try {
        return await publicInstance.post(`/user/reset-password`, {
            password,
            email,
        });
    } catch (error) {
        return Promise.reject(error);
    }
};
export const resetPasswordByEmail = async (password, email) => {
    try {
        return await privateInstance.put(
            `/user/resetPassword/${email}`,
            {
                newPassword: password,
                email: email,
            },
            {
                "content-type": "application/json",
            }
        );
    } catch (error) {
        return Promise.reject(error);
    }
};
export const getAllUser = async () => {
    try {
        return await privateInstance.get("/user/getAll?page=0&size=5");
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getAllDeletedUser = async () => {
    try {
        return await privateInstance.get("/user/getAllDeleted?page=0&size=5");
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getAllRole = async () => {
    try {
        return await privateInstance.get("/user/getAllRole");
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getUserByName = async (userName, page, size, isDelete = false) => {
    try {
        return privateInstance.get(
            `/user/search?name=${userName}&isDeleted=${isDelete}&page=${page}&size=${size}`
        );
    } catch (error) {
        Promise.reject(error);
    }
};

export const getUserByRole = (role, page, size) => {
    try {
        return privateInstance.get(
            `/user/filter?role=${role}&page=${page}&size=${size}`
        );
    } catch (error) {
        Promise.reject(error);
    }
};

export const getUserByPage = async (page, size) => {
    try {
        return privateInstance.get(`/user/getAll?page=${page}&size=${size}`);
    } catch (error) {
        Promise.reject(error);
    }
};

export const softDeleteUser = async (id) => {
    try {
        const result = await privateInstance.put(`/user/delete/soft/${id}`);
        return result;
    } catch (error) {
        return Promise.reject(error);
    }
};
export const hardDeleteUser = async (id) => {
    try {
        const result = await privateInstance.delete(`/user/delete/hard/${id}`);
        return result;
    } catch (error) {
        return Promise.reject(error);
    }
};

export const restoreUserById = async (id) => {
    try {
        return privateInstance.put(`/user/restore/${id}`);
    } catch (error) {
        Promise.reject(error);
    }
};

export const getAdminDashBoard = async () => {
    try {
        return privateInstance.get("/user");
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getUserInfo = async () => {
    try {
        return userInstance.get("/username");
    } catch (error) {
        return Promise.reject(error);
    }
};

export const logout = async () => {
    try {
        return userInstance.post("/logout");
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getUserByEmail = async (email) => {
    try {
        return userInstance.get(`${email}`);
    } catch (error) {
        Promise.reject(error);
    }
};

export const updateProfile = async (formData) => {
    try {
        return await userInstance.put("/update", formData, {
            headers: {
                // No need to set Content-Type when using FormData; Axios sets it automatically
            },
        });
    } catch (error) {
        return Promise.reject(error);
    }
};


export const updatePassword = async (passwords) => {
    try {
        return await userInstance.put("/update/password", passwords);
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getProgress = async (alias, courseId) => {
    try {
        return await userInstance.get(`/${alias}/progress/${courseId}`);
    } catch (error) {
        return Promise.reject(error);
    }
};

export const updateLessonIds = async (alias, courseId, lessonIds) => {
    try {
        return await userInstance.put(
            `/${alias}/progress/${courseId}/updateLessonIds`,
            lessonIds
        );
    } catch (error) {
        return Promise.reject(error.response.data);
    }
};

export const getAllNotification = async (email) => {
    try {
        return await userInstance.get(
            `/${encodeURIComponent(email)}/notification/getAll`
        );
    } catch (error) {
        return Promise.reject(error);
    }
};

export const readNotification = async (email, id) => {
    if (email.includes("@")) {
        email = email.substring(0, email.lastIndexOf("@"));
    }
    try {
        return await userInstance.put(`${email}/notification/read/${id}`);
    } catch (error) {
        return Promise.reject(error);
    }
};
export const readAllNotifications = async (email) => {
    if (email.includes("@")) {
        email = email.substring(0, email.lastIndexOf("@"));
    }
    try {
        return await userInstance.put(`${email}/notification/readAll`);
    } catch (error) {
        return Promise.reject(error);
    }
};
export const removeAllNotifications = async (email) => {
    if (email.includes("@")) {
        email = email.substring(0, email.lastIndexOf("@"));
    }
    try {
        return await userInstance.delete(`${email}/notification/removeAll`);
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getPaymentVNPAY = async ({ method, email, courseId }) => {
    try {
        return await userInstance.get(
            `create_payment/${method}/${email}/${courseId}`
        );
    } catch (error) {
        return Promise.reject(error);
    }
};
export const getUserProgressForCourse = async (userId, courseId) => {
    try {
      return await privateInstance.get(`/lesson/course/${courseId}/progress/${userId}`);
    } catch (error) {
      return Promise.reject(error);
    }
  };
  export const checkUserEnrollment = async (courseId, userId) => {
    try {
      const response = await privateInstance.get(`/course/${courseId}/is-enrolled`, {
        params: { userId },
      });
      return response;
    } catch (error) {
      return Promise.reject(error.response ? error.response.data : error);
    }
  };
export const getListCourse = async (email) => {
    try {
        return await userInstance.get(`/course/getAll/${email}`);
    } catch (error) {
        return Promise.reject(error);
    }
};

export const removeCommentById = async (email, cmtId) => {
    try {
        return await userInstance.delete(
            `/${encodeURIComponent(email)}/comment/delete/${cmtId}`
        );
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getAllUserAndRole = async (isDelete = "false") => {
    try {
        return await privateInstance.get(
            `/user/getAllUserAndRole?isDeleted=${isDelete}`
        );
    } catch (error) {
        return Promise.reject(error);
    }
};

export const createPost = async (post) => {
    try {
        return await userInstance.post("/post/create", post);
    } catch (error) {
        return Promise.reject(error);
    }
};

================
File: src/api/apiService/dataService.js
================
import publicInstance, { privateInstance } from "../instance";
import { userInstance } from "../instance";

export const getAllCategories = async (page = 0, size = 9999999) => {
    try {
        const res = await publicInstance.get(
            `/category/getAll?page=${page}&size=${size}`
        );
        return res;
    } catch (error) {
        return Promise.reject(error);
    }
};
export const getAllWritingTasks = async () => {
    try {
        const res= await privateInstance.get(`/writing/tasks`);
        return res;
    } catch (error) {
        return Promise.reject(error);
    }
};
;

export const getWritingTaskById = async (id) => {
    try {
        return await privateInstance.get(`/writing/${id}`);
    } catch (error) {
        return Promise.reject(error);
    }
};
export const submitEssay = async ({ userId, writingTaskId, essayContent }) => {
    try {
        const response = await privateInstance.post("/writing/submit", {
            userId,
            writingTaskId,
            essayContent,
        });
        console.log("api"+response)
        return response;
    } catch (error) {
        console.error("Error submitting essay:", error);
        throw error;
    }
};
export const getSubmissionHistory = async (userId) => {
    try {
        const response = await privateInstance.get(`/writing/essays/${userId}`);
        return response.data.map(essay => ({
            ...essay,
            feedback: JSON.parse(essay.feedbackJson)
        }));
    } catch (error) {
        console.error("Error fetching submission history:", error);
        throw error;
    }
};
export const createWritingTask = async (task) => {
    try {
        return await privateInstance.post(`/writing/tasks`, task);
    } catch (error) {
        return Promise.reject(error);
    }
};

export const updateWritingTask = async (id, task) => {
    try {
        return await privateInstance.put(`/writing/update/${id}`, task);
    } catch (error) {
        return Promise.reject(error);
    }
};

export const deleteWritingTask = async (id) => {
    try {
        return await privateInstance.delete(`/writing/delete/${id}`);
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getAllCategoryDeleted = async (page, size) => {
    try {
        const res = await privateInstance.get(
            `/category/getAllDeleted?page=${page}&size=${size}`
        );
        return res;
    } catch (error) {
        return Promise.reject(error);
    }
};

export const createCourse = async (course) => {
    const formData = new FormData();
    const json = JSON.stringify(course);
    const courseBlob = new Blob([json], {
        type: "application/json",
    });
    formData.append("course", courseBlob);
    try {
        const response = await privateInstance.postForm(
            "/course/create",
            formData
        );
        return response;
    } catch (error) {
        return Promise.reject(error);
    }
};

export const updateCourse = async (id, course) => {
    console.table(course);
    const formData = new FormData();
    const json = JSON.stringify(course);
    const courseBlob = new Blob([json], {
        type: "application/json",
    });

    formData.append("course", courseBlob);
    try {
        const result = await privateInstance.putForm(
            `/course/edit/${id}`,
            formData
        );
        return result;
    } catch (error) {
        return Promise.reject(error);
    }
};
// coursvideo dang text

export const getAllCourse = async (page = 0, size = 99) => {
    try {
        const result = await publicInstance.get(
            `/course/getAll?page=${page}&size=${size}`
        );
        console.log("Heasdsadllo:"+result);

        return result;

    } catch (error) {
        return Promise.reject(error);
    }
};

export const getAllCourseAdmin = async (page = 0, size = 5) => {
    try {
        const result = await privateInstance.get(
            `/course/getAll?page=${page}&size=${size}`
        );
        return result;
    } catch (error) {
        return Promise.reject(error);
    }
};
export const getAllCourseDeleted = async (page, size) => {
    try {
        const result = await privateInstance.get(
            `/course/getAllDeleted?page=${page}&size=${size}`
        );
        return result;
    } catch (error) {
        console.log(error);
        return Promise.reject(error);
    }
};
export const enrollInCourse = async (enrollData) => {
    try {
        const response = await privateInstance.post(`/course/enroll`, enrollData);
  return response.data; // Handle the response as needed
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getUserIdByEmail = async (email) => {
    try {
        const response = await privateInstance.get(`/user/findIdByEmail?email=${encodeURIComponent(email)}`);
        console.log("api:+ "+response)
        return response;
    } catch (error) {
        return Promise.reject(error);
    }
};
export const updateLessonProgress = async (userId, lessonId, progressPercentage) => {
    try {
      return await userInstance.post(`/lesson/progress`, {
        userId,
        lessonId,
        progressPercentage,
      });
    } catch (error) {
      return Promise.reject(error);
    }
  };
  
  // Get user progress for a course
  

export const getCourseById = async (id, isDeleted = "false") => {
    try {
        return await publicInstance.get(`/course/${id}?isDeleted=${isDeleted}`);
    } catch (error) {
        return Promise.reject(error);
    }
};

export const softDeleteCourse = async (id) => {
    try {
        const result = await privateInstance.put(`/course/delete/soft/${id}`);
        return result;
    } catch (error) {
        return Promise.reject(error);
    }
};
export const hardDeleteCourse = async (id) => {
    try {
        const result = await privateInstance.delete(
            `/course/delete/hard/${id}`
        );
        return result;
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getCoursesDeletedByCategory = (id, page, size) => {
    try {
        return privateInstance.get(
            `/course/deleted/category?id=${id}&page=${page}&size=${size}`
        );
    } catch (error) {
        Promise.reject(error);
    }
};
export const getCoursesByCategory = async (id, page, size) => {
    try {
        return await publicInstance.get(
            `/course/category?id=${id}&page=${page}&size=${size}`
        );
    } catch (error) {
        console.log(error.mess);
        Promise.reject(error);
    }
};

export const getCourseByName = async (
    title,
    page = 0,
    selected = 5,
    isDeleted = "false"
) => {
    try {
        return await privateInstance.get(
            `/course?title=${encodeURIComponent(
                title
            )}&isDeleted=${isDeleted}&page=${page}&selected=${selected}`
        );
    } catch (error) {
        Promise.reject(error.mess);
    }
};

export const softDeleteCategoryById = (id) => {
    try {
        return privateInstance.put(`/category/delete/soft/${id}`);
    } catch (error) {
        Promise.reject(error);
    }
};

export const hardDeleteCategoryById = (id) => {
    try {
        return privateInstance.delete(`/category/delete/hard/${id}`);
    } catch (error) {
        Promise.reject(error);
    }
};
export const restoreCategoryById = (id) => {
    try {
        return privateInstance.put(`/category/restore/${id}`);
    } catch (error) {
        Promise.reject(error);
    }
};

export const getCategoryByTitle = (name, page = 0, selected = 5) => {
    console.log(name);
    try {
        return publicInstance.get(
            `/category?name=${name}&page=${page}&selected`
        );
    } catch (error) {
        Promise.reject(error);
    }
};

export const editCategory = (id, category) => {
    try {
        return privateInstance.put(`/category/${id}`, category);
    } catch (error) {
        Promise.reject(error);
    }
};

export const getCategoryById = (id) => {
    try {
        return publicInstance.get(`/category/${id}`);
    } catch (error) {
        return Promise.reject(error);
    }
};

export const createCategory = (category) => {
    try {
        return privateInstance.post(`/category/create`, category);
    } catch (error) {
        return Promise.reject(error);
    }
};

export const restoreCourseById = (id) => {
    try {
        return privateInstance.put(`/course/restore/${id}`);
    } catch (error) {
        Promise.reject(error);
    }
};

export const getComments = async (lessonId) => {
    try {
        return await publicInstance.get(`/lesson/${lessonId}/comments`);
    } catch (error) {
        console.log(error.status);
        return Promise.reject(error);
    }
};

export const getAllInvoice = async (page = 0, size = 5) => {
    try {
        return await privateInstance.get(
            `/invoice/getAll?page=${page}&size=${size}`
        );
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getInvoicesByDate = async (startDate, endDate, page, size) => {
    try {
        return await privateInstance.get(
            `/invoice/getByDate?start=${encodeURIComponent(
                startDate
            )}&end=${encodeURIComponent(endDate)}&page=${page}&size=${size}`
        );
    } catch (error) {
        return Promise.reject(error);
    }
};

export const softDeleteInvoice = async (id) => {
    try {
        return await privateInstance.put(`/invoice/delete/soft/${id}`);
    } catch (error) {
        return Promise.reject(error);
    }
};
export const getAllInvoiceByPage = async (page, size) => {
    try {
        return await privateInstance.get(
            `/invoice/getAll?page=${page}&size=${size}`
        );
    } catch (error) {
        return Promise.reject(error);
    }
};

export const searchInvoice = async (search, page, size) => {
    try {
        return await privateInstance.get(
            `/invoice/search?name=${search}&page=${page}&size=${size}`
        );
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getAllInvoiceDelete = async (page = 0, size = 5) => {
    try {
        return await privateInstance.get(`/invoice/getAllDeleted`);
    } catch (error) {
        return Promise.reject(error);
    }
};

export const restoreInvoieById = async (id) => {
    try {
        return await privateInstance.put(`/invoice/restore/${id}`);
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getMonthlyStatistic = async (month, year, page = 0, size = 5) => {
    try {
        return await privateInstance.get(
            `/statistic?month=${month}&year=${year}&page=${page}&size=${size}`
        );
    } catch (error) {
        return Promise.reject(error);
    }
};

export const uploadImg = async (img) => {
    try {
        const formData = new FormData();
        formData.append("file", img);
        return await publicInstance.postForm("/upload/img", formData);
    } catch (error) {
        return Promise.reject(error);
    }
};

export const getPosts = async (page = "0", size = "5") => {
    try {
        return await publicInstance.get(`/post?page=${page}&size=${size}`);
    } catch (error) {
        return Promise.reject(error);
    }
};

================
File: src/api/instance.js
================
import axios from "axios";
import { toast } from "sonner";
let redirectPage = null;
export const injectNavigate = (navigate) => {
    redirectPage = navigate;
};

const sessionExpired = () => {
    sessionStorage.removeItem("token");
    sessionStorage.removeItem("user");
    sessionStorage.setItem("prevPath", window.location.pathname);
    toast.error("Session expired, please login again");
    redirectPage("/login");
};

const publicInstance = axios.create({
    baseURL: "http://localhost:8080/api/v1/public",
});

publicInstance.interceptors.response.use(
    function (res) {
        return res.data;
    },
    function (error) {
        return Promise.reject(error.response.data);
    }
);

publicInstance.interceptors.request.use(function (config) {
    return config;
});

export const privateInstance = axios.create({
    baseURL: "http://localhost:8080/api/v1/private",
});

privateInstance.interceptors.response.use(
    function (res) {
        return res.data;
    },
    function (error) {
        if (error.response.status === 403) {
            toast.error("You don't have permission to access this page");
            redirectPage("/");
        } else if (error.response.status === 401) {
            console.log(error);
            sessionExpired();
        }
        return Promise.reject(error.response.data);
    }
);

privateInstance.interceptors.request.use(function (config) {
    let token = sessionStorage.getItem("token");
    if (token != null) config.headers.Authorization = `Bearer ${token}`;
    return config;
});

export const userInstance = axios.create({
    baseURL: "http://localhost:8080/api/v1/me",
});

userInstance.interceptors.response.use(
    function (res) {
        return res.data;
    },
    function (error) {
        if (error.response.status === 401) {
            sessionExpired();
        }
        return Promise.reject(error.response.data);
    }
);

userInstance.interceptors.request.use(function (config) {
    let token = sessionStorage.getItem("token");
    if (token != null) config.headers.Authorization = `Bearer ${token}`;
    return config;
});

export default publicInstance;

================
File: src/App.js
================
import {
    BrowserRouter as Router,
    Routes,
    Route,
    Navigate,
    Outlet,
} from "react-router-dom";
import { publicRoutes, adminRoutes, userRoutes } from "./router";
import styles from "./App.module.scss";
import { Toaster, toast } from "sonner";
import Header from "./layout/header";
import LeftNavDash from "./component/dashboard/leftNavDash";
import HeaderAdmin from "./layout/headerAdmin";
import clsx from "clsx";
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import Interceptors from "./Interceptor";
import loginSlice from "./redux/reducers/loginSlice";
import SidebarWithBurgerMenu from "./component/dashboard/Sidebar";
import Sidebar from "./component/dashboard/SideBar2";
const PrivateWrapper = ({ isAuthenticated }) => {
    const dispatch = useDispatch();
    if (isAuthenticated) {
        return <Outlet></Outlet>;
    } else {
        dispatch(loginSlice.actions.setLogout());
        sessionStorage.setItem("prevPath", window.location.pathname);
        return <Navigate to="/login" />;
    }
};

function App() {
    const isLoggedIn = useSelector((state) => state.login.isLogin);
    const [isLogged, setIsLogged] = useState(isLoggedIn);
    useEffect(() => {
        if (sessionStorage.getItem("token") !== null) {
            setIsLogged(true);
        } else {
            setIsLogged(false);
        }
    }, [isLoggedIn]);

    console.log("Render app");
    return (
        <div className={clsx("App ", {})}>
            <Interceptors></Interceptors>
            <Routes>
                {publicRoutes.map((route, index) => (
                    <Route
                        exact
                        key={index}
                        path={route.path}
                        element={
                            <>
                                <Header />
                                <div className={clsx()}>
                                    <route.component />
                                </div>
                            </>
                        }
                    />
                ))}
                {userRoutes.map((route, index) => (
                    <Route
                        key={index}
                        element={
                            <PrivateWrapper
                                isAuthenticated={isLogged}
                            ></PrivateWrapper>
                        }
                    >
                        <Route
                            path={route.path}
                            exact
                            key={index}
                            element={
                                <>
                                    {!route.path.includes("/course/detail") && (
                                        <Header />
                                    )}
                                    <div className={clsx(styles.ptHeader,"pt-header")}>
                                        <route.component />
                                    </div>
                                </>
                            }
                        />
                    </Route>
                ))}
                {adminRoutes.map((route, index) => (
                    <Route
                        key={index}
                        element={
                            <PrivateWrapper
                                isAuthenticated={isLogged}
                            ></PrivateWrapper>
                        }
                    >
                        <Route
                            path={route.path}
                            exact
                            key={index}
                            element={
                                <>
                                    <HeaderAdmin></HeaderAdmin>
                                    <div className="flex bg-white">
                                        {/* <LeftNavDash></LeftNavDash> */}
                                        <div className="mt-20">
                                        <Sidebar/>
                                        </div>
                                                                            <div
                                            className={clsx(
                                                styles.adminContent
                                            )}
                                        >
                                            <route.component />
                                        </div>
                                    </div>
                                </>
                            }
                        />
                    </Route>
                ))}
            </Routes>
        </div>
    );
}

export default App;

================
File: src/App.module.scss
================
@import "./component/globalStyles/GlobalStyles.scss";
.App {
    text-align: center;
}

.App-logo {
    height: 40vmin;
    pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
    .App-logo {
        animation: App-logo-spin infinite 20s linear;
    }
}
.ptHeader{
    height: 100%;
}
.App-header {
    background-color: #282c34;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: calc(10px + 2vmin);
    color: white;
}

.App-link {
    color: #61dafb;
}

@keyframes App-logo-spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

.z-1000 {
    z-index: 1000;
}

.nav-header {
    display: flex;
    padding: 12px 20px;
    align-items: center;
    gap: 10px;
}

.nav-header-active {
    background: #f1f1f3;
}

.line-clamp {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

.adminContent {
    padding-top: $h-header;
    // padding-left: $w-lefNav;
    width: 100%;
}

================
File: src/assets/images/alert.svg
================
<svg width="9" height="9" viewBox="0 0 9 9" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M3.33329 5.1721C3.33329 5.13139 3.36661 5.09807 3.40732 5.09807H3.73306C3.77377 5.09807 3.80709 5.13139 3.80709 5.1721V6.43803H6.43517V5.00924C6.43517 3.99946 5.6164 3.18068 4.60662 3.18068C3.59684 3.18068 2.77806 3.99946 2.77806 5.00924V6.43803H3.33329V5.1721Z" fill="#492419"/>
<path d="M2.42205 3.13997L2.71522 2.84681C2.73817 2.82386 2.73817 2.78611 2.71522 2.76316L2.21255 2.26049C2.20142 2.24947 2.18639 2.24328 2.17072 2.24328C2.15506 2.24328 2.14002 2.24947 2.12889 2.26049L1.83573 2.55365C1.82471 2.56478 1.81853 2.57981 1.81853 2.59548C1.81853 2.61114 1.82471 2.62617 1.83573 2.63731L2.3384 3.13997C2.36135 3.16292 2.39836 3.16292 2.42205 3.13997ZM7.37915 2.55365L7.08598 2.26049C7.07485 2.24947 7.05982 2.24328 7.04416 2.24328C7.02849 2.24328 7.01346 2.24947 7.00233 2.26049L6.49966 2.76316C6.48864 2.77429 6.48246 2.78932 6.48246 2.80498C6.48246 2.82065 6.48864 2.83568 6.49966 2.84681L6.79282 3.13997C6.81577 3.16292 6.85353 3.16292 6.87648 3.13997L7.37915 2.63731C7.40209 2.61362 7.40209 2.5766 7.37915 2.55365ZM4.39941 2.17387H4.81398C4.84656 2.17387 4.87321 2.14722 4.87321 2.11465V1.40395C4.87321 1.37138 4.84656 1.34473 4.81398 1.34473H4.39941C4.36684 1.34473 4.34019 1.37138 4.34019 1.40395V2.11465C4.34019 2.14722 4.36684 2.17387 4.39941 2.17387ZM6.97568 7.44485H2.23772C2.10668 7.44485 2.00082 7.55072 2.00082 7.68175V7.85943C2.00082 7.892 2.02747 7.91865 2.06004 7.91865H7.15335C7.18593 7.91865 7.21258 7.892 7.21258 7.85943V7.68175C7.21258 7.55072 7.10671 7.44485 6.97568 7.44485ZM2.24512 6.73416C2.24512 6.86519 2.35099 6.97106 2.48202 6.97106H6.73138C6.86241 6.97106 6.96828 6.86519 6.96828 6.73416V5.00925C6.96828 3.70483 5.91112 2.64767 4.6067 2.64767C3.30228 2.64767 2.24512 3.70483 2.24512 5.00925V6.73416ZM2.77814 5.00925C2.77814 3.99947 3.59692 3.18069 4.6067 3.18069C5.61648 3.18069 6.43526 3.99947 6.43526 5.00925V6.43804H3.80717V5.17211C3.80717 5.1314 3.77385 5.09808 3.73314 5.09808H3.4074C3.36669 5.09808 3.33337 5.1314 3.33337 5.17211V6.43804H2.77814V5.00925Z" fill="#FE2E00"/>
</svg>

================
File: src/assets/images/app_dash.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path opacity="0.32" d="M21.1808 16.9703C20.8971 17.6255 20.2225 18 19.5086 18H14.8154C14.8462 17.9145 14.8735 17.8269 14.8971 17.7373C15.1709 16.6974 14.8825 15.639 14.2214 14.8963C14.4654 12.9091 14.6177 10.8733 14.7108 9.26516C14.7569 8.46731 13.7795 8.20081 13.4274 8.91526C12.7178 10.3553 11.8493 12.1958 11.0842 14.041C10.1467 14.3479 9.3768 15.1177 9.10295 16.1576C8.93642 16.7899 8.97782 17.4291 9.18451 18H4.49141C3.77747 18 3.10288 17.6255 2.81918 16.9703C2.29212 15.7533 2 14.4108 2 13C2 7.47715 6.47715 3 12 3C17.5229 3 22 7.47715 22 13C22 14.4108 21.7079 15.7533 21.1808 16.9703Z" fill="rgb(99, 115, 129)"/>
<path d="M14.7108 9.26516C14.7569 8.46731 13.7795 8.20081 13.4274 8.91526C12.7178 10.3553 11.8493 12.1958 11.0842 14.041C10.1467 14.3479 9.3768 15.1177 9.10295 16.1576C8.6742 17.7856 9.62375 19.459 11.2238 19.8953C12.8238 20.3315 14.4684 19.3654 14.8971 17.7373C15.1709 16.6974 14.8825 15.639 14.2214 14.8963C14.4654 12.9091 14.6177 10.8733 14.7108 9.26516Z" fill="rgb(99, 115, 129)"/>
</svg>

================
File: src/assets/images/bell.svg
================
<svg width="11" height="13" viewBox="0 0 11 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.28171 12.4278C6.09882 12.4278 6.76163 11.765 6.76163 10.9472H3.80179C3.80179 11.765 4.46459 12.4278 5.28171 12.4278ZM10.2647 8.96429C9.8177 8.48402 8.98139 7.76153 8.98139 5.39486C8.98139 3.59731 7.72102 2.15833 6.02155 1.8053V1.32318C6.02155 0.914389 5.69026 0.58287 5.28171 0.58287C4.87315 0.58287 4.54186 0.914389 4.54186 1.32318V1.8053C2.8424 2.15833 1.58203 3.59731 1.58203 5.39486C1.58203 7.76153 0.745713 8.48402 0.298753 8.96429C0.159946 9.11351 0.0984076 9.29188 0.0995643 9.46655C0.102109 9.84595 0.399851 10.2069 0.842184 10.2069H9.72123C10.1636 10.2069 10.4615 9.84595 10.4639 9.46655C10.465 9.29188 10.4035 9.11328 10.2647 8.96429Z" fill="#8A8587"/>
</svg>

================
File: src/assets/images/bills.svg
================
<svg width="13" height="12" viewBox="0 0 13 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M11.5281 2.6345C10.8677 2.35919 10.2067 2.25445 9.54605 2.25445C7.44886 2.25428 5.35184 3.30932 3.25465 3.30932C2.7287 3.30932 2.20308 3.24299 1.67712 3.07716C1.61804 3.05855 1.55879 3.04975 1.5009 3.04975C1.20786 3.04975 0.951782 3.27514 0.951782 3.58802V8.95647C0.951782 9.17018 1.07489 9.37273 1.27257 9.45497C1.93304 9.73044 2.59401 9.83519 3.25465 9.83519C5.35184 9.83519 7.44903 8.78015 9.54622 8.78015C10.0722 8.78015 10.5978 8.84648 11.1237 9.01231C11.1828 9.03092 11.2421 9.03972 11.3 9.03972C11.593 9.03972 11.8491 8.81433 11.8491 8.50145V3.13317C11.8489 2.91929 11.7258 2.71691 11.5281 2.6345ZM1.76907 3.9503C2.11165 4.03559 2.46921 4.0784 2.83699 4.10141C2.73687 4.59873 2.2969 4.97353 1.76907 4.97353V3.9503ZM1.76907 8.77287V7.96437C2.35428 7.96437 2.82779 8.42581 2.85384 9.00334C2.47023 8.97271 2.11165 8.89656 1.76907 8.77287ZM6.40035 7.66926C5.64794 7.66926 5.03821 6.94182 5.03821 6.04482C5.03821 5.14765 5.64811 4.42038 6.40035 4.42038C7.15259 4.42038 7.76249 5.14765 7.76249 6.04482C7.76249 6.94216 7.15242 7.66926 6.40035 7.66926ZM11.0316 8.13934C10.7333 8.06505 10.4236 8.02343 10.1067 7.99652C10.2067 7.55521 10.575 7.22017 11.0316 7.16264V8.13934ZM11.0316 4.14405C10.5057 4.07789 10.0975 3.64149 10.0814 3.10255C10.4141 3.13927 10.7299 3.20797 11.0316 3.31677V4.14405Z" fill="white" fill-opacity="0.4"/>
</svg>

================
File: src/assets/images/btnClose.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="component-iconify MuiBox-root css-540lu8 iconify iconify--mingcute" width="1em" height="1em" viewBox="0 0 24 24"><g fill="none" fill-rule="evenodd"><path d="M24 0v24H0V0zM12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427c-.002-.01-.009-.017-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093c.012.004.023 0 .029-.008l.004-.014l-.034-.614c-.003-.012-.01-.02-.02-.022m-.715.002a.023.023 0 0 0-.027.006l-.006.014l-.034.614c0 .012.007.02.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z"></path><path fill="white" d="m12 13.414l5.657 5.657a1 1 0 0 0 1.414-1.414L13.414 12l5.657-5.657a1 1 0 0 0-1.414-1.414L12 10.586L6.343 4.929A1 1 0 0 0 4.93 6.343L10.586 12l-5.657 5.657a1 1 0 1 0 1.414 1.414z"></path></g></svg>

================
File: src/assets/images/budget.svg
================
<svg width="13" height="12" viewBox="0 0 13 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9.83536 1.54747H8.05863C8.05863 0.763487 7.42123 0.126083 6.63724 0.126083C5.85326 0.126083 5.21585 0.763487 5.21585 1.54747H3.43912C2.85057 1.54747 2.37308 2.02497 2.37308 2.61351V10.4311C2.37308 11.0197 2.85057 11.4972 3.43912 11.4972H9.83536C10.4239 11.4972 10.9014 11.0197 10.9014 10.4311V2.61351C10.9014 2.02497 10.4239 1.54747 9.83536 1.54747ZM4.50516 9.54278C4.20978 9.54278 3.97214 9.30514 3.97214 9.00976C3.97214 8.71438 4.20978 8.47674 4.50516 8.47674C4.80054 8.47674 5.03818 8.71438 5.03818 9.00976C5.03818 9.30514 4.80054 9.54278 4.50516 9.54278ZM4.50516 7.4107C4.20978 7.4107 3.97214 7.17306 3.97214 6.87768C3.97214 6.58229 4.20978 6.34466 4.50516 6.34466C4.80054 6.34466 5.03818 6.58229 5.03818 6.87768C5.03818 7.17306 4.80054 7.4107 4.50516 7.4107ZM4.50516 5.27861C4.20978 5.27861 3.97214 5.04098 3.97214 4.74559C3.97214 4.45021 4.20978 4.21257 4.50516 4.21257C4.80054 4.21257 5.03818 4.45021 5.03818 4.74559C5.03818 5.04098 4.80054 5.27861 4.50516 5.27861ZM6.63724 1.01445C6.93262 1.01445 7.17026 1.25209 7.17026 1.54747C7.17026 1.84285 6.93262 2.08049 6.63724 2.08049C6.34186 2.08049 6.10422 1.84285 6.10422 1.54747C6.10422 1.25209 6.34186 1.01445 6.63724 1.01445ZM9.48002 9.18743C9.48002 9.28515 9.40006 9.3651 9.30234 9.3651H6.10422C6.0065 9.3651 5.92655 9.28515 5.92655 9.18743V8.83208C5.92655 8.73436 6.0065 8.65441 6.10422 8.65441H9.30234C9.40006 8.65441 9.48002 8.73436 9.48002 8.83208V9.18743ZM9.48002 7.05535C9.48002 7.15307 9.40006 7.23302 9.30234 7.23302H6.10422C6.0065 7.23302 5.92655 7.15307 5.92655 7.05535V6.7C5.92655 6.60228 6.0065 6.52233 6.10422 6.52233H9.30234C9.40006 6.52233 9.48002 6.60228 9.48002 6.7V7.05535ZM9.48002 4.92327C9.48002 5.02099 9.40006 5.10094 9.30234 5.10094H6.10422C6.0065 5.10094 5.92655 5.02099 5.92655 4.92327V4.56792C5.92655 4.4702 6.0065 4.39025 6.10422 4.39025H9.30234C9.40006 4.39025 9.48002 4.4702 9.48002 4.56792V4.92327Z" fill="white" fill-opacity="0.4"/>
</svg>

================
File: src/assets/images/card copy.svg
================
<svg width="13" height="13" viewBox="0 0 13 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0.951782 10.4413C0.951782 10.9458 1.35854 11.3551 1.85989 11.3551H10.941C11.4423 11.3551 11.8491 10.9458 11.8491 10.4413V7.0909H0.951782V10.4413ZM4.58422 9.14684C4.58422 9.0212 4.68638 8.9184 4.81124 8.9184H7.38422C7.50909 8.9184 7.61125 9.0212 7.61125 9.14684V9.90829C7.61125 10.0339 7.50909 10.1367 7.38422 10.1367H4.81124C4.68638 10.1367 4.58422 10.0339 4.58422 9.90829V9.14684ZM2.16259 9.14684C2.16259 9.0212 2.26476 8.9184 2.38962 8.9184H3.75178C3.87665 8.9184 3.97881 9.0212 3.97881 9.14684V9.90829C3.97881 10.0339 3.87665 10.1367 3.75178 10.1367H2.38962C2.26476 10.1367 2.16259 10.0339 2.16259 9.90829V9.14684ZM11.8491 3.74049V4.65424H0.951782V3.74049C0.951782 3.23602 1.35854 2.82674 1.85989 2.82674H10.941C11.4423 2.82674 11.8491 3.23602 11.8491 3.74049Z" fill="white" fill-opacity="0.4"/>
</svg>

================
File: src/assets/images/check.svg
================
<svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_2_45)">
<path d="M4.56435 5.37395L5.98573 6.79534L10.7237 2.05738" stroke="#BDBABB" stroke-width="0.947592" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M10.2498 5.84773V9.1643C10.2498 9.41562 10.15 9.65665 9.97228 9.83435C9.79457 10.0121 9.55355 10.1119 9.30223 10.1119H2.66909C2.41777 10.1119 2.17675 10.0121 1.99904 9.83435C1.82133 9.65665 1.7215 9.41562 1.7215 9.1643V2.53116C1.7215 2.27984 1.82133 2.03882 1.99904 1.86111C2.17675 1.6834 2.41777 1.58357 2.66909 1.58357H7.88084" stroke="#BDBABB" stroke-width="0.947592" stroke-linecap="round" stroke-linejoin="round"/>
</g>
<defs>
<clipPath id="clip0_2_45">
<rect width="11.3711" height="11.3711" fill="white" transform="translate(0.300171 0.16217)"/>
</clipPath>
</defs>
</svg>

================
File: src/assets/images/delete.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="component-iconify MuiBox-root css-1t9pz9x iconify iconify--solar" width="1em" height="1em" viewBox="0 0 24 24"><path fill="#ff5630" d="M3 6.386c0-.484.345-.877.771-.877h2.665c.529-.016.996-.399 1.176-.965l.03-.1l.115-.391c.07-.24.131-.45.217-.637c.338-.739.964-1.252 1.687-1.383c.184-.033.378-.033.6-.033h3.478c.223 0 .417 0 .6.033c.723.131 1.35.644 1.687 1.383c.086.187.147.396.218.637l.114.391l.03.1c.18.566.74.95 1.27.965h2.57c.427 0 .772.393.772.877s-.345.877-.771.877H3.77c-.425 0-.77-.393-.77-.877"></path><path fill="#ff5630" fill-rule="evenodd" d="M11.596 22h.808c2.783 0 4.174 0 5.08-.886c.904-.886.996-2.339 1.181-5.245l.267-4.188c.1-1.577.15-2.366-.303-2.865c-.454-.5-1.22-.5-2.753-.5H8.124c-1.533 0-2.3 0-2.753.5c-.454.5-.404 1.288-.303 2.865l.267 4.188c.185 2.906.277 4.36 1.182 5.245c.905.886 2.296.886 5.079.886m-1.35-9.811c-.04-.434-.408-.75-.82-.707c-.413.043-.713.43-.672.864l.5 5.263c.04.434.408.75.82.707c.413-.043.713-.43.672-.864zm4.329-.707c.412.043.713.43.671.864l-.5 5.263c-.04.434-.409.75-.82.707c-.413-.043-.713-.43-.672-.864l.5-5.263c.04-.434.409-.75.82-.707" clip-rule="evenodd"></path></svg>

================
File: src/assets/images/ecommerce_dash.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path opacity="0.32" d="M4.32992 6C3.84871 6 3.43524 6.34385 3.34854 6.8172C1.98294 14.2724 1.75 18 1.75 18H22.25C22.25 18 22.017 14.2724 20.6514 6.8172C20.5647 6.34385 20.1513 6 19.67 6H4.32992Z" fill="rgb(99, 115, 129)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.25 18H1.75C1.75 18 1.75 18.695 1.80122 19.6754C1.87282 21.0459 2.95622 22.0861 4.32766 22.138C5.855 22.1959 8.2782 22.25 12 22.25C15.7218 22.25 18.145 22.1959 19.6723 22.138C21.0438 22.0861 22.1272 21.0459 22.1988 19.6754C22.25 18.695 22.25 18 22.25 18Z" fill="rgb(99, 115, 129)"/>
<path d="M12 1C9.2386 1 7 3.23857 7 6H9C9 4.34314 10.3432 3 12 3C13.6568 3 15 4.34314 15 6H17C17 3.23857 14.7614 1 12 1Z" fill="rgb(99, 115, 129)"/>
</svg>

================
File: src/assets/images/edit.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="component-iconify MuiBox-root css-1t9pz9x iconify iconify--solar" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="m11.4 18.161l7.396-7.396a10.289 10.289 0 0 1-3.326-2.234a10.29 10.29 0 0 1-2.235-3.327L5.839 12.6c-.577.577-.866.866-1.114 1.184a6.556 6.556 0 0 0-.749 1.211c-.173.364-.302.752-.56 1.526l-1.362 4.083a1.06 1.06 0 0 0 1.342 1.342l4.083-1.362c.775-.258 1.162-.387 1.526-.56c.43-.205.836-.456 1.211-.749c.318-.248.607-.537 1.184-1.114m9.448-9.448a3.932 3.932 0 0 0-5.561-5.561l-.887.887l.038.111a8.754 8.754 0 0 0 2.092 3.32a8.754 8.754 0 0 0 3.431 2.13z"></path></svg>

================
File: src/assets/images/empty_check.svg
================
<svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9.30225 2.3931H2.6691C2.14576 2.3931 1.72151 2.81735 1.72151 3.34069V9.97383C1.72151 10.4972 2.14576 10.9214 2.6691 10.9214H9.30225C9.82559 10.9214 10.2498 10.4972 10.2498 9.97383V3.34069C10.2498 2.81735 9.82559 2.3931 9.30225 2.3931Z" stroke="#8A8587" stroke-width="0.947592" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

================
File: src/assets/images/facebook-svgrepo-com.svg
================
<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="none"><path fill="#1877F2" d="M15 8a7 7 0 00-7-7 7 7 0 00-1.094 13.915v-4.892H5.13V8h1.777V6.458c0-1.754 1.045-2.724 2.644-2.724.766 0 1.567.137 1.567.137v1.723h-.883c-.87 0-1.14.54-1.14 1.093V8h1.941l-.31 2.023H9.094v4.892A7.001 7.001 0 0015 8z"/><path fill="#ffffff" d="M10.725 10.023L11.035 8H9.094V6.687c0-.553.27-1.093 1.14-1.093h.883V3.87s-.801-.137-1.567-.137c-1.6 0-2.644.97-2.644 2.724V8H5.13v2.023h1.777v4.892a7.037 7.037 0 002.188 0v-4.892h1.63z"/></svg>

================
File: src/assets/images/fileSelect.svg
================
<svg class="MuiBox-root css-olkjfu" viewBox="0 0 480 360" xmlns="http://www.w3.org/2000/svg"><defs><linearGradient id="BG" x1="19.496%" x2="77.479%" y1="71.822%" y2="16.69%"><stop offset="0%" stop-color="#00A76F"></stop><stop offset="100%" stop-color="#00A76F" stop-opacity="0"></stop></linearGradient></defs><path fill="url(#BG)" fill-rule="nonzero" d="M0 198.78c0 41.458 14.945 79.236 39.539 107.786 28.214 32.765 69.128 53.365 114.734 53.434a148.44 148.44 0 0056.495-11.036c9.051-3.699 19.182-3.274 27.948 1.107a75.779 75.779 0 0033.957 8.01c5.023 0 9.942-.494 14.7-1.433 13.58-2.67 25.94-8.99 36.09-17.94 6.378-5.627 14.547-8.456 22.897-8.446h.142c27.589 0 53.215-8.732 74.492-23.696 19.021-13.36 34.554-31.696 44.904-53.224C474.92 234.58 480 213.388 480 190.958c0-76.93-59.774-139.305-133.498-139.305-7.516 0-14.88.663-22.063 1.899C305.418 21.42 271.355 0 232.499 0a103.651 103.651 0 00-45.88 10.661c-13.24 6.487-25.011 15.705-34.64 26.939-32.698.544-62.931 11.69-87.676 30.291C25.351 97.155 0 144.882 0 198.781z" opacity="0.2"></path><defs><linearGradient id="linearGradient-2" x1="30.113%" x2="30.113%" y1="0%" y2="100%"><stop offset="0%" stop-opacity="0"></stop><stop offset="100%"></stop></linearGradient></defs><path fill="#FF4842" fill-rule="nonzero" d="M293.006 206.192c-2.248 2.672-4.676 2.628-6.123 2.251l.054-1.384s5.979-2.733 5.827-2.159c-.057.215.057.733.242 1.292zM309.393 209.217c-3.818 2.206-6.058-.38-6.578-1.112.32-.84.801-2.204.703-2.592-.144-.577 5.827 2.155 5.827 2.155l.048 1.549zM305.303 187.204s3.632-2.093 4.425-1.151c.792.942-4.425 1.151-4.425 1.151zM307.497 188.355s-.598.299.721.681c1.318.383-.721-.681-.721-.681zM285.532 182.599c-.123.036 3.022 2.123 5.862.395-.012 0-5.154-.61-5.862-.395zM291.239 186.591s-.861 1.692-2.625 1.943c-1.764.251 2.625-1.943 2.625-1.943zM302.785 190.262s4.138 6.578 3.346 8.129c-.793 1.552-3.346-8.129-3.346-8.129zM294.62 216.416c0 .368 0 .712-.036.996-.107 1.33-3.381.828-3.381.828-2.99.416-4.066-1.019-4.422-2.392a5.444 5.444 0 01-.164-1.363 5.606 5.606 0 01.054-.819v-.272a1.998 1.998 0 011.859.379c1.331 1.08 3.095.252 3.095.252s1.294.107 1.793.538c.281.242.745-.341 1.098-.897.021.359.054 1.007.074 1.701.024.356.03.714.03 1.049z" opacity="0.05"></path><path fill="#FF4842" fill-rule="nonzero" d="M289.37 216.339s-.897.879-2.589-.479a5.444 5.444 0 01-.164-1.363c.864.658 2.466 1.842 2.753 1.842zM294.62 216.416a.67.67 0 01-.519.132.672.672 0 01-.452-.287c.348-.266.669-.566.956-.897.009.359.015.717.015 1.052zM301.637 217.032c0 .371 0 .715.033.996.108 1.333 3.382.828 3.382.828 2.989.419 4.066-1.017 4.421-2.392a5.728 5.728 0 00.111-2.182v-.272a2.024 2.024 0 00-1.862.379c-1.331 1.08-3.092.251-3.092.251s-1.294.111-1.794.542c-.281.242-.744-.341-1.094-.897a61.426 61.426 0 00-.078 1.701c-.024.35-.03.708-.027 1.046z" opacity="0.05"></path><path fill="#FF4842" fill-rule="nonzero" d="M306.887 216.949s.897.879 2.587-.479c.112-.444.169-.901.167-1.36-.867.655-2.47 1.839-2.754 1.839zM301.637 217.032a.67.67 0 00.969-.155 6.35 6.35 0 01-.957-.897c-.009.356-.014.714-.012 1.052zM319.614 106.269c.063-.138.123-.275.18-.41.057-.134.077-.209.11-.317-.11.237-.206.48-.29.727z" opacity="0.05"></path><path fill="#004B50" fill-rule="nonzero" d="M157.592 279.461a4.114 4.114 0 01-.917-3.131l13.196-107.979 1.094-8.97a4.142 4.142 0 014.078-3.635l38.654-.257a4.135 4.135 0 004.108-4.249l-.015-.409a4.14 4.14 0 014.135-4.279h40.619a4.134 4.134 0 014.098 4.682 4.137 4.137 0 003.995 4.682l39.01.996a4.13 4.13 0 013.97 4.831l-19.502 113.909-.368 2.152a4.042 4.042 0 01-.598 1.543l-135.557.114z"></path><path fill="#FFF" fill-rule="nonzero" d="M251.256817 123.296578L274.098317 123.296578 274.098317 200.823078 251.256817 200.823078z" transform="rotate(34.64 262.678 162.06)"></path><path fill="#FFC107" fill-rule="nonzero" d="M270.624591 129.857671L286.750291 129.857671 286.750291 145.983371 270.624591 145.983371z" transform="rotate(34.804 278.687 137.92)"></path><path fill="#FFC107" fill-rule="nonzero" d="M260.275579 145.813111L276.423079 145.813111 276.423079 161.960611 260.275579 161.960611z" opacity="0.5" transform="rotate(34.64 268.35 153.887)"></path><path fill="#FFC107" fill-rule="nonzero" d="M249.191579 161.852111L265.339079 161.852111 265.339079 177.999611 249.191579 177.999611z" opacity="0.3" transform="rotate(34.64 257.265 169.926)"></path><path fill="#FFF" fill-rule="nonzero" d="M237.472537 121.334214L260.314037 121.334214 260.314037 198.567714 237.472537 198.567714z" transform="rotate(16.29 248.893 159.951)"></path><path fill="#FF4842" fill-rule="nonzero" d="M249.053192 123.761554L265.200692 123.761554 265.200692 139.909054 249.053192 139.909054z" transform="rotate(16.29 257.127 131.835)"></path><path fill="#FF4842" fill-rule="nonzero" d="M243.584192 142.473554L259.731692 142.473554 259.731692 158.621053 243.584192 158.621053z" opacity="0.5" transform="rotate(16.29 251.658 150.547)"></path><path fill="#FF4842" fill-rule="nonzero" d="M238.116192 161.182554L254.263692 161.182554 254.263692 177.330054 238.116192 177.330054z" opacity="0.3" transform="rotate(16.29 246.19 169.256)"></path><path fill="#FFF" fill-rule="nonzero" d="M230.099192 121.641542L252.940692 121.641542 252.940692 198.875042 230.099192 198.875042z" transform="rotate(4.6 241.52 160.258)"></path><path fill="#1890FF" fill-rule="nonzero" d="M235.800489 122.985499L251.947989 122.985499 251.947989 139.132999 235.800489 139.132999z" transform="rotate(4.6 243.874 131.06)"></path><path fill="#1890FF" fill-rule="nonzero" d="M234.234488 142.413498L250.381988 142.413498 250.381988 158.560998 234.234488 158.560998z" opacity="0.5" transform="rotate(4.6 242.308 150.487)"></path><path fill="#1890FF" fill-rule="nonzero" d="M232.672488 161.846499L248.819988 161.846499 248.819988 177.993999 232.672488 177.993999z" opacity="0.3" transform="rotate(4.6 240.746 169.92)"></path><path fill="#FFF" fill-rule="nonzero" d="M224.736657 123.384871L247.578157 123.384871 247.578157 200.618371 224.736657 200.618371z" transform="rotate(-2.61 236.157 162.002)"></path><path fill="#00A76F" fill-rule="nonzero" d="M226.751283 124.659968L242.898783 124.659968 242.898783 140.807468 226.751283 140.807468z" transform="rotate(-2.61 234.825 132.734)"></path><path fill="#00A76F" fill-rule="nonzero" d="M228.305601 143.479224L244.473301 143.479224 244.473301 159.646924 228.305601 159.646924z" opacity="0.5" transform="rotate(-2.862 236.39 151.563)"></path><path fill="#00A76F" fill-rule="nonzero" d="M228.525282 163.608968L244.672782 163.608968 244.672782 179.756468 228.525282 179.756468z" opacity="0.3" transform="rotate(-2.61 236.599 171.683)"></path><path fill="#F4F6F8" fill-rule="nonzero" d="M232.679 225.726l-20.294 7.851-29.661 11.466c-1.121-2.093-2.771-4.921-4.813-8.297-7.026-11.642-18.65-29.75-29.001-45.665-11.66-17.938-21.696-33.075-21.696-33.075l7.265-2.093 59.346-17.23 38.854 87.043z"></path><path fill="#000" fill-rule="nonzero" d="M232.679 225.726l-20.294 7.851a152.535 152.535 0 01-34.484 3.169c-7.026-11.642-18.65-29.75-29-45.665l-14.42-35.18 59.343-17.218 38.855 87.043z" opacity="0.1"></path><path fill="#00A76F" fill-rule="nonzero" d="M247.777 220.841s-31.526 18.65-78.596 14.432l-37.525-91.486 17.984-3.091 62.168-10.677 35.279 89.043.69 1.779z"></path><path fill="#FF4842" fill-rule="nonzero" d="M247.075 219.074c-7.424.365-16.013.329-24.654-.702-9.351-1.101-18.757-3.367-26.82-7.523-6.742-3.471-12.506-7.247-17.532-11.776-13.074-11.759-21.164-28.579-28.429-58.365l62.168-10.677 35.267 89.043z" opacity="0.1"></path><path fill="#FFF" fill-rule="nonzero" d="M270.203 213.959s-23.239 4.55-46.894 1.749c-9.351-1.1-18.757-3.367-26.82-7.522-6.742-3.471-12.503-7.247-17.532-11.777-16.181-14.557-24.725-36.866-33.536-81.918 0 0 38.633 9.325 76.836-11.101-.012.015 12.865 80.373 47.946 110.569z"></path><path fill="#00A76F" fill-rule="nonzero" d="M165.405 131.03s31.416-1.776 40.187-8.548l1.331 4.276s-20.758 9.157-41.518 9.268v-4.996zM165.405 152.137s30.417-1.665 53.399-12.766l.777 1.776s-18.237 10.647-54.176 13.433v-2.443zM167.853 160.362s30.418-1.665 53.397-12.766l.777 1.776s-18.237 10.643-54.174 13.433v-2.443zM170.299 168.599s30.417-1.666 53.399-12.766l.774 1.775s-18.237 10.647-54.173 13.433v-2.442zM172.748 176.835s30.417-1.665 53.396-12.766l.777 1.776s-18.237 10.647-54.173 13.433v-2.443zM175.193 185.075s30.417-1.665 53.399-12.766l.774 1.776s-18.237 10.643-54.173 13.433v-2.443z" opacity="0.3"></path><path fill="#00A76F" fill-rule="nonzero" d="M389.069 287.344s-12.641-.762-11.152 8.097c0 0-.299 1.563 1.124 2.275 0 0 .021-.658 1.295-.434.454.077.916.099 1.375.066a2.832 2.832 0 001.677-.694c.468-.409 3.555-1.468 4.936-7.274 0 0 1.023-1.267.981-1.593l-2.132.897s.73 1.54.156 2.816c0 0-.069-2.759-.479-2.691-.083 0-1.109.533-1.109.533s1.253 2.69.299 4.628c0 0 .359-3.304-.699-4.434l-1.495.876s1.465 2.768.472 5.029c0 0 .254-3.465-.789-4.817l-1.361 1.062s1.379 2.729.539 4.604c0 0-.111-4.036-.835-4.341 0 0-1.195 1.049-1.369 1.494 0 0 .942 1.98.356 3.026 0 0-.359-2.691-.652-2.691 0 0-1.196 1.794-1.309 2.99 0 0 .051-1.818 1.022-3.172a3.593 3.593 0 00-1.818.942s.186-1.262 2.111-1.37c0 0 .981-1.351 1.241-1.435 0 0-1.914-.158-3.074.356 0 0 1.023-1.196 3.427-.649l1.342-1.094s-2.52-.347-3.588.036c0 0 1.229-1.052 3.95-.299l1.462-.873s-2.147-.463-3.426-.299c0 0 1.348-.729 3.856.06l1.044-.47s-1.573-.299-2.033-.358c-.461-.06-.488-.174-.488-.174a5.426 5.426 0 012.957.329s2.222-.813 2.186-.954z"></path><ellipse cx="380.363" cy="298.487" fill="#00A76F" fill-rule="nonzero" opacity="0.1" rx="8.945" ry="1.513"></ellipse><path fill="#00A76F" fill-rule="nonzero" d="M394.956 258.102s-7.125-.43-6.279 4.565a1.218 1.218 0 00.631 1.283s.015-.371.733-.245c.255.042.515.054.774.036.349-.023.681-.159.945-.389.264-.23 2.003-.828 2.783-4.102 0 0 .577-.714.553-.897l-1.196.511s.41.87.087 1.591c0 0-.039-1.558-.269-1.522-.048 0-.625.299-.625.299s.706 1.495.173 2.61c0 0 .204-1.862-.394-2.502l-.846.496s.825 1.561.266 2.834c0 0 .143-1.955-.446-2.714l-.765.598s.774 1.539.299 2.595c0 0-.063-2.275-.469-2.446a4.75 4.75 0 00-.775.834s.532 1.118.204 1.707c0 0-.204-1.515-.368-1.521 0 0-.67 1.001-.739 1.689a3.671 3.671 0 01.577-1.794 2.007 2.007 0 00-1.025.532s.104-.711 1.196-.771c0 0 .553-.763.699-.81 0 0-1.079-.09-1.734.2 0 0 .577-.67 1.932-.365l.759-.619s-1.423-.194-2.024.021c0 0 .694-.598 2.227-.161l.826-.494a7.445 7.445 0 00-1.935-.164s.763-.413 2.174.033l.598-.263s-.897-.177-1.148-.203c-.252-.027-.275-.099-.275-.099a3.078 3.078 0 011.668.185s1.232-.46 1.208-.538z"></path><ellipse cx="390.052" cy="264.383" fill="#00A76F" fill-rule="nonzero" opacity="0.1" rx="5.044" ry="1"></ellipse><path fill="#00A76F" fill-rule="nonzero" d="M352.896 262.437s-8.604-.52-7.588 5.51a1.47 1.47 0 00.763 1.549s0-.449.897-.299c.309.052.623.067.935.045a1.923 1.923 0 001.142-.473c.318-.279 2.419-.998 3.361-4.951 0 0 .697-.861.667-1.085l-1.468.622s.496 1.046.104 1.916c0 0-.048-1.877-.326-1.835-.056 0-.753.364-.753.364s.852 1.824.209 3.152c0 0 .245-2.249-.475-3.02l-1.023.598s.996 1.886.32 3.423c0 0 .174-2.359-.535-3.289l-.927.724s.939 1.857.365 3.133c0 0-.072-2.747-.565-2.954 0 0-.81.715-.933 1.008 0 0 .64 1.348.242 2.06 0 0-.245-1.83-.445-1.839 0 0-.804 1.214-.897 2.042.04-.768.28-1.512.697-2.159a2.427 2.427 0 00-1.235.643s.125-.858 1.435-.933c0 0 .667-.92.846-.974 0 0-1.303-.111-2.093.239 0 0 .694-.807 2.329-.44l.915-.747s-1.713-.233-2.442.024c0 0 .837-.715 2.69-.191l.996-.598s-1.462-.314-2.335-.201c0 0 .921-.496 2.625.042l.711-.32s-1.07-.209-1.384-.242c-.314-.033-.329-.119-.329-.119a3.69 3.69 0 012.012.221s1.519-.553 1.492-.646z"></path><ellipse cx="346.97" cy="270.022" fill="#00A76F" fill-rule="nonzero" opacity="0.1" rx="6.09" ry="1.028"></ellipse><rect width="51.026" height="91.312" x="303.926" y="69.211" fill="#FFF" fill-rule="nonzero" rx="4.737" transform="rotate(-71.99 329.44 114.867)"></rect><circle cx="303.613" cy="103.507" r="9.376" fill="#00A76F" fill-rule="nonzero" opacity="0.2"></circle><path fill="#00A76F" fill-rule="nonzero" d="M344.582495 86.4883769L347.150665 86.4883769 347.150665 127.336977 344.582495 127.336977z" opacity="0.2" transform="rotate(-71.99 345.867 106.913)"></path><path fill="#00A76F" fill-rule="nonzero" d="M333.028401 99.6373982L335.596571 99.6373982 335.596571 120.445898 333.028401 120.445898z" opacity="0.2" transform="rotate(-71.99 334.312 110.042)"></path><path fill="#00A76F" fill-rule="nonzero" d="M337.109071 101.431004L339.677241 101.431004 339.677241 135.086304 337.109071 135.086304z" opacity="0.2" transform="rotate(-71.99 338.393 118.259)"></path><path fill="#00A76F" fill-rule="nonzero" d="M338.505494 105.174377L341.073664 105.174377 341.073664 146.022978 338.505494 146.022978z" opacity="0.2" transform="rotate(-71.99 339.79 125.599)"></path><path fill="#00A76F" fill-rule="nonzero" d="M348.060839 134.648161L353.026769 134.648161 353.026769 145.952261 348.060839 145.952261z" opacity="0.5" transform="rotate(-71.99 350.544 140.3)"></path><rect width="50.3" height="78.305" x="291.549" y="174.486" fill="#FFF" fill-rule="nonzero" rx="4" transform="rotate(-57.265 316.7 213.638)"></rect><path fill="#DFE3E8" fill-rule="nonzero" d="M278.038439 203.88874L292.269539 203.88874 292.269539 207.23723 278.038439 207.23723z" transform="rotate(-57.57 285.154 205.563)"></path><path fill="#DFE3E8" fill-rule="nonzero" d="M283.007935 199.201889L314.262535 199.201889 314.262535 202.272339 283.007935 202.272339z" transform="rotate(-57.57 298.635 200.737)"></path><path fill="#DFE3E8" fill-rule="nonzero" d="M288.543935 202.715889L319.798535 202.715889 319.798535 205.786339 288.543935 205.786339z" transform="rotate(-57.57 304.171 204.251)"></path><path fill="#DFE3E8" fill-rule="nonzero" d="M294.078936 206.235889L325.333536 206.235889 325.333536 209.306339 294.078936 209.306339z" transform="rotate(-57.57 309.706 207.771)"></path><path fill="#DFE3E8" fill-rule="nonzero" d="M299.879919 211.40702L331.090719 211.40702 331.090719 214.47316 299.879919 214.47316z" transform="rotate(-57.265 315.485 212.94)"></path><path fill="#F4F6F8" fill-rule="nonzero" d="M305.149936 213.268889L336.404536 213.268889 336.404536 216.339339 305.149936 216.339339z" transform="rotate(-57.57 320.777 214.804)"></path><path fill="#F4F6F8" fill-rule="nonzero" d="M310.685935 216.782889L341.940535 216.782889 341.940535 219.853339 310.685935 219.853339z" transform="rotate(-57.57 326.313 218.318)"></path><path fill="#DFE3E8" fill-rule="nonzero" d="M341.417983 210.406958L349.511163 210.406958 349.511163 218.500138 341.417983 218.500138z" transform="rotate(-57.57 345.465 214.454)"></path><path fill="#00A76F" fill-rule="nonzero" d="M269.277 168.76l-45.767.493a3.127 3.127 0 00-3.094 3.125v3.782a3.127 3.127 0 01-3.05 3.124l-33.024.792a3.124 3.124 0 01-3.095-2.308l-1.551-5.701a3.124 3.124 0 00-3.053-2.308l-44.113.475a3.125 3.125 0 00-3.05 3.648l17.747 104.449a3.129 3.129 0 003.071 2.604l139.363.598a3.129 3.129 0 003.082-3.714l-20.366-106.521a3.125 3.125 0 00-3.1-2.538z"></path><path fill="#007867" fill-rule="nonzero" d="M269.277 168.76l-45.767.493a3.127 3.127 0 00-3.094 3.125v3.782a3.127 3.127 0 01-3.05 3.124l-33.024.792a3.124 3.124 0 01-3.095-2.308l-1.551-5.701a3.124 3.124 0 00-3.053-2.308l-44.113.475a3.125 3.125 0 00-3.05 3.648l17.747 104.449a3.129 3.129 0 003.071 2.604l139.363.598a3.129 3.129 0 003.082-3.714l-20.366-106.521a3.125 3.125 0 00-3.1-2.538z" opacity="0.243"></path><path fill="url(#linearGradient-2)" fill-rule="nonzero" d="M269.277 168.76l-45.767.493a3.127 3.127 0 00-3.094 3.125v3.782a3.127 3.127 0 01-3.05 3.124l-33.024.792a3.124 3.124 0 01-3.095-2.308l-1.551-5.701a3.124 3.124 0 00-3.053-2.308l-44.113.475a3.125 3.125 0 00-3.05 3.648l17.747 104.449a3.129 3.129 0 003.071 2.604l139.363.598a3.129 3.129 0 003.082-3.714l-20.366-106.521a3.125 3.125 0 00-3.1-2.538z" opacity="0.32"></path><ellipse cx="119.593" cy="258.664" fill="#00A76F" fill-rule="nonzero" opacity="0.1" rx="4.846" ry="1"></ellipse><ellipse cx="101.03" cy="260.545" fill="#00A76F" fill-rule="nonzero" opacity="0.1" rx="4.846" ry="1"></ellipse><ellipse cx="108.459" cy="265.905" fill="#00A76F" fill-rule="nonzero" opacity="0.1" rx="3.444" ry="1"></ellipse><ellipse cx="89.193" cy="265.433" fill="#00A76F" fill-rule="nonzero" opacity="0.1" rx="3.444" ry="1"></ellipse><path fill="#00A76F" fill-rule="nonzero" d="M100.925 260.398s6.796-22.279-1.064-31.204c-5.881-6.676-12.557-5.877-15.547-5.052a5.528 5.528 0 00-3.564 2.963c-1.046 2.254-.858 5.913 6.521 10.186 12.35 7.151 13.119 16.96 13.119 16.96l.535 6.147z"></path><path stroke="#004B50" stroke-linecap="round" stroke-width="0.5" d="M85.382 227.302s20.031 6.278 15.546 33.096M97.083 229.547s-2.76 1.86-1.88 4.655M87.39 231.203s1.687-1.716 3.741-.768M95.31 239.832s2.963-1.495 3.728.379M102.638 242.962s-2.224-.176-2.263.897"></path><path fill="#00A76F" fill-rule="nonzero" d="M101.2 260.575s-7.961-16.193-10.147-15.846c-1.037.17-1.516 1.196-1.734 2.218a6.516 6.516 0 00.434 3.941c1.13 2.601 4.165 7.519 11.447 9.687z"></path><path stroke="#004B50" stroke-linecap="round" stroke-width="0.5" d="M91.113 247.808s8.353 12.115 9.968 12.647"></path><path stroke="#004B50" stroke-linecap="round" stroke-width="0.5" d="M90.344 249.701L92.293 249.701"></path><path stroke="#004B50" stroke-linecap="round" stroke-width="0.5" d="M92.68 254.132L95.738 254.263"></path><path stroke="#004B50" stroke-linecap="round" stroke-width="0.5" d="M94.542 250.586L94.21 252.179"></path><path stroke="#004B50" stroke-linecap="round" stroke-width="0.5" d="M97.792 255.432L97.732 256.879"></path><path fill="#00A76F" fill-rule="nonzero" d="M100.964 260.575s7.959-16.193 10.144-15.846c1.041.17 1.519 1.196 1.734 2.218a6.514 6.514 0 01-.433 3.941c-1.13 2.601-4.168 7.519-11.445 9.687z"></path><path stroke="#004B50" stroke-linecap="round" stroke-width="0.5" d="M111.051 247.808s-8.371 12.115-9.97 12.647"></path><path stroke="#004B50" stroke-linecap="round" stroke-width="0.5" d="M111.82 249.701L109.871 249.701"></path><path stroke="#004B50" stroke-linecap="round" stroke-width="0.5" d="M109.485 254.132L106.426 254.263"></path><path stroke="#004B50" stroke-linecap="round" stroke-width="0.5" d="M107.622 250.586L107.954 252.179"></path><path stroke="#004B50" stroke-linecap="round" stroke-width="0.5" d="M104.372 255.432L104.432 256.879"></path><path fill="#00A76F" fill-rule="nonzero" d="M87.295 264.357a1.375 1.375 0 01-.452-.685.599.599 0 01.317-.697c.3-.11.598.09.837.299.24.21.512.431.81.38a1.237 1.237 0 01-.382-1.16.47.47 0 01.105-.236c.161-.174.454-.099.648.039.598.43.787 1.264.79 2.018.03-.277.03-.555 0-.831a.853.853 0 01.334-.727.938.938 0 01.476-.114.988.988 0 01.774.222.767.767 0 01-.03.947c-.229.257-.5.474-.801.64a1.805 1.805 0 00-.571.547.399.399 0 00-.042.096h-1.74a4.826 4.826 0 01-1.073-.738zM117.626 257.833a1.355 1.355 0 01-.452-.682.599.599 0 01.314-.696c.299-.111.598.089.837.299.239.209.509.436.817.391a1.236 1.236 0 01-.386-1.157.472.472 0 01.107-.236c.162-.173.455-.099.649.036.613.433.787 1.268.79 2.021a4.008 4.008 0 000-.834.852.852 0 01.299-.736.955.955 0 01.475-.11.998.998 0 01.774.218.768.768 0 01-.033.951 2.996 2.996 0 01-.798.64 1.767 1.767 0 00-.571.544.499.499 0 00-.042.098h-1.701a4.78 4.78 0 01-1.079-.747zM107.518 264.357a1.406 1.406 0 01-.455-.685.6.6 0 01.317-.697c.299-.11.598.09.837.299.239.21.505.437.816.395a1.247 1.247 0 01-.385-1.16.472.472 0 01.107-.236c.162-.174.455-.099.649.039.613.43.783 1.264.789 2.018.03-.277.03-.555 0-.832a.855.855 0 01.314-.735.93.93 0 01.476-.114.988.988 0 01.774.222.764.764 0 01-.033.947 3.028 3.028 0 01-.798.64 1.798 1.798 0 00-.571.547.411.411 0 00-.042.096h-1.734c-.385-.2-.742-.45-1.061-.744z"></path><circle cx="84.467" cy="87.003" r="6.467" fill="#00A76F" fill-rule="nonzero" opacity="0.1"></circle><circle cx="395.425" cy="138.681" r="6.467" fill="#00A76F" fill-rule="nonzero" opacity="0.1"></circle><circle cx="279.178" cy="66.467" r="6.467" fill="#00A76F" fill-rule="nonzero" opacity="0.1"></circle><circle cx="97.4" cy="122.68" r="10.838" fill="#00A76F" fill-rule="nonzero" opacity="0.1"></circle><path fill="#007867" fill-rule="nonzero" d="M206.029 209.911c-7.975 0-14.44 6.465-14.44 14.44s6.465 14.44 14.44 14.44 14.44-6.465 14.44-14.44-6.465-14.44-14.44-14.44z"></path><path fill="#00A76F" fill-rule="nonzero" d="M206.029 211.59c7.047 0 12.761 5.714 12.761 12.761 0 7.048-5.714 12.761-12.761 12.761-7.048 0-12.761-5.713-12.761-12.761.006-7.045 5.716-12.754 12.761-12.761" opacity="0.72"></path><path fill="#007867" fill-rule="nonzero" d="M200.058 225.406l-.699-.681a.721.721 0 010-1.065l6.127-5.984a.753.753 0 01.546-.231c.206 0 .404.083.545.231l6.127 5.978a.733.733 0 010 1.065l-.699.682a.768.768 0 01-1.091 0l-3.622-3.727v8.843a.725.725 0 01-.219.523.76.76 0 01-.534.217h-1.009a.75.75 0 01-.759-.74v-8.832l-3.622 3.726a.768.768 0 01-1.091-.005z"></path></svg>

================
File: src/assets/images/FolderNotchOpen.svg
================
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<g id="FolderNotchOpen">
<path id="Vector" d="M2.5 16.25V5C2.5 4.83424 2.56585 4.67527 2.68306 4.55806C2.80027 4.44085 2.95924 4.375 3.125 4.375H7.29167C7.4269 4.375 7.55848 4.41886 7.66667 4.5L9.83333 6.125C9.94152 6.20614 10.0731 6.25 10.2083 6.25H15.625C15.7908 6.25 15.9497 6.31585 16.0669 6.43306C16.1842 6.55027 16.25 6.70924 16.25 6.875V8.75" stroke="#FF6636" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
<path id="Vector_2" d="M2.5 16.25L4.84285 10.3929C4.88924 10.2769 4.96932 10.1775 5.07275 10.1075C5.17619 10.0374 5.29823 10 5.42315 10H9.18576C9.30916 10 9.42979 9.96348 9.53245 9.89503L11.0925 8.85497C11.1952 8.78652 11.3158 8.75 11.4392 8.75H17.8829C17.9819 8.75 18.0795 8.77353 18.1677 8.81866C18.2558 8.86379 18.332 8.92922 18.3899 9.00956C18.4478 9.0899 18.4858 9.18284 18.5007 9.28074C18.5156 9.37864 18.5071 9.47869 18.4758 9.57264L16.25 16.25H2.5Z" stroke="#FF6636" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
</g>
</svg>

================
File: src/assets/images/gears.svg
================
<svg width="13" height="12" viewBox="0 0 13 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.1777 7.55002L11.1575 6.98605C11.2605 6.45418 11.2605 5.90855 11.1575 5.37668L12.1777 4.81271C12.2951 4.74852 12.3477 4.61555 12.3094 4.49176C12.0436 3.67561 11.591 2.93741 10.9995 2.323C10.9085 2.22901 10.76 2.20608 10.645 2.27027L9.62483 2.83424C9.19616 2.48119 8.70282 2.20837 8.16878 2.02955V0.903911C8.16878 0.775528 8.07538 0.663193 7.94367 0.635683C7.06477 0.447693 6.16431 0.456863 5.32852 0.635683C5.19681 0.663193 5.10341 0.775528 5.10341 0.903911V2.03185C4.57176 2.21296 4.07843 2.48577 3.64736 2.83653L2.62956 2.27257C2.51221 2.20837 2.36613 2.22901 2.27513 2.32529C1.68361 2.93741 1.23099 3.67561 0.965161 4.49405C0.924449 4.61785 0.97953 4.75081 1.09688 4.81501L2.11707 5.37897C2.01409 5.91085 2.01409 6.45647 2.11707 6.98835L1.09688 7.55231C0.97953 7.6165 0.926844 7.74947 0.965161 7.87327C1.23099 8.68942 1.68361 9.42762 2.27513 10.042C2.36613 10.136 2.51461 10.1589 2.62956 10.0948L3.64975 9.53079C4.07843 9.88384 4.57176 10.1567 5.1058 10.3355V11.4634C5.1058 11.5918 5.1992 11.7041 5.33092 11.7316C6.20982 11.9196 7.11027 11.9105 7.94606 11.7316C8.07778 11.7041 8.17117 11.5918 8.17117 11.4634V10.3355C8.70282 10.1544 9.19616 9.88155 9.62722 9.53079L10.6474 10.0948C10.7648 10.1589 10.9108 10.1383 11.0018 10.042C11.5934 9.42991 12.046 8.69171 12.3118 7.87327C12.3477 7.74718 12.2951 7.61421 12.1777 7.55002ZM6.63609 8.01541C5.57998 8.01541 4.72024 7.19238 4.72024 6.18137C4.72024 5.17035 5.57998 4.34732 6.63609 4.34732C7.69221 4.34732 8.55195 5.17035 8.55195 6.18137C8.55195 7.19238 7.69221 8.01541 6.63609 8.01541Z" fill="white" fill-opacity="0.4"/>
</svg>

================
File: src/assets/images/github-svgrepo-com.svg
================
<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="24" cy="24" r="20" fill="#181717"/>
<path d="M6.81348 34.235C9.24811 38.3138 13.0939 41.4526 17.6772 42.9784C18.6779 43.1614 19.0425 42.5438 19.0425 42.0134C19.0425 41.7938 19.0388 41.4058 19.0339 40.8866C19.0282 40.2852 19.0208 39.5079 19.0155 38.6124C13.4524 39.8206 12.2787 35.931 12.2787 35.931C11.3689 33.6215 10.0576 33.0064 10.0576 33.0064C8.2417 31.7651 10.1951 31.7896 10.1951 31.7896C12.2025 31.9321 13.2584 33.8511 13.2584 33.8511C15.0424 36.9071 17.94 36.0243 19.0794 35.5135C19.2611 34.2207 19.7767 33.3391 20.3489 32.8394C15.908 32.3348 11.2387 30.6183 11.2387 22.9545C11.2387 20.7715 12.0184 18.9863 13.2977 17.5879C13.0914 17.082 12.4051 15.0488 13.4929 12.2949C13.4929 12.2949 15.1725 11.7571 18.9934 14.3453C20.5883 13.9021 22.2998 13.6798 24.0003 13.6725C25.6983 13.6798 27.4099 13.9021 29.0072 14.3453C32.8256 11.7571 34.5016 12.2949 34.5016 12.2949C35.5931 15.0488 34.9067 17.082 34.7005 17.5879C35.9823 18.9863 36.757 20.7715 36.757 22.9545C36.757 30.638 32.0804 32.3286 27.6247 32.8234C28.343 33.441 28.9827 34.6614 28.9827 36.5277C28.9827 38.3152 28.9717 39.8722 28.9644 40.9035C28.9608 41.4143 28.9581 41.7962 28.9581 42.0134C28.9581 42.5487 29.3178 43.1712 30.3332 42.976C33.9844 41.7572 37.1671 39.5154 39.5403 36.5903C35.8734 41.1108 30.274 44 23.9997 44C16.6943 44 10.3038 40.0832 6.81348 34.235Z" fill="white"/>
</svg>

================
File: src/assets/images/google-color-svgrepo-com.svg
================
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="-0.5 0 48 48" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    
    <title>Google-color</title>
    <desc>Created with Sketch.</desc>
    <defs>

</defs>
    <g id="Icons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Color-" transform="translate(-401.000000, -860.000000)">
            <g id="Google" transform="translate(401.000000, 860.000000)">
                <path d="M9.82727273,24 C9.82727273,22.4757333 10.0804318,21.0144 10.5322727,19.6437333 L2.62345455,13.6042667 C1.08206818,16.7338667 0.213636364,20.2602667 0.213636364,24 C0.213636364,27.7365333 1.081,31.2608 2.62025,34.3882667 L10.5247955,28.3370667 C10.0772273,26.9728 9.82727273,25.5168 9.82727273,24" id="Fill-1" fill="#FBBC05">

</path>
                <path d="M23.7136364,10.1333333 C27.025,10.1333333 30.0159091,11.3066667 32.3659091,13.2266667 L39.2022727,6.4 C35.0363636,2.77333333 29.6954545,0.533333333 23.7136364,0.533333333 C14.4268636,0.533333333 6.44540909,5.84426667 2.62345455,13.6042667 L10.5322727,19.6437333 C12.3545909,14.112 17.5491591,10.1333333 23.7136364,10.1333333" id="Fill-2" fill="#EB4335">

</path>
                <path d="M23.7136364,37.8666667 C17.5491591,37.8666667 12.3545909,33.888 10.5322727,28.3562667 L2.62345455,34.3946667 C6.44540909,42.1557333 14.4268636,47.4666667 23.7136364,47.4666667 C29.4455,47.4666667 34.9177955,45.4314667 39.0249545,41.6181333 L31.5177727,35.8144 C29.3995682,37.1488 26.7323182,37.8666667 23.7136364,37.8666667" id="Fill-3" fill="#34A853">

</path>
                <path d="M46.1454545,24 C46.1454545,22.6133333 45.9318182,21.12 45.6113636,19.7333333 L23.7136364,19.7333333 L23.7136364,28.8 L36.3181818,28.8 C35.6879545,31.8912 33.9724545,34.2677333 31.5177727,35.8144 L39.0249545,41.6181333 C43.3393409,37.6138667 46.1454545,31.6490667 46.1454545,24" id="Fill-4" fill="#4285F4">

</path>
            </g>
        </g>
    </g>
</svg>

================
File: src/assets/images/home.svg
================
<svg width="13" height="10" viewBox="0 0 13 10" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.71764 2.87847L2.92624 6.00113V9.37137C2.92624 9.45863 2.96091 9.54232 3.02261 9.60403C3.08431 9.66573 3.168 9.7004 3.25526 9.7004L5.55967 9.69443C5.64665 9.694 5.72992 9.65914 5.79127 9.59748C5.85261 9.53583 5.88705 9.45239 5.88705 9.36541V7.39722C5.88705 7.30996 5.92172 7.22627 5.98342 7.16456C6.04513 7.10286 6.12882 7.0682 6.21608 7.0682H7.53218C7.61944 7.0682 7.70313 7.10286 7.76483 7.16456C7.82654 7.22627 7.8612 7.30996 7.8612 7.39722V9.36397C7.86107 9.40726 7.86948 9.45016 7.88595 9.4902C7.90243 9.53023 7.92664 9.56663 7.95721 9.59729C7.98777 9.62795 8.02409 9.65228 8.06408 9.66888C8.10406 9.68548 8.14693 9.69402 8.19023 9.69402L10.4938 9.7004C10.5811 9.7004 10.6648 9.66573 10.7265 9.60403C10.7882 9.54232 10.8228 9.45863 10.8228 9.37137V5.99886L7.03227 2.87847C6.9877 2.84255 6.93219 2.82297 6.87495 2.82297C6.81771 2.82297 6.7622 2.84255 6.71764 2.87847ZM12.7065 5.00089L10.9874 3.58382V0.735492C10.9874 0.670045 10.9614 0.607279 10.9151 0.561001C10.8688 0.514723 10.806 0.488724 10.7406 0.488724H9.58899C9.52355 0.488724 9.46078 0.514723 9.4145 0.561001C9.36823 0.607279 9.34223 0.670045 9.34223 0.735492V2.22865L7.50113 0.7139C7.32444 0.568508 7.10274 0.489014 6.87392 0.489014C6.64511 0.489014 6.4234 0.568508 6.24672 0.7139L1.04134 5.00089C1.01635 5.02154 0.995677 5.04692 0.980499 5.07556C0.965321 5.10421 0.955936 5.13557 0.952881 5.16784C0.949825 5.20011 0.953159 5.23267 0.962691 5.26366C0.972224 5.29464 0.987768 5.32345 1.00844 5.34842L1.53282 5.98591C1.55343 6.01097 1.57878 6.03172 1.60743 6.04698C1.63607 6.06223 1.66744 6.07168 1.69974 6.07479C1.73204 6.07791 1.76463 6.07462 1.79566 6.06512C1.82669 6.05562 1.85554 6.04009 1.88056 6.01943L6.71764 2.03535C6.7622 1.99943 6.81771 1.97984 6.87495 1.97984C6.93219 1.97984 6.9877 1.99943 7.03227 2.03535L11.8696 6.01943C11.8945 6.0401 11.9233 6.05564 11.9543 6.06517C11.9853 6.07471 12.0179 6.07804 12.0501 6.07498C12.0824 6.07193 12.1138 6.06254 12.1424 6.04737C12.1711 6.03219 12.1964 6.01151 12.2171 5.98653L12.7415 5.34904C12.7621 5.32392 12.7776 5.29497 12.787 5.26385C12.7964 5.23273 12.7996 5.20005 12.7964 5.1677C12.7931 5.13534 12.7835 5.10395 12.7681 5.07533C12.7527 5.0467 12.7317 5.0214 12.7065 5.00089Z" fill="white"/>
</svg>

================
File: src/assets/images/ic_category_.svg
================
<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path d="m260-520 220-360 220 360H260ZM700-80q-75 0-127.5-52.5T520-260q0-75 52.5-127.5T700-440q75 0 127.5 52.5T880-260q0 75-52.5 127.5T700-80Zm-580-20v-320h320v320H120Zm580-60q42 0 71-29t29-71q0-42-29-71t-71-29q-42 0-71 29t-29 71q0 42 29 71t71 29Zm-500-20h160v-160H200v160Zm202-420h156l-78-126-78 126Zm78 0ZM360-340Zm340 80Z"/></svg>

================
File: src/assets/images/ic_noData.svg
================
<svg width="120" height="120" viewBox="0 0 120 120" fill="none" xmlns="http://www.w3.org/2000/svg">
<g opacity="0.48">
<path opacity="0.48" fill-rule="evenodd" clip-rule="evenodd" d="M21.1902 86.0659L22.6459 87.5217L24.1062 86.0619L24.7302 86.6858L23.2696 88.1453L24.7262 89.601L24.1005 90.2266L22.6438 88.771L21.1845 90.2306L20.5605 89.6067L22.0201 88.1474L20.5645 86.6915L21.1902 86.0659Z" fill="#919EAB"/>
<path opacity="0.48" fill-rule="evenodd" clip-rule="evenodd" d="M87.2381 12.7675L88.6937 14.2233L90.1541 12.7635L90.7781 13.3873L89.3175 14.8469L90.7741 16.3025L90.1483 16.9281L88.6916 15.4725L87.2323 16.9321L86.6083 16.3083L88.0679 14.849L86.6124 13.393L87.2381 12.7675Z" fill="#919EAB"/>
<path opacity="0.72" d="M61.4784 104.835C61.7522 104.562 62.1233 104.409 62.5101 104.409C62.897 104.409 63.268 104.562 63.5419 104.835L64.5809 105.874C64.717 106.009 64.8258 106.171 64.8995 106.348C64.9734 106.526 65.0115 106.716 65.0115 106.909C65.0115 107.101 64.9734 107.291 64.8995 107.469C64.8258 107.646 64.7178 107.807 64.5817 107.942L63.5419 108.982C63.268 109.255 62.897 109.409 62.5101 109.409C62.1233 109.409 61.7522 109.255 61.4784 108.982L60.4393 107.943C60.3032 107.808 60.1945 107.646 60.1207 107.469C60.0468 107.291 60.0088 107.101 60.0088 106.909C60.0088 106.716 60.0468 106.526 60.1207 106.348C60.1944 106.171 60.3024 106.01 60.4385 105.875L61.4784 104.835Z" fill="#919EAB"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M96.6978 39.0406C96.6977 39.0406 96.6979 39.0405 96.6978 39.0406L95.6585 40.0796L95.2196 39.6406L95.6571 40.081C95.6368 40.1011 95.6207 40.1251 95.6097 40.1516C95.5987 40.178 95.593 40.2063 95.593 40.235C95.593 40.2636 95.5987 40.292 95.6097 40.3184C95.6207 40.3448 95.6368 40.3688 95.6571 40.389L95.6585 40.3904L96.6978 41.4294C96.6977 41.4293 96.6979 41.4295 96.6978 41.4294C96.739 41.4704 96.7948 41.4935 96.8529 41.4935C96.911 41.4935 96.9667 41.4705 97.0078 41.4296C97.0077 41.4297 97.0079 41.4296 97.0078 41.4296L98.0487 40.389C98.069 40.3688 98.0851 40.3448 98.0961 40.3184C98.1072 40.2919 98.1128 40.2635 98.1128 40.235C98.1128 40.2064 98.1072 40.1781 98.0961 40.1516C98.0851 40.1251 98.069 40.1011 98.0487 40.081L98.0473 40.0796L97.008 39.0406C97.008 39.0405 97.0081 39.0406 97.008 39.0406C96.9669 38.9997 96.911 38.9764 96.8529 38.9764C96.7948 38.9764 96.739 38.9996 96.6978 39.0406ZM94.7813 39.2011L95.8211 38.1616C96.095 37.8884 96.466 37.735 96.8529 37.735C97.2397 37.735 97.6108 37.8884 97.8847 38.1616L97.8852 38.1621L98.9237 39.2003C98.924 39.2005 98.9242 39.2008 98.9244 39.201C99.0606 39.3365 99.1686 39.4974 99.2423 39.6747C99.3162 39.8521 99.3543 40.0426 99.3543 40.235C99.3543 40.4274 99.3162 40.6178 99.2423 40.7953C99.1686 40.9725 99.0606 41.1335 98.9245 41.2689C98.9242 41.2692 98.924 41.2694 98.9237 41.2697L97.8847 42.3084C97.6108 42.5816 97.2397 42.735 96.8529 42.735C96.466 42.735 96.095 42.5816 95.8211 42.3084L94.7821 41.2697C94.7818 41.2694 94.7816 41.2691 94.7813 41.2689C94.6452 41.1334 94.5372 40.9725 94.4635 40.7953C94.3896 40.6177 94.3516 40.4273 94.3516 40.235C94.3516 40.0427 94.3896 39.8522 94.4635 39.6747C94.5372 39.4974 94.6452 39.3365 94.7813 39.2011Z" fill="#919EAB"/>
<path opacity="0.48" fill-rule="evenodd" clip-rule="evenodd" d="M104.552 66.3173C104.701 66.2788 104.858 66.2779 105.008 66.3152C105.173 66.356 105.322 66.4408 105.442 66.5601C105.561 66.6796 105.646 66.8294 105.687 66.9934C105.724 67.1436 105.723 67.3004 105.685 67.4496L105.109 70.541C105.062 70.7838 104.909 71.1333 104.522 71.2523C104.135 71.3713 103.812 71.1677 103.638 70.9932L101.009 68.3652C100.831 68.1887 100.628 67.865 100.748 67.4773C100.868 67.0898 101.219 66.9374 101.464 66.8921C101.465 66.8921 101.465 66.892 101.465 66.892L104.552 66.3173ZM104.448 67.5539L102.291 67.9553L104.046 69.7099L104.448 67.5539Z" fill="#919EAB"/>
<path opacity="0.8" fill-rule="evenodd" clip-rule="evenodd" d="M102.46 94.2659C102.609 94.2274 102.766 94.2265 102.916 94.2638C103.08 94.3046 103.23 94.3894 103.349 94.5087C103.469 94.6282 103.554 94.778 103.594 94.942C103.632 95.0922 103.631 95.249 103.592 95.3982L103.016 98.4896C102.97 98.7324 102.817 99.0819 102.43 99.2009C102.042 99.3199 101.72 99.1163 101.545 98.9418L98.9167 96.3138C98.7386 96.1373 98.5356 95.8136 98.6558 95.4259C98.776 95.0384 99.1263 94.886 99.3721 94.8407C99.3724 94.8407 99.3727 94.8406 99.373 94.8406L102.46 94.2659ZM102.356 95.5025L100.199 95.9039L101.954 97.6585L102.356 95.5025Z" fill="#637381"/>
<path opacity="0.8" fill-rule="evenodd" clip-rule="evenodd" d="M12.5004 72.4729C12.3186 72.4729 12.1408 72.5268 11.9896 72.6278C11.8383 72.7289 11.7205 72.8724 11.651 73.0402C11.5814 73.2081 11.5632 73.3929 11.5987 73.5711C11.6341 73.7494 11.7217 73.9131 11.8502 74.0416C11.9787 74.1701 12.1425 74.2576 12.321 74.2931C12.4996 74.3286 12.6845 74.3104 12.8523 74.2409C13.0203 74.1714 13.1639 74.0535 13.265 73.9023C13.366 73.7512 13.4199 73.5736 13.4199 73.3918C13.4199 73.1482 13.323 72.9144 13.1506 72.7421C12.9783 72.5697 12.7444 72.4729 12.5004 72.4729ZM11.1113 71.3132C11.5225 71.0385 12.0059 70.8918 12.5004 70.8918C13.1635 70.8918 13.7995 71.1551 14.2684 71.624C14.7374 72.0928 15.0009 72.7288 15.0009 73.3918C15.0009 73.8864 14.8542 74.3697 14.5794 74.7808C14.3047 75.1919 13.9142 75.5124 13.4572 75.7017C13.0002 75.8909 12.4975 75.9402 12.0127 75.8438C11.5278 75.7474 11.0822 75.5094 10.7324 75.1597C10.3827 74.8101 10.1446 74.3647 10.0481 73.8797C9.95156 73.3947 10.0011 72.8919 10.1904 72.435C10.3797 71.9781 10.7002 71.5878 11.1113 71.3132Z" fill="#637381"/>
<path opacity="0.8" fill-rule="evenodd" clip-rule="evenodd" d="M54.5424 18.4017C54.3606 18.4017 54.1828 18.4556 54.0316 18.5567C53.8803 18.6577 53.7625 18.8012 53.693 18.969C53.6234 19.1369 53.6052 19.3217 53.6407 19.5C53.6761 19.6782 53.7637 19.8419 53.8922 19.9705C54.0207 20.0989 54.1845 20.1865 54.363 20.222C54.5416 20.2575 54.7265 20.2393 54.8943 20.1698C55.0623 20.1002 55.2059 19.9824 55.307 19.8312C55.408 19.68 55.4619 19.5024 55.4619 19.3207C55.4619 19.077 55.365 18.8432 55.1926 18.6709C55.0203 18.4986 54.7864 18.4017 54.5424 18.4017ZM53.1533 17.242C53.5645 16.9674 54.0479 16.8207 54.5424 16.8207C55.2055 16.8207 55.8415 17.084 56.3104 17.5528C56.7794 18.0216 57.0429 18.6576 57.0429 19.3207C57.0429 19.8152 56.8962 20.2986 56.6214 20.7097C56.3467 21.1207 55.9562 21.4413 55.4992 21.6305C55.0422 21.8198 54.5395 21.869 54.0547 21.7726C53.5698 21.6762 53.1242 21.4383 52.7744 21.0886C52.4247 20.7389 52.1865 20.2935 52.09 19.8085C51.9936 19.3235 52.0431 18.8207 52.2324 18.3639C52.4217 17.9069 52.7422 17.5166 53.1533 17.242Z" fill="#637381"/>
</g>
<g opacity="0.48">
<g filter="url(#filter0_di_2575_2852044)">
<path d="M27.9998 49.238H91.9996V78.1903C91.9996 82.3982 88.5884 85.8094 84.3806 85.8094H35.6188C31.4109 85.8094 27.9998 82.3982 27.9998 78.1903V49.238Z" fill="#DFE3E8"/>
</g>
<path fill-rule="evenodd" clip-rule="evenodd" d="M37.9044 39.3334C36.6242 39.3334 35.6187 40.3389 35.6187 41.6191C35.6187 42.8989 36.6242 43.9048 37.9044 43.9048C39.1845 43.9048 40.1901 42.8989 40.1901 41.6191C40.1901 40.3389 39.1845 39.3334 37.9044 39.3334Z" fill="#C4CDD5"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M45.1424 39.3334C43.8623 39.3334 42.8567 40.3389 42.8567 41.6191C42.8567 42.8989 43.8623 43.9048 45.1424 43.9048C46.4226 43.9048 47.4281 42.8989 47.4281 41.6191C47.4281 40.3389 46.4226 39.3334 45.1424 39.3334Z" fill="#C4CDD5"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M52.3805 39.3334C51.1004 39.3334 50.0948 40.3389 50.0948 41.6191C50.0948 42.8989 51.1004 43.9048 52.3805 43.9048C53.6607 43.9048 54.6662 42.8989 54.6662 41.6191C54.6662 40.3389 53.6607 39.3334 52.3805 39.3334Z" fill="#C4CDD5"/>
<g filter="url(#filter1_di_2575_2852044)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M91.9996 40.0954V49.2381H27.9998L27.9998 40.0959C27.9998 36.7294 30.7289 34 34.0955 34H85.9044C89.2707 34 91.9996 36.7291 91.9996 40.0954ZM37.9045 39.3333C36.6243 39.3333 35.6188 40.3389 35.6188 41.619C35.6188 42.8989 36.6243 43.9047 37.9045 43.9047C39.1846 43.9047 40.1902 42.8989 40.1902 41.619C40.1902 40.3389 39.1846 39.3333 37.9045 39.3333ZM45.1426 39.3333C43.8624 39.3333 42.8569 40.3389 42.8569 41.619C42.8569 42.8989 43.8624 43.9047 45.1426 43.9047C46.4227 43.9047 47.4283 42.8989 47.4283 41.619C47.4283 40.3389 46.4227 39.3333 45.1426 39.3333ZM50.0949 41.619C50.0949 40.3389 51.1005 39.3333 52.3806 39.3333C53.6608 39.3333 54.6664 40.3389 54.6664 41.619C54.6664 42.8989 53.6608 43.9047 52.3806 43.9047C51.1005 43.9047 50.0949 42.8989 50.0949 41.619Z" fill="#919EAB"/>
</g>
<path opacity="0.48" fill-rule="evenodd" clip-rule="evenodd" d="M82.3255 54.0601H63.7209C62.6926 54.0601 61.8605 54.8908 61.8605 55.9175V78.2063C61.8605 79.2329 62.6926 80.0637 63.7209 80.0637H82.3255C83.3539 80.0637 84.186 79.2329 84.186 78.2063V55.9175C84.186 54.8908 83.3539 54.0601 82.3255 54.0601Z" fill="#637381"/>
<path opacity="0.24" fill-rule="evenodd" clip-rule="evenodd" d="M37.6744 57.7749H45.1163C46.1446 57.7749 46.9767 56.9441 46.9767 55.9175C46.9767 54.8908 46.1446 54.0601 45.1163 54.0601H37.6744C36.6461 54.0601 35.814 54.8908 35.814 55.9175C35.814 56.9441 36.6461 57.7749 37.6744 57.7749ZM35.814 63.3471C35.814 62.3204 36.6461 61.4897 37.6744 61.4897H56.279C57.3074 61.4897 58.1395 62.3204 58.1395 63.3471C58.1395 64.3737 57.3074 65.2045 56.279 65.2045H37.6744C36.6461 65.2045 35.814 64.3737 35.814 63.3471ZM37.6744 68.9193C36.6461 68.9193 35.814 69.75 35.814 70.7767C35.814 71.8033 36.6461 72.6341 37.6744 72.6341H56.279C57.3074 72.6341 58.1395 71.8033 58.1395 70.7767C58.1395 69.75 57.3074 68.9193 56.279 68.9193H37.6744ZM35.814 78.2063C35.814 77.1796 36.6461 76.3489 37.6744 76.3489H56.279C57.3074 76.3489 58.1395 77.1796 58.1395 78.2063C58.1395 79.2329 57.3074 80.0637 56.279 80.0637H37.6744C36.6461 80.0637 35.814 79.2329 35.814 78.2063Z" fill="#637381"/>
</g>
<defs>
<filter id="filter0_di_2575_2852044" x="19.9998" y="41.238" width="95.9999" height="68.5713" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dx="8" dy="8"/>
<feGaussianBlur stdDeviation="8"/>
<feColorMatrix type="matrix" values="0 0 0 0 0.270588 0 0 0 0 0.309804 0 0 0 0 0.356863 0 0 0 0.16 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_2575_2852044"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_2575_2852044" result="shape"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dx="-2" dy="-2"/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"/>
<feColorMatrix type="matrix" values="0 0 0 0 0.270588 0 0 0 0 0.309804 0 0 0 0 0.356863 0 0 0 0.48 0"/>
<feBlend mode="normal" in2="shape" result="effect2_innerShadow_2575_2852044"/>
</filter>
<filter id="filter1_di_2575_2852044" x="19.9998" y="26" width="95.9999" height="47.238" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dx="8" dy="8"/>
<feGaussianBlur stdDeviation="8"/>
<feColorMatrix type="matrix" values="0 0 0 0 0.270588 0 0 0 0 0.309804 0 0 0 0 0.356863 0 0 0 0.16 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_2575_2852044"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_2575_2852044" result="shape"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dx="-2"/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"/>
<feColorMatrix type="matrix" values="0 0 0 0 0.270588 0 0 0 0 0.309804 0 0 0 0 0.356863 0 0 0 0.48 0"/>
<feBlend mode="normal" in2="shape" result="effect2_innerShadow_2575_2852044"/>
</filter>
</defs>
</svg>

================
File: src/assets/images/ic_user.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path opacity="0.32" d="M2.28099 19.6575C2.36966 20.5161 2.93261 21.1957 3.77688 21.3755C5.1095 21.6592 7.6216 22 12 22C16.3784 22 18.8905 21.6592 20.2232 21.3755C21.0674 21.1957 21.6303 20.5161 21.719 19.6575C21.8505 18.3844 22 16.0469 22 12C22 7.95305 21.8505 5.6156 21.719 4.34251C21.6303 3.48389 21.0674 2.80424 20.2231 2.62451C18.8905 2.34081 16.3784 2 12 2C7.6216 2 5.1095 2.34081 3.77688 2.62451C2.93261 2.80424 2.36966 3.48389 2.28099 4.34251C2.14952 5.6156 2 7.95305 2 12C2 16.0469 2.14952 18.3844 2.28099 19.6575Z" fill="rgb(99, 115, 129)"/>
<path d="M13.9382 13.8559C15.263 13.1583 16.1663 11.7679 16.1663 10.1666C16.1663 7.8655 14.3008 6 11.9996 6C9.69841 6 7.83291 7.8655 7.83291 10.1666C7.83291 11.768 8.73626 13.1584 10.0612 13.856C8.28691 14.532 6.93216 16.1092 6.51251 18.0529C6.45446 18.3219 6.60246 18.5981 6.87341 18.6471C7.84581 18.8231 9.45616 19 12.0006 19C14.545 19 16.1554 18.8231 17.1278 18.6471C17.3977 18.5983 17.5454 18.3231 17.4876 18.0551C17.0685 16.1103 15.7133 14.5321 13.9382 13.8559Z" fill="rgb(99, 115, 129)"/>
</svg>

================
File: src/assets/images/icCourse.svg
================
<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24px" viewBox="0 0 24 24" width="24px" fill="rgb(99, 115, 129)"><g><path d="M21,3H3C1.9,3,1,3.9,1,5v3h2V5h18v14h-7v2h7c1.1,0,2-0.9,2-2V5C23,3.9,22.1,3,21,3z M1,18v3h3C4,19.34,2.66,18,1,18z M1,14 v2c2.76,0,5,2.24,5,5h2C8,17.13,4.87,14,1,14z M1,10v2c4.97,0,9,4.03,9,9h2C12,14.92,7.07,10,1,10z M11,11.09v2L14.5,15l3.5-1.91 v-2L14.5,13L11,11.09z M14.5,6L9,9l5.5,3L20,9L14.5,6z"/><path d="M0,0h24v24H0V0z" fill="none"/></g></svg>

================
File: src/assets/images/menu.svg
================
<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z" fill="#ffffff" class="fill-000000"></path></svg>

================
File: src/assets/images/plane.svg
================
<svg width="13" height="12" viewBox="0 0 13 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M11.5243 0.0993558L1.22926 6.0369C0.827235 6.26783 0.878322 6.82739 1.27813 6.99614L3.63922 7.98647L10.0206 2.36424C10.1428 2.25543 10.316 2.42197 10.2116 2.54854L4.86086 9.06562V10.8531C4.86086 11.3771 5.49389 11.5836 5.80485 11.2039L7.21528 9.48751L9.98284 10.6466C10.2982 10.7798 10.6581 10.5822 10.7158 10.2425L12.3151 0.650033C12.3906 0.201498 11.9086 -0.122691 11.5243 0.0993558Z" fill="white" fill-opacity="0.4"/>
</svg>

================
File: src/assets/images/PlayCircle.svg
================
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<g id="PlayCircle">
<path id="Vector" d="M10 17.5C14.1421 17.5 17.5 14.1421 17.5 10C17.5 5.85786 14.1421 2.5 10 2.5C5.85786 2.5 2.5 5.85786 2.5 10C2.5 14.1421 5.85786 17.5 10 17.5Z" stroke="#564FFD" stroke-width="1.3" stroke-miterlimit="10"/>
<path id="Vector_2" d="M12.5 10L8.75 7.5V12.5L12.5 10Z" stroke="#564FFD" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
</g>
</svg>

================
File: src/assets/images/plus.svg
================
<svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.11462 6.648H2.32425M6.11462 10.4384V6.648V10.4384ZM6.11462 6.648V2.85764V6.648ZM6.11462 6.648H9.90498H6.11462Z" stroke="white" stroke-opacity="0.67" stroke-width="0.947592" stroke-linecap="round"/>
</svg>

================
File: src/assets/images/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/assets/images/report.svg
================
<svg width="13" height="13" viewBox="0 0 13 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M11.9822 8.99957H2.78764V2.99815C2.78764 2.82364 2.63525 2.68229 2.4471 2.68229H1.76602C1.57787 2.68229 1.42548 2.82364 1.42548 2.99815V9.6313C1.42548 9.98013 1.73047 10.263 2.10656 10.263H11.9822C12.1704 10.263 12.3228 10.1217 12.3228 9.94716V9.31543C12.3228 9.14092 12.1704 8.99957 11.9822 8.99957ZM11.3012 3.31402H8.78839C8.33335 3.31402 8.1054 3.82433 8.42721 4.12283L9.1168 4.76245L7.55521 6.21108L5.99362 4.76265C5.72757 4.51588 5.29636 4.51588 5.03053 4.76265L3.56854 6.11869C3.43552 6.24208 3.43552 6.44206 3.56854 6.56544L4.04998 7.01199C4.18301 7.13538 4.39861 7.13538 4.53163 7.01199L5.51197 6.1025L7.07356 7.55094C7.33961 7.79771 7.77082 7.79771 8.03665 7.55094L10.0799 5.65575L10.7695 6.29538C11.0913 6.59387 11.6415 6.38244 11.6415 5.96036V3.62988C11.6417 3.45537 11.4893 3.31402 11.3012 3.31402Z" fill="white" fill-opacity="0.4"/>
</svg>

================
File: src/assets/images/restore.svg
================
<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path d="M480-120q-138 0-240.5-91.5T122-440h82q14 104 92.5 172T480-200q117 0 198.5-81.5T760-480q0-117-81.5-198.5T480-760q-69 0-129 32t-101 88h110v80H120v-240h80v94q51-64 124.5-99T480-840q75 0 140.5 28.5t114 77q48.5 48.5 77 114T840-480q0 75-28.5 140.5t-77 114q-48.5 48.5-114 77T480-120Zm112-192L440-464v-216h80v184l128 128-56 56Z"/></svg>

================
File: src/assets/images/search.svg
================
<svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M11.5748 9.8894L9.36038 7.67498C9.26043 7.57503 9.12494 7.5195 8.98279 7.5195H8.62076C9.23378 6.73546 9.59803 5.7493 9.59803 4.67652C9.59803 2.1245 7.53021 0.0566711 4.97819 0.0566711C2.42616 0.0566711 0.358337 2.1245 0.358337 4.67652C0.358337 7.22854 2.42616 9.29637 4.97819 9.29637C6.05097 9.29637 7.03713 8.93211 7.82117 8.31909V8.68113C7.82117 8.82328 7.8767 8.95876 7.97665 9.05871L10.1911 11.2731C10.3998 11.4819 10.7374 11.4819 10.944 11.2731L11.5726 10.6446C11.7814 10.4358 11.7814 10.0982 11.5748 9.8894ZM4.97819 7.5195C3.40788 7.5195 2.1352 6.24905 2.1352 4.67652C2.1352 3.10622 3.40566 1.83354 4.97819 1.83354C6.54849 1.83354 7.82117 3.10399 7.82117 4.67652C7.82117 6.24682 6.55071 7.5195 4.97819 7.5195Z" fill="#8A8587"/>
</svg>

================
File: src/assets/images/thongKe.svg
================
<svg class="MuiBox-root css-uwwqev" viewBox="0 0 480 360" xmlns="http://www.w3.org/2000/svg"><defs><linearGradient id="BG" x1="19.496%" x2="77.479%" y1="71.822%" y2="16.69%"><stop offset="0%" stop-color="#00A76F"></stop><stop offset="100%" stop-color="#00A76F" stop-opacity="0"></stop></linearGradient></defs><path fill="url(#BG)" fill-rule="nonzero" d="M0 198.78c0 41.458 14.945 79.236 39.539 107.786 28.214 32.765 69.128 53.365 114.734 53.434a148.44 148.44 0 0056.495-11.036c9.051-3.699 19.182-3.274 27.948 1.107a75.779 75.779 0 0033.957 8.01c5.023 0 9.942-.494 14.7-1.433 13.58-2.67 25.94-8.99 36.09-17.94 6.378-5.627 14.547-8.456 22.897-8.446h.142c27.589 0 53.215-8.732 74.492-23.696 19.021-13.36 34.554-31.696 44.904-53.224C474.92 234.58 480 213.388 480 190.958c0-76.93-59.774-139.305-133.498-139.305-7.516 0-14.88.663-22.063 1.899C305.418 21.42 271.355 0 232.499 0a103.651 103.651 0 00-45.88 10.661c-13.24 6.487-25.011 15.705-34.64 26.939-32.698.544-62.931 11.69-87.676 30.291C25.351 97.155 0 144.882 0 198.781z" opacity="0.2"></path><path fill="#007867" fill-rule="evenodd" d="M109.224 97.41l.812 1.827-.02.009-.061.027-.248.112c-.219.1-.544.25-.968.449l-.849-1.811c.43-.202.762-.355.988-.457l.256-.117.066-.03.024-.01zm-6.771 3.278c.997-.507 1.901-.958 2.7-1.35l.882 1.795c-.791.388-1.687.835-2.675 1.337l-.907-1.782zm-5.356 2.808c.93-.502 1.82-.975 2.665-1.418l.929 1.771c-.838.439-1.72.909-2.644 1.407l-.95-1.76zm-5.274 2.927c.901-.513 1.779-1.007 2.63-1.479l.97 1.749c-.844.468-1.715.958-2.609 1.468l-.99-1.738zm-5.232 3.065c.887-.533 1.758-1.05 2.612-1.55l1.01 1.725c-.847.497-1.712 1.01-2.591 1.539l-1.03-1.714zm-5.117 3.16c.861-.546 1.713-1.079 2.555-1.599l1.05 1.702c-.834.516-1.68 1.044-2.534 1.586l-1.071-1.689zm-5.065 3.301a242.86 242.86 0 012.515-1.661l1.092 1.675a236.91 236.91 0 00-2.494 1.648l-1.113-1.662zm-4.978 3.431c.83-.589 1.66-1.168 2.484-1.736l1.134 1.646c-.817.564-1.638 1.137-2.461 1.721l-1.157-1.631zm-4.873 3.56a197.5 197.5 0 012.427-1.8l1.18 1.615c-.8.585-1.602 1.179-2.404 1.782l-1.203-1.597zm-4.771 3.71c.787-.632 1.576-1.256 2.366-1.87l1.228 1.579c-.782.608-1.563 1.225-2.342 1.85l-1.252-1.559zm-4.651 3.867c.765-.659 1.534-1.31 2.307-1.952l1.279 1.538c-.764.635-1.525 1.278-2.281 1.929l-1.305-1.515zm-4.51 4.035c.739-.688 1.485-1.368 2.236-2.04l1.333 1.491c-.742.664-1.478 1.335-2.208 2.013l-1.362-1.464zm-4.347 4.215a136.43 136.43 0 012.151-2.132l1.392 1.437c-.715.692-1.422 1.392-2.12 2.1l-1.423-1.405zm-4.157 4.411c.674-.751 1.359-1.495 2.053-2.231l1.455 1.371c-.683.725-1.356 1.457-2.019 2.196l-1.489-1.336zm-3.929 4.623c.633-.788 1.279-1.568 1.936-2.341l1.524 1.295a105.43 105.43 0 00-1.9 2.298l-1.56-1.252zm-3.657 4.848a94.278 94.278 0 011.793-2.455l1.596 1.205c-.6.794-1.185 1.595-1.754 2.403l-1.635-1.153zm-3.328 5.084a83.294 83.294 0 011.617-2.57l1.673 1.097a80.437 80.437 0 00-1.578 2.507l-1.712-1.034zm-2.94 5.341c.45-.907.922-1.806 1.414-2.698l1.752.965a69.62 69.62 0 00-1.375 2.623l-1.791-.89zm-2.465 5.583c.366-.948.755-1.889 1.168-2.823l1.83.808c-.4.906-.778 1.817-1.132 2.735l-1.866-.72zm-1.903 5.808c.265-.984.558-1.962.876-2.932l1.9.624a54.83 54.83 0 00-.845 2.828l-1.93-.52zm-1.253 5.993c.15-1.012.331-2.018.54-3.017l1.958.41a50.126 50.126 0 00-.52 2.901l-1.978-.294zm-.467 4.577c.028-.513.065-1.024.109-1.535l1.992.174c-.042.489-.077.98-.104 1.472-.028.496-.04.986-.037 1.469l-2 .014c-.003-.526.01-1.057.04-1.594zm.822 7.749a22.495 22.495 0 01-.643-3.074l1.982-.272c.131.959.328 1.892.585 2.801l-1.924.545zm2.498 5.699a23.889 23.889 0 01-1.444-2.77l1.83-.805c.382.867.824 1.713 1.324 2.538l-1.71 1.037zm3.777 4.87a30.2 30.2 0 01-2.019-2.327l1.578-1.23a28.113 28.113 0 001.885 2.173l-1.444 1.384zm4.602 4.048a41.441 41.441 0 01-2.349-1.902l1.316-1.506c.706.617 1.452 1.22 2.235 1.809l-1.202 1.599zm5.09 3.361a56.872 56.872 0 01-2.58-1.598l1.1-1.671a54.91 54.91 0 002.488 1.542l-1.008 1.727zm5.371 2.823a75.691 75.691 0 01-2.716-1.355l.929-1.771c.857.449 1.74.889 2.645 1.319l-.858 1.807zm5.542 2.408c-.95-.379-1.882-.766-2.794-1.162l.795-1.834c.894.387 1.807.767 2.74 1.138l-.741 1.858zm294.857-2.594c.244.101.598.253 1.048.457l-.828 1.821a31.67 31.67 0 00-1.241-.534l-.061-.025-.014-.005-.003-.001.357-.934.356-.934h.001l.002.001.006.002.021.008.075.03c.065.025.159.063.281.114zm-289.206 4.68c-.96-.329-1.906-.664-2.837-1.007l.692-1.877c.915.337 1.846.668 2.793.992l-.648 1.892zm293.015-2.865c.807.425 1.708.923 2.682 1.497l-1.016 1.723a62.506 62.506 0 00-2.598-1.45l.932-1.77zm-287.286 4.698c-.965-.289-1.918-.583-2.859-.884l.609-1.905c.928.296 1.87.587 2.824.873l-.574 1.916zm292.565-1.59a69.641 69.641 0 012.522 1.724l-1.165 1.626a66.44 66.44 0 00-2.449-1.674l1.092-1.676zM69.05 221.541c-.967-.256-1.924-.517-2.87-.783l.54-1.926c.938.264 1.885.522 2.842.776l-.512 1.933zm5.833 1.464c-.977-.233-1.945-.469-2.905-.709l.486-1.94c.952.238 1.912.472 2.881.703l-.462 1.946zm5.867 1.326c-.988-.213-1.97-.429-2.944-.649l.44-1.951c.968.219 1.943.434 2.925.645l-.42 1.955zm280.057-2.439a67.422 67.422 0 012.356 1.94l-1.306 1.515a65.709 65.709 0 00-2.286-1.883l1.236-1.572zM86.623 225.54a333.57 333.57 0 01-2.954-.595l.403-1.959c.973.201 1.952.398 2.937.591l-.386 1.963zm5.88 1.112c-.985-.179-1.967-.361-2.944-.546l.371-1.965c.973.184 1.95.365 2.931.543l-.357 1.968zm5.904 1.035c-.983-.167-1.963-.335-2.94-.506l.345-1.97c.973.17 1.95.338 2.93.504l-.335 1.972zm267.031-1.801a64.195 64.195 0 012.181 2.162l-1.442 1.386a63.013 63.013 0 00-2.113-2.095l1.374-1.453zm-261.112 2.771c-.989-.157-1.976-.316-2.959-.477l.323-1.974c.981.161 1.964.319 2.95.476l-.314 1.975zm5.919.916c-.99-.149-1.978-.3-2.965-.453l.306-1.976c.984.152 1.969.302 2.957.451l-.298 1.978zm5.92.873c-.987-.143-1.975-.287-2.961-.432l.292-1.979c.984.145 1.969.289 2.955.431l-.286 1.98zm5.929.84a781.94 781.94 0 01-2.965-.417l.281-1.98 2.96.417-.276 1.98zm5.927.818c-.987-.135-1.976-.27-2.965-.407l.273-1.981c.988.136 1.976.272 2.962.406l-.27 1.982zm241.664-1.8a62.33 62.33 0 011.957 2.359l-1.571 1.238a58.92 58.92 0 00-1.893-2.282l1.507-1.315zm-235.74 2.603l-2.957-.4.269-1.982 2.956.4-.268 1.982zm5.935.801l-2.964-.4.267-1.982 2.965.4-.268 1.982zm5.928.805l-2.977-.406.269-1.982 2.98.407-.272 1.981zm5.915.821l-2.962-.414.275-1.981c.993.138 1.982.276 2.966.415l-.279 1.98zm5.896.848c-.971-.143-1.948-.285-2.93-.426l.284-1.98c.985.142 1.964.284 2.937.427l-.291 1.979zm5.922.895c-.972-.151-1.952-.302-2.94-.451l.299-1.977c.99.149 1.973.3 2.949.452l-.308 1.976zm209.938-1.957a59.573 59.573 0 011.709 2.551l-1.69 1.069a56.139 56.139 0 00-1.651-2.463l1.632-1.157zm-204.034 2.911c-.974-.163-1.958-.325-2.952-.486l.319-1.974c.998.161 1.986.324 2.965.488l-.332 1.972zm5.881 1.035a369.37 369.37 0 00-2.965-.534l.346-1.97c1.006.177 2 .356 2.982.537l-.363 1.967zm5.85 1.143c-.972-.201-1.959-.399-2.961-.595l.383-1.963c1.009.197 2.004.397 2.984.6l-.406 1.958zm5.81 1.291c-.958-.228-1.935-.453-2.932-.674l.433-1.953c1.006.223 1.995.451 2.964.682l-.465 1.945zm5.75 1.497a126.97 126.97 0 00-2.901-.788l.502-1.936c1.006.261 1.988.527 2.947.8l-.548 1.924zm184.026-2.689c.494.881.972 1.787 1.431 2.718l-1.794.884a54.93 54.93 0 00-1.381-2.623l1.744-.979zm-178.387 4.477a83.817 83.817 0 00-2.858-.956l.602-1.907c1.007.317 1.983.643 2.926.978l-.67 1.885zm5.402 2.214a50.388 50.388 0 00-2.665-1.174l.755-1.852a52.08 52.08 0 012.773 1.222l-.863 1.804zm175.7-1.183c.397.928.775 1.88 1.132 2.854l-1.878.687a55.769 55.769 0 00-1.093-2.754l1.839-.787zm-171.918 3.282a27.52 27.52 0 00-1.18-.728l1.008-1.727c.438.255.86.515 1.266.781.386.252.788.506 1.206.763l-1.045 1.705a54.43 54.43 0 01-1.255-.794zm6.674 3.795a88.769 88.769 0 01-2.71-1.43l.964-1.752c.839.462 1.723.928 2.65 1.398l-.904 1.784zm167.354-1.314c.295.964.57 1.949.822 2.955l-1.94.486a56.86 56.86 0 00-.794-2.854l1.912-.587zm-161.766 3.964c-.978-.436-1.926-.872-2.842-1.305l.856-1.808c.902.427 1.836.856 2.801 1.287l-.815 1.826zm5.624 2.389c-.977-.396-1.932-.792-2.864-1.188l.781-1.841c.922.391 1.867.783 2.834 1.175l-.751 1.854zm5.702 2.219c-.979-.366-1.942-.734-2.887-1.101l.726-1.864c.936.364 1.891.728 2.863 1.092l-.702 1.873zm151.931-2.627c.195.988.367 1.994.517 3.019l-1.979.289a60 60 0 00-.5-2.921l1.962-.387zm-146.173 4.709a282.93 282.93 0 01-2.913-1.035l.68-1.881c.95.343 1.915.686 2.893 1.028l-.66 1.888zm5.793 1.961c-.989-.325-1.966-.651-2.932-.977l.642-1.895c.959.325 1.931.649 2.913.971l-.623 1.901zm5.808 1.851a366.91 366.91 0 01-2.928-.92l.607-1.905c.961.306 1.932.611 2.912.915l-.591 1.91zm135.458-2.462c.049.509.093 1.023.131 1.542a15.1 15.1 0 01.032 1.682l-1.998-.075c.017-.471.008-.958-.029-1.461a59 59 0 00-.127-1.495l1.991-.193zm-129.616 4.222a452.59 452.59 0 01-2.926-.869l.577-1.915c.963.29 1.934.578 2.911.864l-.562 1.92zm5.875 1.674c-.982-.272-1.957-.546-2.927-.823l.548-1.923c.965.275 1.936.548 2.913.819l-.534 1.927zm5.902 1.593a521.99 521.99 0 01-2.943-.783l.521-1.931c.972.262 1.949.522 2.93.779l-.508 1.935zm117.481-1.038a12.02 12.02 0 01-1.365 2.996l-1.691-1.069a9.965 9.965 0 001.139-2.499l1.917.572zm-111.556 2.55c-.993-.246-1.982-.495-2.968-.747l.495-1.938c.981.251 1.966.499 2.955.744l-.482 1.941zm5.937 1.432c-.995-.233-1.987-.469-2.977-.708l.469-1.944c.985.238 1.973.472 2.964.704l-.456 1.948zm5.954 1.352a461.96 461.96 0 01-2.98-.667l.443-1.95c.987.224 1.976.445 2.967.663l-.43 1.954zm5.976 1.272a440.55 440.55 0 01-2.989-.626l.416-1.956c.992.211 1.984.419 2.976.623l-.403 1.959zm90.244-1.087a17.352 17.352 0 01-2.54 1.996l-1.091-1.676a15.272 15.272 0 002.247-1.764l1.384 1.444zm-84.25 2.277c-1-.191-2.001-.386-3.002-.585l.39-1.962c.996.198 1.992.392 2.987.582l-.375 1.965zm6.003 1.101c-.999-.175-1.999-.355-3.001-.539l.361-1.967c.997.183 1.993.362 2.987.537l-.347 1.969zm72.9.168c-.911.427-1.878.819-2.897 1.178l-.663-1.887a29.338 29.338 0 002.71-1.102l.85 1.811zm-66.872.844c-1-.16-2.003-.324-3.007-.493l.33-1.972c1 .168 1.997.331 2.992.49l-.315 1.975zm6.051.913a350.993 350.993 0 01-3.025-.444l.299-1.977c1.006.152 2.009.299 3.007.441l-.281 1.98zm54.962.332c-.979.263-1.996.501-3.05.716l-.4-1.96a50.079 50.079 0 002.932-.688l.518 1.932zm-48.896.472a292.674 292.674 0 01-3.049-.39l.263-1.982c1.015.135 2.025.264 3.03.387l-.244 1.985zm6.076.684a273.234 273.234 0 01-3.058-.328l.224-1.987c1.019.115 2.031.223 3.037.325l-.203 1.99zm36.729.101c-.989.152-2.005.287-3.047.406l-.226-1.988a74.52 74.52 0 002.968-.395l.305 1.977zm-30.642.446a247.153 247.153 0 01-3.048-.255l.18-1.992c1.015.091 2.023.176 3.023.253l-.155 1.994zm6.099.39a193.964 193.964 0 01-3.036-.173l.128-1.995c1.012.064 2.015.122 3.007.171l-.099 1.997zm18.393-.133c-.991.079-2.002.144-3.032.196l-.101-1.997a107.33 107.33 0 002.975-.193l.158 1.994zm-12.279.337a175.75 175.75 0 01-3.028-.075l.067-1.999c1.01.034 2.008.059 2.993.075l-.032 1.999zm6.131-.023c-.993.025-2.002.039-3.025.043l-.007-2c1.009-.004 2.003-.018 2.981-.043l.051 2z" clip-rule="evenodd" opacity="0.24"></path><path fill="#fff" d="M47.943 122.571L96.231 273.55a11.4 11.4 0 0011.786 7.805l63.326-5.36 148.013-12.644a11.316 11.316 0 009.904-7.823c.456-1.421.627-2.918.503-4.405a12.314 12.314 0 00-.729-3.122l-11.838-31.221-21.412-57.238-16.599-44.23a11.37 11.37 0 00-10.641-7.362H58.741a11.345 11.345 0 00-11.344 11.343c.016 1.114.2 2.219.546 3.278z"></path><path fill="#fff" d="M47.943 122.571L96.231 273.55a11.4 11.4 0 0011.786 7.805l63.326-5.36 148.013-12.644a11.316 11.316 0 009.904-7.823c.456-1.421.627-2.918.503-4.405a12.314 12.314 0 00-.729-3.122l-11.838-31.221-21.412-57.238-16.599-44.23a11.37 11.37 0 00-10.641-7.362H58.741a11.345 11.345 0 00-11.344 11.343c.016 1.114.2 2.219.546 3.278z"></path><path fill="url(#paint0_linear_1_51)" d="M170.575 276.06l-62.558 5.295a11.4 11.4 0 01-11.785-7.805L47.942 122.571a11.028 11.028 0 01-.546-3.278A11.34 11.34 0 0158.74 107.95h57.453l54.382 168.11z"></path><path fill="#F4F6F8" d="M227.879 191.221c2.613-.162 4.368-2.749 3.553-5.237l-8.483-25.895a4.002 4.002 0 00-3.993-2.75l-61.621 2.961c-2.666.128-4.461 2.782-3.588 5.304l9.248 26.717a3.999 3.999 0 004.028 2.683l60.856-3.783z"></path><path fill="#DFE3E8" d="M244.879 239.221c2.613-.162 4.368-2.749 3.553-5.237l-8.483-25.895a4.002 4.002 0 00-3.993-2.75l-61.621 2.961c-2.666.128-4.461 2.782-3.588 5.304l9.248 26.717a3.999 3.999 0 004.028 2.683l60.856-3.783z"></path><g filter="url(#filter0_f_1_51)" opacity="0.4"><path fill="#919EAB" d="M253.012 134.539l15.948 52.893a4.007 4.007 0 003.903 2.94l39.559-1.142a2 2 0 001.816-2.7l-20.001-53.4a2 2 0 00-1.755-1.295l-35.906-2.109a3.612 3.612 0 00-3.059 1.461 3.614 3.614 0 00-.505 3.352z"></path></g><path fill="#fff" d="M330.082 174.424l-16.495-46.701a4.03 4.03 0 00-3.512-2.732l-69.518-4.111a3.676 3.676 0 00-3.061 1.481 3.663 3.663 0 00-.53 3.358l15.949 52.92a4.057 4.057 0 003.902 2.966l70.091-2.108a3.663 3.663 0 002.898-1.716 3.667 3.667 0 00.276-3.357z"></path><path fill="#007867" d="M295.375 166.976c.478 1.237.718 1.856 1.229 2.206.511.351 1.174.351 2.501.351h.32c2.648 0 3.972 0 4.568-.87.596-.869.118-2.104-.837-4.574l-6.427-16.612c-.479-1.238-.719-1.856-1.23-2.207-.511-.35-1.174-.35-2.501-.35h-.32c-2.648 0-3.972 0-4.568.87-.596.869-.118 2.104.837 4.573l6.428 16.613z"></path><g opacity="0.48"><path fill="url(#paint1_linear_1_51)" d="M306.33 166.969c.478 1.241.717 1.861 1.228 2.212.512.351 1.176.351 2.505.351h.314c2.649 0 3.973 0 4.569-.869.596-.87.118-2.105-.839-4.574l-1.586-4.099c-.479-1.237-.718-1.855-1.229-2.205-.511-.351-1.175-.351-2.501-.351h-.305c-2.644 0-3.966 0-4.562.868-.596.868-.121 2.102.829 4.569l1.577 4.098z"></path><path fill="url(#paint2_linear_1_51)" d="M284.397 166.971c.478 1.24.717 1.86 1.228 2.211.512.351 1.176.351 2.505.351h.315c2.648 0 3.973 0 4.568-.87.596-.87.118-2.105-.838-4.575l-2.705-6.986c-.479-1.237-.718-1.855-1.229-2.205-.511-.35-1.175-.35-2.501-.35h-.303c-2.645 0-3.967 0-4.563.868-.596.868-.12 2.102.831 4.57l2.692 6.986z"></path><path fill="url(#paint3_linear_1_51)" d="M273.442 166.976c.479 1.237.718 1.856 1.229 2.206.511.351 1.175.351 2.502.351h.32c2.648 0 3.972 0 4.568-.87.596-.869.118-2.104-.838-4.574l-9.445-24.417c-.479-1.238-.718-1.856-1.229-2.207-.511-.35-1.175-.35-2.502-.35h-.32c-2.648 0-3.972 0-4.568.869-.596.87-.118 2.104.837 4.574l9.446 24.418z"></path><path fill="url(#paint4_linear_1_51)" d="M262.463 166.974c.479 1.239.718 1.858 1.229 2.208.511.351 1.175.351 2.502.351h.322c2.647 0 3.97 0 4.566-.869.596-.869.119-2.104-.835-4.573l-12.935-33.472c-.479-1.238-.718-1.857-1.229-2.207-.511-.351-1.175-.351-2.502-.351h-.322c-2.647 0-3.97 0-4.566.869-.596.869-.119 2.104.835 4.573l12.935 33.471z"></path></g><g fill="#fff" fill-rule="evenodd" clip-rule="evenodd" opacity="0.4"><path d="M78.02 155.171a15.22 15.22 0 11.312 1.015l-.156-.495-.157-.52zm15.194-4.189l-3.59-11.525a12.641 12.641 0 013.121-.547 12.102 12.102 0 0111.994 8.456c.312 1.014.496 2.062.546 3.122a13.006 13.006 0 01-.286 3.148 11.815 11.815 0 01-2.914 5.516 11.914 11.914 0 01-11.525 3.59 13.21 13.21 0 01-2.94-1.067 12.76 12.76 0 01-2.602-1.821 12.257 12.257 0 01-3.33-5.203l11.526-3.669zM111.296 251.773a15.298 15.298 0 0129.321-8.429v.494c0 .156 0 .338.182.494a15.272 15.272 0 01-28.619 10.407c-.078-.247-.149-.495-.221-.742a28.499 28.499 0 00-.221-.741 16.041 16.041 0 01-.171-.595 10.734 10.734 0 00-.271-.888zm11.187-14.7l3.746 11.474.079-.026 3.746 11.5a11.965 11.965 0 006.921-6.01 11.83 11.83 0 001.04-2.966c.23-1.024.317-2.075.26-3.122a12.07 12.07 0 00-9.548-11.188 12.42 12.42 0 00-6.244.338zM100.21 187.509a15.272 15.272 0 00-4.473 10.799v1.066a15.272 15.272 0 1030.544 0v-1.066a15.271 15.271 0 00-26.071-10.799zm10.591 11.293V186.73c2.112.016 4.183.581 6.01 1.639a11.366 11.366 0 012.602 1.925 12.027 12.027 0 01-.005 17.068 12.022 12.022 0 01-5.433 3.096 11.575 11.575 0 01-6.244 0 12.202 12.202 0 01-2.914-1.171l5.984-10.485z"></path></g><path fill="url(#paint5_linear_1_51)" d="M151.154 76h-41.55l12.645 7.727L151.154 76z"></path><path fill="url(#paint6_linear_1_51)" d="M151.154 76l-26.668 12.332 4.501 15.715L151.154 76z"></path><path fill="url(#paint7_linear_1_51)" d="M117.435 95.279l7.051-6.947L151.154 76 117.435 95.28z"></path><path fill="#007867" d="M117.435 95.279l7.051-6.947L151.154 76l-28.905 7.727-4.814 11.552z"></path><defs><filter id="filter0_f_1_51" width="101.56" height="100.65" x="232.807" y="109.722" color-interpolation-filters="sRGB" filterUnits="userSpaceOnUse"><feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood><feBlend in="SourceGraphic" in2="BackgroundImageFix" result="shape"></feBlend><feGaussianBlur result="effect1_foregroundBlur_1_51" stdDeviation="10"></feGaussianBlur></filter><linearGradient id="paint0_linear_1_51" x1="47.397" x2="47.397" y1="107.95" y2="281.395" gradientUnits="userSpaceOnUse"><stop stop-color="#5BE49B"></stop><stop offset="1" stop-color="#007867"></stop></linearGradient><linearGradient id="paint1_linear_1_51" x1="248.43" x2="248.43" y1="128.061" y2="169.533" gradientUnits="userSpaceOnUse"><stop stop-color="#5BE49B"></stop><stop offset="1" stop-color="#007867"></stop></linearGradient><linearGradient id="paint2_linear_1_51" x1="248.43" x2="248.43" y1="128.061" y2="169.533" gradientUnits="userSpaceOnUse"><stop stop-color="#5BE49B"></stop><stop offset="1" stop-color="#007867"></stop></linearGradient><linearGradient id="paint3_linear_1_51" x1="248.43" x2="248.43" y1="128.061" y2="169.533" gradientUnits="userSpaceOnUse"><stop stop-color="#5BE49B"></stop><stop offset="1" stop-color="#007867"></stop></linearGradient><linearGradient id="paint4_linear_1_51" x1="248.43" x2="248.43" y1="128.061" y2="169.533" gradientUnits="userSpaceOnUse"><stop stop-color="#5BE49B"></stop><stop offset="1" stop-color="#007867"></stop></linearGradient><linearGradient id="paint5_linear_1_51" x1="109.604" x2="109.604" y1="76" y2="104.047" gradientUnits="userSpaceOnUse"><stop stop-color="#5BE49B"></stop><stop offset="1" stop-color="#007867"></stop></linearGradient><linearGradient id="paint6_linear_1_51" x1="109.604" x2="109.604" y1="76" y2="104.047" gradientUnits="userSpaceOnUse"><stop stop-color="#5BE49B"></stop><stop offset="1" stop-color="#007867"></stop></linearGradient><linearGradient id="paint7_linear_1_51" x1="109.604" x2="109.604" y1="76" y2="104.047" gradientUnits="userSpaceOnUse"><stop stop-color="#5BE49B"></stop><stop offset="1" stop-color="#007867"></stop></linearGradient></defs><image href="/assets/illustrations/characters/character_3.png" height="300" x="312" y="30"></image></svg>

================
File: src/assets/images/user.svg
================
<svg width="13" height="12" viewBox="0 0 13 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.63739 5.75586C8.4319 5.75586 9.88628 4.48328 9.88628 2.91309C9.88628 1.3429 8.4319 0.0703125 6.63739 0.0703125C4.84289 0.0703125 3.38851 1.3429 3.38851 2.91309C3.38851 4.48328 4.84289 5.75586 6.63739 5.75586ZM8.91162 6.46656H8.48774C7.92426 6.69309 7.29732 6.82191 6.63739 6.82191C5.97746 6.82191 5.35307 6.69309 4.78705 6.46656H4.36317C2.47984 6.46656 0.951843 7.80355 0.951843 9.45147V10.3754C0.951843 10.9639 1.49755 11.4414 2.17018 11.4414H11.1046C11.7772 11.4414 12.3229 10.9639 12.3229 10.3754V9.45147C12.3229 7.80355 10.795 6.46656 8.91162 6.46656Z" fill="white" fill-opacity="0.4"/>
</svg>

================
File: src/assets/images/view.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="component-iconify MuiBox-root css-1t9pz9x iconify iconify--solar" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M9.75 12a2.25 2.25 0 1 1 4.5 0a2.25 2.25 0 0 1-4.5 0"></path><path fill="currentColor" fill-rule="evenodd" d="M2 12c0 1.64.425 2.191 1.275 3.296C4.972 17.5 7.818 20 12 20c4.182 0 7.028-2.5 8.725-4.704C21.575 14.192 22 13.639 22 12c0-1.64-.425-2.191-1.275-3.296C19.028 6.5 16.182 4 12 4C7.818 4 4.972 6.5 3.275 8.704C2.425 9.81 2 10.361 2 12m10-3.75a3.75 3.75 0 1 0 0 7.5a3.75 3.75 0 0 0 0-7.5" clip-rule="evenodd"></path></svg>

================
File: src/assets/images/vnpay-logo.html
================
<!DOCTYPE html>
<html lang="vi">
<head>
            <!-- DefaultMetaHeader -->
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="apple-mobile-web-app-status-bar-style" content="black"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>

        <meta property="og:locale" content="vi_VN"/>
        <meta property="og:type" content="website"/>
        <meta name="robots" content="index, follow">

        <link rel=preconnect href="https://connect.facebook.net/"/>
        <link rel=preconnect href="https://www.google-analytics.com/"/>

        <title>Tải mẫu VNPAY logo file vector AI, EPS, JPEG, PNG, SVG</title>
        <meta name="description" content="Download VNPAY logo vector ✓ VNPAY logo png ✓ Ý nghĩa logo VNPAY ✓ VNPAY QR logo ✓ VNPAY Scan ✓ Tải xuống miễn phí"/>
        <meta name="keywords" content="vnpay logo"/>

        <meta property="og:title" content="Tải mẫu VNPAY logo file vector AI, EPS, JPEG, PNG, SVG"/>
        <meta property="og:description"
              content="Download VNPAY logo vector ✓ VNPAY logo png ✓ Ý nghĩa logo VNPAY ✓ VNPAY QR logo ✓ VNPAY Scan ✓ Tải xuống miễn phí"/>

        <meta property="og:site_name" content="In Kỹ Thuật Số"/>
        <meta property="og:image"
              content="https://inkythuatso.com/uploads/images/2021/12/vnpay-logo-inkythuatso-01-13-16-26-42.jpg"/>

        <!-- Action InHead -->
                <!-- Action InHead -->
        
                    <meta property="fb:app_id" content="887444158033293"/>
        

                <link rel="canonical" href="https://inkythuatso.com/mau-thiet-ke-vector/vnpay-logo-2153.html">
        <meta property="og:url" content="https://inkythuatso.com/mau-thiet-ke-vector/vnpay-logo-2153.html"/>
    
                <link rel="amphtml" href="https://inkythuatso.com/mau-thiet-ke-vector/vnpay-logo-2153.html/amp"/>
    
                <link type="image/x-icon" rel="shortcut icon"
              href="https://cdn.inkythuatso.com/asset/admin/images/favicon.jpg"/>
        <link type="image/x-icon" rel="icon"
              href="https://cdn.inkythuatso.com/asset/admin/images/favicon.jpg"/>
    
                <!-- Google Tag Manager -->
        <script>(function (w, d, s, l, i) {
                w[l] = w[l] || [];
                w[l].push({
                    'gtm.start':
                        new Date().getTime(), event: 'gtm.js'
                });
                var f = d.getElementsByTagName(s)[0],
                    j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
                j.async = true;
                j.src =
                    'https://www.googletagmanager.com/gtm.js?id=' + i + dl;
                f.parentNode.insertBefore(j, f);
            })(window, document, 'script', 'dataLayer', 'GTM-5R3SDQZ');</script>
        <!-- End Google Tag Manager -->
    
        <meta name="google-site-verification" content="JVX_L9fx9K7VkLIbTH51lD3UqB6g0Ey5R3CM7c3WwMM" />
<meta name="google-site-verification" content="aRRh2h1oVYGO4sXef0LK5VkqoKDDbjlvkdRY-CyVNnA" />
<meta name="google-site-verification" content="VLlABUdFPU5ytQuV_UQ09OPQVyaI1KaQMWg7Lhj3ndc" />
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-QBZCPVSW95"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-QBZCPVSW95');
</script><link rel="preload" href="/assets/themes/covid-19-001/plugins/bootstrap/css/bootstrap.min.css?v=" as="style"><link media="all" rel="stylesheet" href="/assets/themes/covid-19-001/plugins/bootstrap/css/bootstrap.min.css?v="><style id="mainCss">.admin-mode{border:3px solid #00a4f1;position:relative;display:block}.admin-mode .edit-button{font-size:14px;background-color:#ffffff;padding:3px 12px;box-shadow:1px 1px 8px rgba(0,0,0,0.2);line-height:normal;color:#333333;border-radius:3px}.supper-banner{position:relative}.supper-banner .sBanner-admin-template{position:absolute;bottom:0;padding:5px 10px;width:100%}.supper-banner .sBanner-admin-template button.edit-button{background-color:#ffffff;border-radius:3px;padding:2px 10px;color:black}.templateAdminEdit,.templateUpload{text-align:left;position:absolute;width:600px;top:100%;background-color:#ffffff;padding:15px;border-radius:10px;box-shadow:0 0 25px rgba(0,0,0,0.2);left:0;right:auto;margin:auto;z-index:99999;border:3px solid #ff7600;max-width:90vw;color:#333}.templateAdminEdit.loading:before,.templateUpload.loading:before{background-color:rgba(255,255,255,0.7);position:absolute;z-index:9;top:0px;left:0;width:100%;height:100%;content:""}.templateAdminEdit.loading:after,.templateUpload.loading:after{position:absolute;z-index:9;top:0;left:0;content:"Vui lòng đợi...";height:34px;line-height:34px;background-color:#ffffff;margin:auto;bottom:0;right:0;width:200px;text-align:center;display:block;box-shadow:0 0 10px #989898bf;border-radius:4px}.templateAdminEdit.show-left,.templateUpload.show-left{left:auto;right:0}.templateAdminEdit .entry-content,.templateUpload .entry-content{overflow:hidden}.templateAdminEdit .left,.templateUpload .left{width:30%;float:left}.templateAdminEdit .right,.templateUpload .right{width:70%;float:right;padding-left:10px}.templateAdminEdit input[type=text],.templateAdminEdit textarea,.templateUpload input[type=text],.templateUpload textarea{padding:5px 10px;border-radius:4px;background-color:#ffffff;border:1px solid #e0e0e0;width:100%}.templateAdminEdit label,.templateUpload label{font-size:16px}.templateAdminEdit .rowinput,.templateUpload .rowinput{margin-bottom:15px}.templateAdminEdit hr,.templateUpload hr{margin-bottom:15px}.templateAdminEdit button.main-btn,.templateUpload button.main-btn{padding:10px 22px;background-color:#ff7600;color:#ffffff;border-radius:10px;font-size:16px}.templateAdminEdit .btn-cancel,.templateUpload .btn-cancel{padding:10px 22px;border-radius:10px;background-color:#ffffff;color:red;font-size:16px}.templateAdminEdit .wrap-editor .mce-content-body,.templateUpload .wrap-editor .mce-content-body{padding:10px;border:3px dashed #e0e0e0}.mce-floatpanel,.mce-tinymce-inline{z-index:100000!important}body,html{font-family:"Arial";font-size:16px}.container{margin:auto}.menu{list-style:none;padding:0;margin:0}.menu:after,.menu:before{display:block;clear:both;content:""}.menu li{list-style:none;position:relative}.menu li a{display:block;color:#333;padding:2px 0}.menu li.active>a{color:red}.menu li.parent-active>a{color:#F44336}.menu .sub-menu .sub-menu li{padding-left:20px}.menu .has-child>a{position:relative;padding-right:20px}.menu .has-child>a:after{display:inline-block;width:0;height:0;vertical-align:middle;border-top:4px solid;border-right:4px solid transparent;border-left:4px solid transparent;content:'';position:absolute;right:2px;top:0;bottom:0;margin:auto}p>iframe{display:inline-block}.mainMenu{background-color:#f3f3f3;border-bottom:2px solid #ffbdc0;position:relative;z-index:99}.mainMenu .menu li{float:left;position:relative}.mainMenu .menu li:hover>.sub-menu{display:block}.mainMenu .menu li.active>a{background-color:#ffe7e7}.mainMenu .menu a{padding:7px 12px;color:#555;font-weight:500}.mainMenu .menu .sub-menu{position:absolute;left:0;top:100%;display:none;background-color:#ffffff;box-shadow:0 0 5px rgba(0,0,0,0.2)}.mainMenu .menu .sub-menu li{float:left;width:200px}.section{padding:30px 0}.section.bb-1{border-bottom:1px solid #efefef}.section .titleSection{font-size:20px;font-weight:300;text-transform:uppercase;margin-bottom:10px}.searchArea{padding:10px 0}.searchArea .mainButton{background-color:#ffdddd;color:black;font-weight:500;border-color:#ffb8b8}@media (min-width:992px){.searchArea .form-control{min-width:500px;max-width:100%}}.itemPost .mainLink{display:block;line-height:19px}.itemPost .wrapImage{border:1px solid #efefef;margin-bottom:10px}.itemPost .summary .name{color:#333333;margin-bottom:10px;font-weight:600;font-size:14px;line-height:20px}.itemPost .summary .viewed{color:#666;font-size:80%}.itemPost.itemList{padding:10px 0;border-bottom:1px solid #efefef;overflow:hidden}.itemPost.itemList:first-child{padding-top:0}.itemPost.itemList:last-child{border-bottom:0;padding-bottom:0}.itemPost.itemList .images{float:left;width:90px}.itemPost.itemList .summary{padding-left:100px}.itemPost.itemList .summary .name{font-size:13px}.itemPost.itemText{padding:6px 0;font-size:13px}.itemPost.itemText:first-child{padding-top:0}.itemPost.itemText:last-child{border-bottom:0;padding-bottom:0}a:hover{text-decoration:none}img{max-width:100%}.wrapImage{width:100%;height:0;padding-top:75%;position:relative;display:block;overflow:hidden;border-radius:4px}.wrapImage .obj{position:absolute;top:0;left:0;width:100%;height:100%;object-fit:cover}.wrapImage .obj.obj-contain{object-fit:contain!important}.wrapImage.cine{padding-top:54%}.wrapImage.r75{padding-top:75%}.wrapImage.r125{padding-top:125%}.wrapImage.r100{padding-top:100%}.wrapImage.r54{padding-top:54%}.container-box{background-color:#ffffff;padding-top:15px;padding-bottom:15px}.itemNews1{background-color:#ffffff;padding:10px;position:relative;height:100%;display:block;padding-bottom:25px}.itemNews1:hover{box-shadow:2px 1px 10px rgba(0,0,0,0.1)}.itemNews1 .images{width:80px;float:right}.itemNews1 .summary{padding-right:90px}.itemNews1 .summary .title{font-size:14px;display:block;color:#333}.itemNews1 .summary .updated_at{font-size:13px;color:#484848;margin-top:2px;position:absolute;bottom:5px;left:10px}.mb-10{margin-bottom:10px}.row.row-5{margin-left:-5px;margin-right:-5px}.row.row-5 .col{padding-left:5px;padding-right:5px}.row.row-10{margin-left:-10px;margin-right:-10px}.row.row-10 .col{padding-left:10px;padding-right:10px}.wrap-toc ul:after,.wrap-toc ul:before{display:block;clear:both;content:""}.wrap-toc ul li{width:33.33%;float:left}.wrap-toc ul li a{color:#222}.wrap-toc ul .sub-menu,.wrap-toc ul ul{display:none}.panel-title a{display:block;padding:10px 12px;border:1px solid #efefef;background-color:#ffffff}.panel{margin-bottom:10px}.panel.opening .panel-collapse{height:auto!important;display:block}.panel .panel-body{padding:15px;border:1px solid #efefef}.panel-body{padding:15px}.pIcon{position:relative;padding-left:25px}.pIcon .faIcon{position:absolute;top:4px;left:0px}.newsTinhTe{background-color:#ffffff;border-radius:10px;overflow:hidden;box-shadow:0 0 7px rgba(0,0,0,0.12)}.newsTinhTe .itemNews{overflow:hidden;display:block;color:#333333;padding:17px 15px}.newsTinhTe .itemNews .image{width:220px;float:left}@media (max-width:767px){.newsTinhTe .itemNews .image{width:30%}}.newsTinhTe .itemNews .image .wrapImage{padding-top:75%;border-radius:10px;overflow:hidden}.newsTinhTe .itemNews .title{font-size:18px;font-weight:500}@media (max-width:767px){.newsTinhTe .itemNews .title{font-size:16px}}.newsTinhTe .itemNews .title:hover{color:red}.newsTinhTe .itemNews .summary{padding-left:235px}@media (max-width:767px){.newsTinhTe .itemNews .summary{padding-left:35%}}.newsTinhTe .itemNews .summary .intro{margin-top:10px;color:#848484}@media (max-width:767px){.newsTinhTe .itemNews .summary .intro{display:none}}.newsTinhTe .itemNews .summary .author{color:#777}@media (max-width:767px){.newsTinhTe .itemNews .summary .author{display:none}}.newsTinhTe .itemNews .summary .author .updated_at{color:#484848}.detailArticle img[width="500"]{border:5px solid #ffffff;margin:15px auto;box-shadow:0 0 10px rgba(0,0,0,0.2);border-radius:15px}.detailArticle .metaAuth{color:#666}.detailArticle .metaAuth .septum{display:inline-block;margin:auto 5px;height:18px;width:1px;background-color:#d4d4d4;position:relative;top:5px}.detailArticle .mbn-toc{float:right;max-width:300px;margin-left:15px;margin-bottom:15px}@media (max-width:767px){.detailArticle .mbn-toc{width:100%;max-width:none}}.detailArticle .mbn-toc li{list-style:none}.detailArticle .mbn-toc .header-toc{background-color:#efefef;padding:5px 10px;font-size:12px}.detailArticle .mbn-toc .wrap-toc{padding:10px;border:1px solid #efefef;background-color:#ffffff}.detailArticle .mbn-toc .wrap-toc .sub-toc{display:block;padding-left:20px}.detailArticle .mbn-toc .wrap-toc ul{list-style:none;padding:0}.detailArticle .mbn-toc .wrap-toc ul li{width:100%;overflow:hidden}.detailArticle .mbn-toc .wrap-toc ul a{display:block;position:relative;padding:5px;color:#007bff}.detailArticle .mbn-toc .wrap-toc ul a .tocCounterList{position:relative;display:inline-block;margin-right:5px;font-weight:500;color:#333}img{max-width:100%;height:auto}.titlePage{font-size:20px;margin:auto;margin-bottom:15px;padding-bottom:10px;border-bottom:1px solid #efefef}.titleArchive{font-size:26px;margin:auto;padding:5px 0;font-weight:400}.paginations .pagination{display:inline-block;white-space:nowrap}.paginations .pagination li{display:inline-block}.paginations .page-link{padding:5px 10px;line-height:normal;color:#dc3545}.paginations .page-item.active .page-link{background-color:#dc3545;border-color:#dc3545;color:#ffffff}.typeArticle{background-color:red;color:#ffffff;font-size:13px;padding:2px 5px;border-radius:5px;font-weight:normal}.typeArticle.N{background-color:var(--bg-feature,red);color:var(--text-bg-feature,#fff)}.typeArticle.F{background-color:var(--bg-focus,red);color:var(--text-bg-focus,#fff)}.boxContentSeo{box-shadow:0 0 5px rgba(0,0,0,0.2);background-color:#fff;border-radius:10px;padding:10px}.boxContentSeo .title{font-size:16px;line-height:20px;margin:auto;margin-bottom:10px;padding-bottom:10px;border-bottom:1px solid #efefef}.boxContentSeo .desc{font-size:14px}.boxContentSeo .desc p:last-child{margin-bottom:auto}.boxNewsSidebar .titleBox{font-size:16px;margin:auto;font-weight:500;padding:5px 20px;display:inline-block;background:var(--bg-sidebar,#ffdddd);color:var(--text-bg-sidebar,red);position:relative;border-top-left-radius:10px}.boxNewsSidebar .titleBox:after{content:"";position:absolute;top:100%;left:0;border-width:7px;border-style:solid;border-color:var(--bg-sidebar,#ffdddd) transparent transparent var(--bg-sidebar,#ffdddd)}.boxNewsSidebar .boxBody{padding:10px;border:1px solid #efefef;min-height:200px;background-color:#ffffff}.itemSidebar{padding-bottom:7px;margin-bottom:7px;border-bottom:1px solid #efefef;color:#333;display:block}.itemSidebar:last-child{border-bottom:none;margin-bottom:auto;padding-bottom:0}.itemSidebar .image{float:right;width:90px}.itemSidebar .image .wrapImage img.obj{border-radius:3px}.itemSidebar .summary{padding-right:100px;font-weight:500;font-size:14px}.itemSidebar .summary .time{color:#444;font-weight:400;font-size:12px}.detailArticle table{margin:15px auto;width:100%;max-width:100%}.detailArticle table td{border:1px solid #e0e0e0;padding:10px}.detailArticle table tr:nth-child(odd){background-color:#efefef}.detailArticle table tr:hover{background-color:#ffe8e1}.tags a{color:#555;display:inline-block;padding-right:10px;position:relative}.tags a:last-child{padding-right:0}.tags a:last-child:after{display:none}.tags a:after{content:"";width:1px;position:absolute;bottom:0;background-color:#afafaf;top:0;margin:auto;right:5px;height:14px}.tags a:hover{color:#007bff}.footerSocial{display:block}.footerSocial .fab{display:block;color:#444444;margin:auto 4px;background:#fff0eb;width:32px;height:32px;line-height:32px;font-size:18px;border-radius:50%;float:left;border:1px solid #f1c4b7;margin-bottom:10px}.footerSocial .iconMBN{float:left;display:block;width:32px;height:32px;line-height:42px;top:0;margin-right:4px;margin-bottom:10px}iframe{max-width:100%}.responseTable{max-width:100%;overflow-x:auto}.contactsTable{position:fixed;background:#ffffff;border-radius:15px;border:5px solid #ffc165;bottom:74px;right:10px;width:300px;box-shadow:0 0 10px #0000005c;transition:all 0.25s;transform-origin:bottom right}.contactsTable:after{content:"";border-width:29px 19px 26px 20px;border-style:solid;position:absolute;right:4px;top:100%;border-color:#ffc165 #ffc165 transparent transparent}.contactsTable.close{transform:scale(0)}.contactsTable.opening{transform:scale(1)}.contactsTable .header{padding:3px 0;border-bottom:1px solid #efefef}.contactsTable .itemPhone{text-align:left;display:block;width:50%;padding:8px 10px;line-height:16px;border-bottom:1px solid #efefef;float:left;white-space:nowrap;font-size:16px}.contactsTable .itemPhone .name{display:block;font-size:80%;font-weight:600;color:#333}.contactsTable .itemPhone .phone{color:red;font-weight:600}.contactsTable .itemCom{font-size:12px;padding:10px;padding-bottom:0px;line-height:normal;display:block;overflow:hidden;color:#333}.contactsTable .itemCom .phone{font-weight:600;color:red}.contactsTable .itemEmail{font-size:12px;display:inline-block;line-height:normal;padding:10px;color:#555;padding-top:0px}.iconMBN{height:37px;display:inline-block;margin:auto 4px;position:relative;top:-3px}.breadcrumb{background-color:#f7f7f7}.itemHot{background-color:#ffffff;height:100%;padding:10px;border-radius:5px}.itemHot .title{font-weight:600;color:#000;display:block;font-size:14px}.itemHot .intro{font-size:14px}.itemHot .updated_at{color:#484848;font-size:14px;display:block}.headingMain{padding:10px 15px;color:#000;margin:auto;font-size:16px;font-weight:normal;line-height:normal}.contactInfo{padding:7px 10px;background-color:#ffff5e;margin:15px auto}.listTimeLineWrap{padding-left:20px}.listTimeLine a{display:block}.listTimeLine a .title{display:block}.listTimeLine a .date,.listTimeLine a .hit{color:#555555;font-size:12px}.mbn-toc-head{font-size:20px}.logoMain{display:block;padding:10px 0;height:var(--height-logo,40px)}.logoMain img{max-height:100%;width:auto}.section404 .title{font-size:140px;font-weight:300}.section404 .title .middle{color:red}.customPopup{position:relative;z-index:9999}.customPopup .innerPopup{max-width:600px;position:fixed;top:20%;height:auto;left:0;right:0;margin:auto;background-color:#ffffff}.customPopup .bodyPopup{background-color:#ffffff;padding:15px}.customPopup .headerPopup{background-color:#fff3cf;padding:10px 15px}.customPopup .headerPopup img{height:50px}.customPopup .overlayPopup{position:fixed;top:0;left:0;right:0;bottom:0;margin:auto;height:100%;width:100%;background-color:rgba(0,0,0,0.3)}div.toolContact{position:fixed;bottom:47%;right:20px;z-index:999;width:50px}div.toolContact .iconContact{margin-bottom:10px;display:block}div.toolContact .iconContact img{border:2px solid #ffffff;border-radius:50%;background-color:#ffffff;transition:all 0.24s}div.toolContact .iconContact:hover img{box-shadow:0 5px 10px rgba(0,0,0,0.15),0 4px 15px rgba(0,0,0,0.13)}.footerContent .title{color:#545454;font-size:16px;text-transform:uppercase;font-weight:500;margin-bottom:15px}.footerContent .phones{background-color:#f7f7f7;overflow:hidden;padding:15px 10px;border-radius:5px}.footerContent .phones .itemPhone{display:block;width:48%;margin:3% 1%;position:relative;padding-left:40px;float:left;background-image:url(/assets/imgs/support-icon.png);background-repeat:no-repeat;background-size:30px;line-height:16px;color:#666666}.footerContent .phones .itemPhone .name{display:block;font-weight:500;font-size:14px}.footerContent .phones .itemPhone .phone{font-size:14px;color:#8e8a8a}.footerContent .footerQuote{padding:10px 15px;background:#ffffea;border:2px dashed #FF9800;color:#000000;font-size:14px;border-radius:5px}.phoneSecondary{overflow:hidden;padding-top:10px;border-top:3px dashed #efefef}.phoneSecondary .itemPhone{display:block;width:32.3333%;margin:3% auto;position:relative;float:left;line-height:16px;color:#666666;font-size:13px}.phoneSecondary .itemPhone:nth-child(3n+1){padding-left:0}.phoneSecondary .itemPhone:nth-child(3n+1):after{display:none}.phoneSecondary .itemPhone .name{display:block;font-weight:500;font-size:14px}.phoneSecondary .itemPhone .phone{color:#666}.phoneSecondary .itemPhone .phone:hover{color:red}.footerSite{color:#444;border-top:3px solid #efefef}.footerSite .logoFooter{height:73px;border:1px solid #e4e4e4;padding:8px;border-radius:5px;background-color:#ffffff}.footerSite .footerBottom{border-top:1px solid #e0e0e0}.footerSite .headerPhones{font-size:12px;color:#717171}.footerSite .headerPhones .hotlineFooter{font-size:18px;color:#000;font-weight:500;position:relative;line-height:18px}.footerSite .itemAddress{padding-left:60px;background-image:url(/assets/imgs/companies-icon-1.png);background-size:46px;background-repeat:no-repeat;background-position:left bottom}.footerSite .itemAddress.inventory{background-image:url("/assets/imgs/2211640.png")}.footerSite .itemAddress .title{font-weight:500;color:red;font-size:16px}.menuPolicy{text-align:center}.menuPolicy li{display:inline-block}.menuPolicy li a{color:#666;position:relative;padding:3px 5px;font-size:12px;display:block}.copyright{background-color:#ececec;padding:15px;text-align:center;font-size:14px}.imgCompany{width:100%;border:2px solid #969696;border-radius:3px}.itemNews002{display:block;color:#333;font-size:13px;overflow:hidden}.itemNews002 .image{width:25%;float:left}.itemNews002 .summary{padding-left:30%;color:#5d5d5d}.itemNews002 .summary .title{color:#222}blockquote{background:#f9f9f9;border-left:6px solid #ccc;margin:1.5em auto;padding:0.5em 10px;quotes:"\201C" "\201D" "\2018" "\2019"}blockquote:before{color:#ccc;content:open-quote;font-size:53px;line-height:0.1em;margin-right:7px;vertical-align:-0.4em;font-family:Arial}blockquote p{display:inline}.storeGallery .wrapImage{transition:all 0.25s;border-radius:0}body.not-cache{border-top:3px solid #ffe3da}.headingReset{line-height:normal;margin:auto;font-size:inherit}i.fa.fa-eye{color:#bbb}.card-header .mbn-toc-head{font-size:inherit;margin:auto}.menuVertical ul{margin:auto;padding:0;list-style:none}.menuVertical ul a{display:block;padding:4px 10px;color:#444444;border-bottom:1px solid #efefef}.menuVertical ul li:last-child>a{border-bottom:none}.itemPhoneShortcode{display:block;width:48%;margin:3% 1%;position:relative;padding-left:40px;float:left;background-image:url(/assets/imgs/support-icon.png);background-repeat:no-repeat;background-size:30px;line-height:16px;color:#666666}.itemPhoneShortcode .name{display:block;font-weight:500;font-size:14px}.itemPhoneShortcode .phone{font-size:14px;color:#8e8a8a}.phonesPanel{background-color:#f7f7f7;overflow:hidden;padding:15px 10px;border-radius:5px}.phonesPanelMobile{text-align:center;position:fixed;width:100%;bottom:10px;z-index:999}.phonesPanelMobile .hotlineCall{font-size:16px;text-shadow:0px -1px 0px rgba(30,30,30,0.8);-webkit-border-radius:30px;-moz-border-radius:30px;background:#d21414;background:linear-gradient(0deg,#d21414 30%,#fa1414 70%);-webkit-box-shadow:0px 2px 1px rgba(50,50,50,0.75);-moz-box-shadow:0px 2px 1px rgba(50,50,50,0.75);margin:auto;left:0;padding:6px 30px;border-radius:25px;border:1px solid #fff;box-shadow:1px 1px 5px #00000033;color:#fff}.phonesPanelMobile .wrapPhones{background:#ffffff;border-radius:15px;border:5px solid #ffc165;box-shadow:0 0 10px #0000005c;transform-origin:bottom right;z-index:9;left:10px;right:10px;margin:auto;bottom:100%;transition:all 0.25s;width:auto;overflow:hidden;text-align:left;max-width:90%;padding:7px 5px 15px;visibility:hidden;position:absolute;opacity:0;transition:all 0.2s;margin-bottom:15px}.phonesPanelMobile .wrapPhones.active{opacity:1;visibility:visible}.phonesPanelMobile .wrapPhones .logo{border-bottom:1px solid #efefef;padding-bottom:5px;margin-bottom:5px}.phonesPanelMobile .wrapPhones .logo img{height:50px;margin-bottom:7px}.phonesPanelMobile .wrapPhones .itemPhoneShortcode{font-size:14px;width:46%;margin:2% 2%;border:2px solid #ffc8b7;border-radius:28px;text-align:left;padding:6px 0 6px 40px;background-repeat:no-repeat;background-position:5px center;background-size:28px;background-color:#ffede7}.phonesPanelMobile .wrapPhones .itemPhoneShortcode .phone{font-weight:bold;color:red}.phonesPanelMobile .wrapPhones .itemPhoneShortcode .name{color:black}.headerSite .linkLogo img{height:90px}.headerSite .iconFa .fas{font-size:22px;color:#ffffff}.headerSite .linkLogo{display:block}.headerSite .menuRight{display:block;margin:auto;padding:0;font-size:0}.headerSite .menuRight li a{display:block;padding:6px 12px;color:#eee}.headerSite .menuRight li{list-style:none;float:left;font-size:15px}.headerSite{background-color:var(--header-bg,'#ffffff');padding:5px 0;color:var(--header-color,'#222222')}.headerSite a{color:inherit}.headerSite .formSearch input{border:none}.headerSite .btn-search{background-color:#efefef}.boxStyle{background-color:#ffffff;padding:15px;border-radius:4px;border-top:1px solid #e6e6e6;border-left:1px solid #e6e6e6;border-bottom:1px solid #dadada;border-right:1px solid #eaeaea}.header-content-right a{color:var(--bg-primary,"#ff9800z");font-weight:bold}.header-content-right p:first-child{margin-top:0}.header-content-right p:last-child{margin-bottom:0}.style-origin p{margin-bottom:13px}.style-origin p:last-child{margin-bottom:auto}.style-origin ol,.style-origin ul{list-style:disc;margin-bottom:20px;padding-left:15px}.style-origin ol li+li,.style-origin ul li+li{margin-top:10px}.style-origin ol{list-style:decimal;padding-left:40px}.style-origin a{color:#2196f3}.style-origin h1,.style-origin h2,.style-origin h3,.style-origin h4,.style-origin h5,.style-origin h6{font-weight:bold;line-height:normal;margin-bottom:10px}.style-origin h1{font-size:26px}.style-origin h2{font-size:24px}.style-origin h3{font-size:22px}.style-origin h4{font-size:20px}.style-origin h5{font-size:18px}.style-origin h6{font-size:16px}.style-origin img{display:inline-block}.style-origin quote{padding-left:25px;border-left:5px solid #e0e0e0}.shortcode-tree-cat a{display:block;padding:5px 2px;line-height:normal}.shortcode-tree-cat ul{margin:auto}.shortcode-tree-cat li{list-style:none}.shortcode-tree-cat .sub-cate{border-left:2px solid #efefef;padding-left:15px;margin-left:10px}@media (max-width:767px){.headerSite{box-shadow:1px 3px 10px rgba(0,0,0,0.3)}}.headerSite {
  background-color: #ffffff;
}
.headerContact {
  padding-top: 8px;
}
.headerContact .itemPhone {
  text-align: center;
  display: block;
  width: 100% / 6;
  padding: 8px 10px;
  line-height: 16px;
  float: left;
  white-space: nowrap;
  font-size: 14px;
}
.headerContact .itemPhone .name {
  display: block;
  font-size: 80%;
  font-weight: 600;
  color: #333;
}
.headerContact .itemPhone .phone {
  color: red;
  font-weight: 600;
}
@media (max-width: 991px) {
  .headerContact .itemPhone {
    width: 33.3%;
  }
}
.iconMBN {
  height: 37px;
  display: inline-block;
  margin: auto 4px;
  position: relative;
  top: -3px;
}
.breadcrumb {
  background-color: #f7f7f7;
}
.itemHot {
  background-color: #ffffff;
  height: 100%;
  padding: 10px;
  border-radius: 5px;
}
.itemHot .title {
  font-weight: 600;
  color: #000;
  display: block;
  font-size: 14px;
}
.itemHot .intro {
  font-size: 14px;
}
.itemHot .updated_at {
  color: #484848;
  font-size: 14px;
  display: block;
}
.headingMain {
  padding: 10px 15px;
  color: #000;
  margin: auto;
  font-size: 16px;
  font-weight: normal;
  line-height: normal;
}
.contactInfo {
  padding: 7px 10px;
  background-color: #ffff5e;
  margin: 15px auto;
}
.listTimeLineWrap {
  padding-left: 20px;
}
.listTimeLine a {
  display: block;
}
.listTimeLine a .title {
  display: block;
}
.listTimeLine a .date,
.listTimeLine a .hit {
  color: #555555;
  font-size: 12px;
}
.mbn-toc-head {
  font-size: 20px;
}
.logoMain {
  max-width: 280px;
  width: 300px;
  display: block;
  padding: 10px 0 5px;
}
.section404 .title {
  font-size: 140px;
  font-weight: 300;
}
.section404 .title .middle {
  color: red;
}
.customPopup {
  position: relative;
  z-index: 9999;
}
.customPopup .innerPopup {
  max-width: 600px;
  position: fixed;
  top: 20%;
  height: auto;
  left: 0;
  right: 0;
  margin: auto;
  background-color: #ffffff;
}
.customPopup .bodyPopup {
  background-color: #ffffff;
  padding: 15px;
}
.customPopup .headerPopup {
  background-color: #fff3cf;
  padding: 10px 15px;
}
.customPopup .headerPopup img {
  height: 50px;
}
.customPopup .overlayPopup {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  margin: auto;
  height: 100%;
  width: 100%;
  background-color: rgba(0, 0, 0, 0.3);
}
div.toolContact {
  position: fixed;
  bottom: 60%;
  right: 20px;
  z-index: 999;
  width: 50px;
}
div.toolContact .iconContact {
  margin-bottom: 10px;
  display: block;
}
div.toolContact .iconContact img {
  border: 2px solid #ffffff;
  border-radius: 50%;
  background-color: #ffffff;
  -webkit-transition: all 0.24s;
  -moz-transition: all 0.24s;
  -ms-transition: all 0.24s;
  -o-transition: all 0.24s;
  transition: all 0.24s;
}
div.toolContact .iconContact:hover img {
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.15), 0 4px 15px rgba(0, 0, 0, 0.13);
}
.footerContent .title {
  color: #545454;
  font-size: 16px;
  text-transform: uppercase;
  font-weight: 500;
  margin-bottom: 15px;
}
.footerContent .phones {
  background-color: #f7f7f7;
  overflow: hidden;
  padding: 15px 10px;
  border-radius: 5px;
}
.footerContent .phones .itemPhone {
  display: block;
  width: 48%;
  margin: 3% 1%;
  position: relative;
  padding-left: 40px;
  float: left;
  background-image: url(/assets/imgs/support-icon.png);
  background-repeat: no-repeat;
  background-size: 30px;
  line-height: 16px;
  color: #666666;
}
.footerContent .phones .itemPhone .name {
  display: block;
  font-weight: 500;
  font-size: 14px;
}
.footerContent .phones .itemPhone .phone {
  font-size: 14px;
  color: #8e8a8a;
}
.footerContent .footerQuote {
  padding: 10px 15px;
  background: #ffffea;
  border: 2px dashed #FF9800;
  color: #000000;
  font-size: 14px;
  border-radius: 5px;
}
.phoneSecondary {
  overflow: hidden;
  padding-top: 10px;
  border-top: 3px dashed #efefef;
}
.phoneSecondary .itemPhone {
  display: block;
  width: 32.3333%;
  margin: 3% auto;
  position: relative;
  float: left;
  line-height: 16px;
  color: #666666;
  font-size: 13px;
}
.phoneSecondary .itemPhone:nth-child(3n+1) {
  padding-left: 0;
}
.phoneSecondary .itemPhone:nth-child(3n+1):after {
  display: none;
}
.phoneSecondary .itemPhone .name {
  display: block;
  font-weight: 500;
  font-size: 14px;
}
.phoneSecondary .itemPhone .phone {
  color: #666;
}
.phoneSecondary .itemPhone .phone:hover {
  color: red;
}
.footerSite {
  color: #444;
  border-top: 3px solid #efefef;
}
.footerSite .logoFooter {
  height: 73px;
  border: 1px solid #e4e4e4;
  padding: 8px;
  border-radius: 5px;
  background-color: #ffffff;
}
.footerSite .footerBottom {
  border-top: 1px solid #e0e0e0;
}
.footerSite .headerPhones {
  font-size: 12px;
  color: #717171;
}
.footerSite .headerPhones .hotlineFooter {
  font-size: 18px;
  color: #000;
  font-weight: 500;
  position: relative;
  line-height: 18px;
}
.footerSite .itemAddress {
  padding-left: 60px;
  background-image: url(/assets/imgs/companies-icon-1.png);
  background-size: 46px;
  background-repeat: no-repeat;
  background-position: left bottom;
}
.footerSite .itemAddress.inventory {
  background-image: url("/assets/imgs/2211640.png");
}
.footerSite .itemAddress .title {
  font-weight: 500;
  color: red;
  font-size: 16px;
}
.menuPolicy {
  text-align: center;
}
.menuPolicy li {
  display: inline-block;
}
.menuPolicy li a {
  color: #666;
  position: relative;
  padding: 3px 5px;
  font-size: 12px;
  display: block;
}
.copyright {
  background-color: #ececec;
  padding: 15px;
  text-align: center;
  font-size: 14px;
}
.imgCompany {
  width: 100%;
  border: 2px solid #969696;
  border-radius: 3px;
}
.itemNews002 {
  display: block;
  color: #333;
  font-size: 13px;
  overflow: hidden;
}
.itemNews002 .image {
  width: 25%;
  float: left;
}
.itemNews002 .summary {
  color: #5d5d5d;
}
@media (max-width: 767px) {
  .itemNews002 .summary {
    padding-left: 0 !important;
  }
}
.itemNews002 .summary .title {
  color: #222;
}
blockquote {
  background: #f9f9f9;
  border-left: 6px solid #ccc;
  margin: 1.5em auto;
  padding: 0.5em 10px;
  quotes: "\201C" "\201D" "\2018" "\2019";
}
blockquote:before {
  color: #ccc;
  content: open-quote;
  font-size: 53px;
  line-height: 0.1em;
  margin-right: 7px;
  vertical-align: -0.4em;
  font-family: Arial;
}
blockquote p {
  display: inline;
}
.storeGallery .wrapImage {
  -webkit-transition: all 0.25s;
  -moz-transition: all 0.25s;
  -ms-transition: all 0.25s;
  -o-transition: all 0.25s;
  transition: all 0.25s;
  border-radius: 0;
}
body.not-cache {
  border-top: 3px solid #ffe3da;
}
.headingReset {
  line-height: normal;
  margin: auto;
  font-size: inherit;
}
i.fa.fa-eye {
  color: #bbb;
}
.footerSocial {
  display: block;
}
.footerSocial .fab {
  display: block;
  color: #444444;
  margin: auto 4px;
  background: #fff0eb;
  width: 32px;
  height: 32px;
  line-height: 32px;
  font-size: 18px;
  border-radius: 50%;
  float: left;
  border: 1px solid #f1c4b7;
  margin-bottom: 10px;
  padding: 5px;
  text-align: center;
}
.footerSocial .fab img {
  height: auto;
  width: 28px;
}
.footerSocial .iconMBN {
  float: left;
  display: block;
  width: 32px;
  height: 32px;
  line-height: 42px;
  top: 0;
  margin-right: 4px;
  margin-bottom: 10px;
}
@media (max-width: 991px) {
  .floating-hotline .f-header-tools button {
    color: #fff;
    border: 1px solid #ff9800 !important;
    box-shadow: 1px 1px 9px #00000038 !important;
  }
}
.menu-context-auto {
  border: 1px solid #efefef;
  border-radius: 4px;
}
.menu-context-auto ul {
  padding: 0;
}
.menu-context-auto .title-box {
  padding: 9px 10px;
  font-size: 18px;
  margin: auto;
  border-bottom: 1px solid #efefef;
  background: #e6e6e6;
}
.menu-context-auto li {
  list-style: none;
}
.menu-context-auto li a {
  display: block;
  padding: 4px 10px;
  color: #373737;
}
.floating-hotline.br {
  bottom: 120px !important;
}
.floating-hotline.br.in-active {
  bottom: 0px !important;
}
.cart-counter {
  background: #ffc500;
  color: #000;
  padding: 2px 6px;
  border-radius: 3px;
  position: relative;
  bottom: 9px;
  font-size: 13px;
  font-weight: bold;
}
.menu li a {
  padding: 10px 0;
}
.menuMobile {
  padding-top: 44px !important;
}
.menuMobile .has-child > a:after {
  top: -4px;
}
.menuMobile .sub-menu a {
  padding: 8px 10px;
}
:root{--bg-primary: ;--text-bg-primary: ;--bg-sidebar: ;--text-bg-sidebar: ;--bg-feature: ;--text-bg-feature: ;--bg-focus: ;--text-bg-focus: ;--header-bg: ;--header-color: ;--height-logo: 100;--header-menu-bg: ;--header-menu-color: ;--header-menu-bg-active: ;--header-menu-color-active: }</style>
<link rel="preload" href="/assets/fonts/fontawesome5.3.6/css/all.min.css?v=" as="style">
<link rel="preload" href="/extension/product/css/style.css?v=1715682172" as="style">
<link rel="preload" href="/assets/themes/covid-19-001/js/jquery-3.5.1.min.js?v=" as="script">
<link rel="preload" href="/assets/themes/covid-19-001/js/vue2.6.11.js?v=" as="script">
<link rel="preload" href="/assets/themes/covid-19-001/js/lazyload.min.js?v=" as="script">
<link rel="preload" href="/assets/themes/covid-19-001/js/main.js?v=" as="script">
<link rel="preload" href="/extension/hotline/HotLineFloat.umd.js?v=1715682172" as="script">

        <!-- /DefaultMetaHeader -->
        </head>
<body>

<div class="headerSite">
    <div class="container">
        <div class="float-left">
            <a class="logoMain pt-1" href="/" style="padding-top: 0">
                <i class="sr-only">inkythuatso.com</i>
                <img 
                     class="logo-header mx-auto md:ml-0"
                     title="inkythuatso.com"
                     src="https://inkythuatso.com/assets/imgs/logo_inkythuatso.svg" alt="inkythuatso.com">
            </a>
            <div style="font-size: 12px">
                DIGITAL PRINTING Co., LTD - Since 2006
            </div>
        </div>

        <div class="float-right">

            <div>
                <form action="https://inkythuatso.com/tim-kiem" class="mt-2">
                    <div class="row">
                        <input class="form-control col-9" type="text" name="q"
                               value="">
                        <div class="col-3">
                            <button type="submit" class="btn btn-block btn-outline-danger">Tìm kiếm</button>
                        </div>
                    </div>
                </form>
            </div>

            <div class="headerContact">
                                    <a href="tel:02822466666" class="btn itemPhone">
                        <span class="name">Ms.Trinh</span>
                        <span class="phone">(028) 224 66666</span>
                    </a>
                                    <a href="tel:02822376666" class="btn itemPhone">
                        <span class="name">Ms.Nhân</span>
                        <span class="phone">(028) 2237 6666</span>
                    </a>
                                    <a href="tel:02822386666" class="btn itemPhone">
                        <span class="name">Ms.Xuân</span>
                        <span class="phone">(028) 2238 6666</span>
                    </a>
                                    <a href="tel:02822626666" class="btn itemPhone">
                        <span class="name">Mr.Nghĩa</span>
                        <span class="phone">(028) 2262 6666</span>
                    </a>
                                    <a href="tel:02822636666" class="btn itemPhone">
                        <span class="name">Ms.Thanh</span>
                        <span class="phone">(028) 2263 6666</span>
                    </a>
                                    <a href="tel:02822686666" class="btn itemPhone">
                        <span class="name">Ms.Dung</span>
                        <span class="phone">(028) 2268 6666</span>
                    </a>
                                <div class="clearfix"></div>
            </div>

                    </div>
        <div class="clearfix"></div>
    </div>


    <div class="mainMenu">
        <nav class="container">
                            <ul class='menu wrapperMenu'><li class=''>
                            <a  title='Trang chủ' href='/'>Trang chủ</a> 
                             
                        </li><li class='has-child'>
                            <a  title='Báo giá, Thiết kế' href='/bang-bao-gia-phi-thiet-ke-840.html'>Báo giá, Thiết kế</a> 
                            <ul class='menu sub-menu'><li class=''>
                            <a target='_blank' title='Báo giá online 24/24' href='https://inkythuatso.com/bao-gia'>Báo giá online 24/24</a> 
                             
                        </li><li class=''>
                            <a  title='Bảng báo giá' href='/bang-bao-gia.html'>Bảng báo giá</a> 
                             
                        </li><li class=''>
                            <a  title='Thiết kế' href='/thiet-ke-quang-cao.html'>Thiết kế</a> 
                             
                        </li><li class=''>
                            <a target='_blank' title='Sản phẩm in' href='https://inkythuatso.com/sanphamin-23'>Sản phẩm in</a> 
                             
                        </li></ul> 
                        </li><li class='has-child'>
                            <a  title='In Ảnh' href='/in-anh-ky-thuat-so.html'>In Ảnh</a> 
                            <ul class='menu sub-menu'><li class=''>
                            <a  title='In ảnh kỹ thuật số' href='/in-anh-ky-thuat-so.html'>In ảnh kỹ thuật số</a> 
                             
                        </li><li class=''>
                            <a  title='Hình Công giáo' href='/in-tranh-tuong-chua-dep-tp-hcm-in-tranh-anh-cong-giao-dep-1311.html'>Hình Công giáo</a> 
                             
                        </li><li class=''>
                            <a  title='Hình Phật đẹp' href='/hinh-phat-dep.html'>Hình Phật đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Hình ảnh đẹp' href='/hinh-anh-dep.html'>Hình ảnh đẹp</a> 
                             
                        </li></ul> 
                        </li><li class='has-child'>
                            <a  title='Menu, Thẻ nhựa' href='/in-the-nhua/in-the-nhua-theo-yeu-cau-1258.html'>Menu, Thẻ nhựa</a> 
                            <ul class='menu sub-menu'><li class=''>
                            <a  title='In thẻ nhựa' href='/in-the-nhua.html'>In thẻ nhựa</a> 
                             
                        </li><li class=''>
                            <a  title='In thực đơn menu' href='/in-thuc-don-menu.html'>In thực đơn menu</a> 
                             
                        </li></ul> 
                        </li><li class='has-child'>
                            <a  title='Quảng cáo Sự kiện' href='/in-an-su-kien.html'>Quảng cáo Sự kiện</a> 
                            <ul class='menu sub-menu'><li class=''>
                            <a  title='In poster quảng cáo' href='/in-poster-quang-cao.html'>In poster quảng cáo</a> 
                             
                        </li><li class=''>
                            <a  title='Kệ X, Standee, Banner' href='/ke-x-banner-standy-standee-rollup.html'>Kệ X, Standee, Banner</a> 
                             
                        </li><li class=''>
                            <a  title='In lịch' href='/in-lich.html'>In lịch</a> 
                             
                        </li><li class=''>
                            <a  title='In bao lì xì' href='/in-bao-li-xi.html'>In bao lì xì</a> 
                             
                        </li><li class=''>
                            <a  title='Hộp đèn Led, Tranh điện, Menu Led' href='https://inkythuatso.com/hop-den-led.html'>Hộp đèn Led, Tranh điện, Menu Led</a> 
                             
                        </li><li class=''>
                            <a  title='In phông nền, Backdrop' href='/in-phong-nen.html'>In phông nền, Backdrop</a> 
                             
                        </li><li class=''>
                            <a  title='In băng rôn' href='/in-bang-ron.html'>In băng rôn</a> 
                             
                        </li><li class=''>
                            <a  title='In banner' href='/in-banner.html'>In banner</a> 
                             
                        </li><li class=''>
                            <a  title='In thẻ đeo sự kiện' href='/in-the-deo-su-kien.html'>In thẻ đeo sự kiện</a> 
                             
                        </li><li class=''>
                            <a  title='In wobbler' href='/in-wobbler.html'>In wobbler</a> 
                             
                        </li><li class=''>
                            <a  title='In áo thun' href='/in-ao-thun.html'>In áo thun</a> 
                             
                        </li><li class=''>
                            <a  title='In quảng cáo' href='/in-quang-cao.html'>In quảng cáo</a> 
                             
                        </li><li class=''>
                            <a  title='Giấy khen Bằng khen' href='/in-giay-khen-bang-khen.html'>Giấy khen Bằng khen</a> 
                             
                        </li><li class=''>
                            <a  title='Thiệp mừng, Thiệp mời' href='/in-thiep-moi-thiep-mung.html'>Thiệp mừng, Thiệp mời</a> 
                             
                        </li><li class=''>
                            <a  title='Thiệp cưới' href='/in-thiep-cuoi.html'>Thiệp cưới</a> 
                             
                        </li><li class=''>
                            <a  title='Thi công quảng cáo' href='/thi-cong-quang-cao.html'>Thi công quảng cáo</a> 
                             
                        </li></ul> 
                        </li><li class='has-child'>
                            <a  title='In khổ lớn' href='/in-ky-thuat-so-kho-lon.html'>In khổ lớn</a> 
                            <ul class='menu sub-menu'><li class=''>
                            <a  title='In PP' href='/in-pp.html'>In PP</a> 
                             
                        </li><li class=''>
                            <a  title='In Hiflex' href='/in-hiflex.html'>In Hiflex</a> 
                             
                        </li><li class=''>
                            <a  title='In Canvas' href='/in-canvas.html'>In Canvas</a> 
                             
                        </li><li class=''>
                            <a  title='In Silk' href='/in-silk.html'>In Silk</a> 
                             
                        </li><li class=''>
                            <a  title='In Backlit' href='/in-backlit-film.html'>In Backlit</a> 
                             
                        </li><li class=''>
                            <a  title='In tranh trang trí' href='/in-tranh-trang-tri.html'>In tranh trang trí</a> 
                             
                        </li><li class=''>
                            <a  title='In tranh dán tường 3D' href='/in-tranh-dan-tuong-3d.html'>In tranh dán tường 3D</a> 
                             
                        </li></ul> 
                        </li><li class='has-child'>
                            <a  title='In Offset KTS' href='/in-offset.html'>In Offset KTS</a> 
                            <ul class='menu sub-menu'><li class=''>
                            <a  title='In nhanh' href='/in-nhanh.html'>In nhanh</a> 
                             
                        </li><li class=''>
                            <a  title='In Decal' href='/in-decal.html'>In Decal</a> 
                             
                        </li><li class=''>
                            <a  title='In name card' href='/in-name-card.html'>In name card</a> 
                             
                        </li><li class=''>
                            <a  title='In tờ rơi' href='/in-to-roi.html'>In tờ rơi</a> 
                             
                        </li><li class=''>
                            <a  title='In tem nhãn' href='/in-tem-nhan.html'>In tem nhãn</a> 
                             
                        </li><li class=''>
                            <a  title='In tem vỡ' href='/in-tem-vo.html'>In tem vỡ</a> 
                             
                        </li><li class=''>
                            <a  title='In Sticker' href='/in-sticker.html'>In Sticker</a> 
                             
                        </li><li class=''>
                            <a  title='In brochure' href='/in-brochure.html'>In brochure</a> 
                             
                        </li><li class=''>
                            <a  title='In catalogue' href='/in-catalogue.html'>In catalogue</a> 
                             
                        </li><li class=''>
                            <a  title='In phong bì' href='/in-phong-bi.html'>In phong bì</a> 
                             
                        </li><li class=''>
                            <a  title='In folder' href='/in-folder.html'>In folder</a> 
                             
                        </li><li class=''>
                            <a  title='In bao thư' href='/in-bao-thu.html'>In bao thư</a> 
                             
                        </li><li class=''>
                            <a  title='In giấy tiêu đề' href='/in-giay-tieu-de.html'>In giấy tiêu đề</a> 
                             
                        </li><li class=''>
                            <a  title='In túi giấy' href='/in-tui-giay.html'>In túi giấy</a> 
                             
                        </li><li class=''>
                            <a  title='In hộp giấy' href='/in-hop-giay.html'>In hộp giấy</a> 
                             
                        </li><li class=''>
                            <a  title='In voucher' href='/in-voucher.html'>In voucher</a> 
                             
                        </li><li class=''>
                            <a  title='In tag treo' href='/in-tag-treo.html'>In tag treo</a> 
                             
                        </li><li class=''>
                            <a  title='In phiếu giấy' href='https://inkythuatso.com/in-phieu-giay.html'>In phiếu giấy</a> 
                             
                        </li></ul> 
                        </li><li class=''>
                            <a  title='In DTF' href='https://inkythuatso.com/in-dtf.html'>In DTF</a> 
                             
                        </li><li class='has-child'>
                            <a  title='In UV' href='/in-uv.html'>In UV</a> 
                            <ul class='menu sub-menu'><li class=''>
                            <a  title='In ấn trên mọi chất liệu' href='/in-an-tren-moi-chat-lieu.html'>In ấn trên mọi chất liệu</a> 
                             
                        </li><li class=''>
                            <a  title='In trên gỗ' href='/in-tren-go.html'>In trên gỗ</a> 
                             
                        </li><li class=''>
                            <a  title='In trên kim loại' href='/in-tren-kim-loai.html'>In trên kim loại</a> 
                             
                        </li><li class=''>
                            <a  title='In trên kính' href='/in-tren-kinh.html'>In trên kính</a> 
                             
                        </li><li class=''>
                            <a  title='In trên mica' href='/in-tren-mica.html'>In trên mica</a> 
                             
                        </li><li class=''>
                            <a  title='In trên nhựa' href='/in-tren-nhua.html'>In trên nhựa</a> 
                             
                        </li><li class=''>
                            <a  title='In trên thuộc da' href='/in-tren-thuoc-da.html'>In trên thuộc da</a> 
                             
                        </li></ul> 
                        </li><li class='has-child'>
                            <a  title='Công ty In KTS' href='/cong-ty-in-ky-thuat-so.html'>Công ty In KTS</a> 
                            <ul class='menu sub-menu'><li class=''>
                            <a  title='In nhanh kỹ thuật số' href='/in-nhanh-ky-thuat-so.html'>In nhanh kỹ thuật số</a> 
                             
                        </li><li class=''>
                            <a  title='Máy móc Thiết bị' href='/trang-bi-may-moc-thiet-bi.html'>Máy móc Thiết bị</a> 
                             
                        </li><li class=''>
                            <a  title='Báo chí' href='/bao-chi.html'>Báo chí</a> 
                             
                        </li><li class=''>
                            <a  title='Hoạt động công ty & XH' href='/hoat-dong-cong-ty.html'>Hoạt động công ty & XH</a> 
                             
                        </li><li class=''>
                            <a  title='Tuyển dụng, Nhân sự' href='/tuyen-dung.html'>Tuyển dụng, Nhân sự</a> 
                             
                        </li><li class=''>
                            <a  title='Mẫu thiết kế Vector' href='https://inkythuatso.com/mau-thiet-ke-vector.html'>Mẫu thiết kế Vector</a> 
                             
                        </li><li class=''>
                            <a  title='Kích thước' href='https://inkythuatso.com/kich-thuoc.html'>Kích thước</a> 
                             
                        </li><li class=''>
                            <a  title='Kinh nghiệm hay' href='https://inkythuatso.com/kinh-nghiem-hay.html'>Kinh nghiệm hay</a> 
                             
                        </li></ul> 
                        </li></ul>            
                    </nav>

        <div class="clearfix"></div>
    </div>

</div>

<div style="background-color: #ffe049; padding: 10px;">
    <div style="padding: 10px; background-color: #ffffff; border-radius: 10px;">
        <div class="storeGallery section" style="padding: 0">
            <div class="">
                <div class="row" style="margin: auto">
                                            <div class="col-sm-3" style="padding: 0">
                            <div class="wrapImage"><img class="obj lazy" data-src="/assets/imgs/store/1.jpg" alt="">
                            </div>
                        </div>
                                            <div class="col-sm-3" style="padding: 0">
                            <div class="wrapImage"><img class="obj lazy" data-src="/assets/imgs/store/2.jpg" alt="">
                            </div>
                        </div>
                                            <div class="col-sm-3" style="padding: 0">
                            <div class="wrapImage"><img class="obj lazy" data-src="/assets/imgs/store/3.jpg" alt="">
                            </div>
                        </div>
                                            <div class="col-sm-3" style="padding: 0">
                            <div class="wrapImage"><img class="obj lazy" data-src="/assets/imgs/store/4.jpg" alt="">
                            </div>
                        </div>
                                    </div>
            </div>
        </div>
    </div>
</div>

    <div class="container mt-3">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Trang chủ</a></li>
                                                <li class="breadcrumb-item"><a href="https://inkythuatso.com/mau-thiet-ke-vector.html">Mẫu thiết kế vector</a></li>
                                                                <li class="breadcrumb-item active" aria-current="page">Tải mẫu VNPAY logo file vector AI, EPS, JPEG, PNG, SVG</li>
                                    </ol>
    </nav>
</div>



            <div class="section detailArticle">
            <div class="container">

                <h1 class="titlePage">
                    Tải mẫu VNPAY logo file vector AI, EPS, JPEG, PNG, SVG                </h1>
                <div class="meta">
                    <div class="float-left"><i>Đã xem: 3,061</i></div>
                    <div class="float-left ml-3"><i>Cập nhât: 2 năm trước</i></div>
                    <img src="https://inkythuatso.com/2153.acount" alt="" width="0" height="0">
                    <div class="clearfix"></div>
                </div>

                                    <div class="mt-4">
                        Download VNPAY logo vector ✓ VNPAY logo png ✓ Ý nghĩa logo VNPAY ✓ VNPAY QR logo ✓ VNPAY Scan ✓ Tải xuống miễn phí                    </div>
                
                                    <div class="tocIntro mt-4"><p><img style="display: block; margin-left: auto; margin-right: auto;" src="https://inkythuatso.com/uploads/thumbnails/800/2021/12/vnpay-logo-inkythuatso-01-13-16-29-51.jpg" alt="hình ảnh logo VNPAY - Inkythuatso" width="631" height="631" /></p>
<p><strong>VNPAY là gì?</strong></p>
<p>Công ty Cổ phần Giải pháp Thanh toán Việt Nam (VNPAY) thành lập từ năm 2007, trải qua hơn 10 năm xây dựng và phát triển trong lĩnh vực giải pháp thanh toán điện tử với ngành kinh doanh chủ đạo là tài chính ngân hàng. Với mục tiêu “Cho cuộc sống dễ dàng hơn”, VNPAY lần lượt cho ra đời những tiện ích như ứng dụng Mobile Banking, Cổng thanh toán VNPAY QR, VnShop, Website thanh toán hóa đơn và mua hàng trực tuyến Vban.vn,… đáp ứng nhu cầu thanh toán cho mọi đối tượng khách hàng.</p>
<p>Trong đó VNPAY-QR là một trong những tính năng đang được nhiều khách hàng lựa chọn nhất bởi sự tiện nghi. VNPAY–QR là một tiện ích cho phép khách hàng thanh toán bằng cách quét mã QR trên ứng dụng Mobile Banking. Theo đó, khách hàng chỉ cần đăng nhập và sử dụng Mobile banking của các ngân hàng, sử dụng camera điện thoại quét mã QR để thanh toán các hóa đơn dịch vụ một cách nhanh chóng và tiện lợi mà không cần đến tiền mặt, với các dịch vụ như nhà hàng, khách sạn, mua sắm, taxi…</p>
<p><strong>VNPAY logo dùng để làm gì?</strong></p>
<p style="text-align: justify;">VNPAY logo chuẩn file vector hay PNG, PNG không nền, JPG/JPEG chất lượng sắc nét được sử dụng để phục vụ cho các thiết kế, in ấn. File vector VNPAY logo có thể dễ dàng chỉnh sửa, tùy chọn xuất nhiều định dạng, linh hoạt phù hợp với mọi yêu cầu về kích thước, phục vụ cho công việc của bạn</p></div>
                
                <nav class='mbn-toc' style="float: none; margin: auto; max-width: none; margin-top: 15px;">
                    <div class="header-toc">
                        <b>Danh mục bài viết</b>
                        <br>
                        <i style="color: #8c8c8c">(Table of content)</i>

                        <span class="icon"></span>
                    </div>

                    <div class="wrap-toc">
                        <ul class="" ><li><a href="#1tai-mau-vnpay-logo-file-vector-ai-eps-jpeg-png-svg"><span class="tocCounterList">1</span> Tải mẫu VNPAY logo file vector AI, EPS, JPEG, PNG, SVG</a></li></ul>                    </div>
                </nav>

                <div class="tocContent mt-3">
                    <div class="content">
                        <h2 class='mbn-toc-head' id='1tai-mau-vnpay-logo-file-vector-ai-eps-jpeg-png-svg'>Tải mẫu VNPAY logo file vector AI, EPS, JPEG, PNG, SVG</h2><div class='mbn-toc-des'><p style="text-align: justify;">Sau đây là mẫu VNPAY logo chuẩn với nhiều định dạng gồm file vector PSD, EPS (Adobe Illustrator) và hình ảnh VNPAY logo PNG không nền hay JPG/JPEG chất lượng cao, bạn dễ dàng tải trọn bộ logo, để phục vụ thiết kế dễ dàng, hỗ trợ tải miễn phí từ Inkythuatso.</p>
<p style="text-align: justify;"><span style="font-weight: bolder;">Xem trước hình ảnh:</span></p>
<p style="text-align: center;"><iframe  class='lazy'  data-src="https://drive.google.com/file/d/1Zxg30hnR3sOpzM94loGB4FPjERhSu8Fo/preview" width="640" height="480"></iframe></p>
<p style="text-align: justify;">&gt;&gt; Tải trọn bộ <span style="font-size: 1rem;">VNPAY logo ngay tại:  </span><a class="" title="Tải VNPAY logo vector, PNG, JPG/JPEG, AI, EPS" href="https://drive.google.com/file/d/1bNkelqFI7-nolZeV3ljL7p8hxdGJUzWP/view?usp=sharing" target="_blank" rel="nofollow noopener"><span style="text-align: left;"><span style="color: #0056b3;"><strong><em><u>Tải VNPAY logo vector, PNG, JPG/JPEG, AI, EPS</u></em></strong></span></span></a></p>
<p style="text-align: justify;"><span style="font-weight: bolder;">Thông tin file </span><span style="text-align: left;"><strong>VNPAY logo</strong></span></p>
<ul>
<li style="text-align: justify;">Dung lượng file: 0.3 MB (.Rar)</li>
<li style="text-align: justify;">Định dạng tệp: .AI; .PNG, .EPS, .JPEG</li>
<li style="text-align: justify;">Loại file chỉnh: Vector &amp; Image </li>
<li style="text-align: justify;"><span style="color: #333333;">Thường dùng trong thiết kế in ấn: <span style="color: #0000ff;"><em><span style="font-weight: bolder;"><a style="color: #0000ff;" title="in logo" href="https://inkythuatso.com/in-decal/in-decal-logo-1118.html" target="_blank" rel="noopener">in logo</a></span></em></span>, <span style="color: #0000ff;"><em><span style="font-weight: bolder;"><a style="color: #0000ff;" title="In tờ rơi" href="https://inkythuatso.com/in-to-roi.html" target="_blank" rel="noopener">In tờ rơi</a></span></em></span>, <span style="color: #0000ff;"><em><span style="font-weight: bolder;"><a style="color: #0000ff;" title="In Menu" href="https://inkythuatso.com/in-thuc-don-menu.html" target="_blank" rel="noopener">In Menu</a></span></em></span>, <span style="color: #0000ff;"><em><span style="font-weight: bolder;"><a style="color: #0000ff;" title="in standee" href="https://inkythuatso.com/in-standee-binh-thanh-1244.html" target="_blank" rel="noopener">in standee</a></span></em></span></span></li>
<li style="text-align: justify;"><span style="color: #333333;">Tham khảo thêm những <span style="color: #0000ff;"><em><a style="color: #0000ff;" title="mẫu logo đẹp" href="https://inkythuatso.com/tags/mau-logo-dep.html" target="_blank" rel="noopener"><span style="font-weight: bolder;">mẫu logo đẹp</span></a></em></span> thuộc chủ đề <span style="color: #0000ff;"><em><span style="font-weight: bolder;"><a style="color: #0000ff;" title="logo công nghệ" href="https://inkythuatso.com/tags/logo-cong-nghe.html" target="_blank" rel="noopener">logo công nghệ</a></span></em></span>, <span style="color: #0000ff;"><em><span style="font-weight: bolder;"><a style="color: #0000ff;" title="logo thương hiệu nổi tiếng" href="https://inkythuatso.com/tags/logo-thuong-hieu-noi-tieng.html" target="_blank" rel="noopener">logo thương hiệu nổi tiếng</a></span></em></span></span></li>
</ul></div>                    </div>

                    <div class="wysiwyg">
                        <p>#vnpay_logo #Inkythuatso</p>                    </div>
                </div>

                <div class="metaAuth">
    <div class="float-left">
                    Đăng bởi
            <a href="https://inkythuatso.com/thanh-vien/minh-toan/20"><b> Minh Toàn</b></a>
                <span class="septum"></span> 13-12-2021        <span class="septum"></span> <i class="fa fa-eye"></i> 3061    </div>

    <div class="float-right">
        <div class="fb-like" data-layout="button_count" data-action="like" data-size="small"
             data-show-faces="true" data-share="true"></div>
    </div>
    <div class="clearfix"></div>
</div>

                <div class="contactInfo">
    <b>Tải mẫu VNPAY logo file vector AI, EPS, JPEG, PNG, SVG</b> -
    <div class='supper-content style-origin' id='supper-banner-article-detail'><p>Hotline in ấn gặp CSKH Ánh Duyên 0906.961.365 / Nghĩa 090.1180.365 / Diễm Trinh 0909.357.365 Trực tiếp đặt InKyThuatSo tại: 365 Lê Quang Định, Phường 5, Quận Bình Thạnh, TPHCM Gửi email đặt nhận báo giá ngay in@inkythuatso.com - innhanh@inkythuatso.com |</p></div>
    
            <b>Mẫu thiết kế vector</b>
    </div>



                <div id="shareMbn" style="min-height: 34px" class="mt-2">
                    <mbnshare :site_name="false"></mbnshare>
                </div>

                <div class="mt-4"></div>
                <div data-width="100%" class="fb-comments" data-numposts="5"></div>

                <div class="tags mt-3">
                    <b class="text-danger">Chuyên mục:</b>
                                            <a href="/mau-thiet-ke-vector.html">Mẫu thiết kế vector</a>
                                    </div>

                <div class="tags mt-3">
                    <b class="text-danger">Tags:</b>
                                            <a href="/tags/logo-thuong-hieu-noi-tieng.html">  logo thương hiệu nổi tiếng</a>
                                            <a href="/tags/logo-cong-nghe.html"> logo công nghệ</a>
                                            <a href="/tags/mau-logo-dep.html">mẫu logo đẹp</a>
                                    </div>

                <div class="mt-4">Các bài viết liên qua đến  Tải mẫu VNPAY logo file vector AI, EPS, JPEG, PNG, SVG</div>
<div class="row ">
    <div class="col-md-6">
        <ul class="listTimeLineWrap">
                            <li class="listTimeLine mt-2"><a href="https://inkythuatso.com/mau-thiet-ke-vector/logo-con-su-tu-2152.html">
                        <span class="title">Tải logo con sư tử đẹp file Vector, AI, EPS, SVG, PNG miễn phí</span>
                        <span class="hit"><i class="fa fa-eye"></i> 1.067</span>
                        <span class="date">13-12-2021</span>
                    </a></li>
                            <li class="listTimeLine mt-2"><a href="https://inkythuatso.com/mau-thiet-ke-vector/logo-quan-an-2151.html">
                        <span class="title">Tải logo quán ăn file SVG, AI, EPS, PNG, JPG, PDF</span>
                        <span class="hit"><i class="fa fa-eye"></i> 447</span>
                        <span class="date">01-03-2022</span>
                    </a></li>
                            <li class="listTimeLine mt-2"><a href="https://inkythuatso.com/mau-thiet-ke-vector/logo-con-heo-2150.html">
                        <span class="title">Tải logo con heo đẹp file Vector, AI, EPS, SVG, PNG miễn phí</span>
                        <span class="hit"><i class="fa fa-eye"></i> 780</span>
                        <span class="date">13-12-2021</span>
                    </a></li>
                    </ul>
    </div>
    <div class="col-md-6">
        <ul class="listTimeLineWrap">
                            <li class="listTimeLine  mt-2"><a href="https://inkythuatso.com/mau-thiet-ke-vector/logo-fwd-2154.html">
                        <span class="title">Tải mẫu logo FWD file vector AI, EPS, JPEG, PNG, SVG</span>
                        <span class="hit"><i class="fa fa-eye"></i> 1.384</span>
                        <span class="date">13-12-2021</span>
                    </a></li>
                            <li class="listTimeLine  mt-2"><a href="https://inkythuatso.com/mau-thiet-ke-vector/logo-quan-tra-sua-2155.html">
                        <span class="title">Tải logo quán trà sữa file SVG, AI, EPS, PNG, JPG, PDF</span>
                        <span class="hit"><i class="fa fa-eye"></i> 826</span>
                        <span class="date">13-12-2021</span>
                    </a></li>
                            <li class="listTimeLine  mt-2"><a href="https://inkythuatso.com/mau-thiet-ke-vector/logo-quan-com-2156.html">
                        <span class="title">Tải logo quán cơm file SVG, AI, EPS, PNG, JPG, PDF</span>
                        <span class="hit"><i class="fa fa-eye"></i> 825</span>
                        <span class="date">13-12-2021</span>
                    </a></li>
                    </ul>
    </div>
</div>
                <div class="row row-cols-2">
                        <div class="boxNewsSidebar col mb-4">
        <h2 class="titleBox">Tin mới nhất</h2>
        <div class="boxBody">
                            <a href="https://inkythuatso.com/mau-thiet-ke-vector/background-cam-on-3778.html" title="Tải mẫu background cảm ơn file vector AI, PSD, Hình ảnh JPEG chất lượng cao, đẹp miễn phí" class="itemSidebar">
                    <div class="image">
                        <span class="wrapImage">
                            <img class="obj lazy" data-src="https://inkythuatso.com/uploads/images/2022/01/download-background-cam-on-preview-27-16-04-13.jpg" alt="Tải mẫu background cảm ơn file vector AI, PSD, Hình ảnh JPEG chất lượng cao, đẹp miễn phí">
                        </span>
                    </div>
                    <div class="summary">
                        <div class="title">Tải mẫu background cảm ơn file vector AI, PSD, Hình ảnh JPEG chất lượng cao, đẹp miễn phí</div>
                        <div class="time mt-2">Đăng vào 24-03-2022</div>
                    </div>

                    <div class="clearfix"></div>
                </a>
                            <a href="https://inkythuatso.com/mau-thiet-ke-vector/background-thoi-noi-3777.html" title="Tải mẫu background thôi nôi file vector AI, PSD, Hình ảnh JPEG chất lượng cao, đẹp miễn phí" class="itemSidebar">
                    <div class="image">
                        <span class="wrapImage">
                            <img class="obj lazy" data-src="https://inkythuatso.com/uploads/images/2022/01/download-background-thoi-noi-preview-27-15-47-16.jpg" alt="Tải mẫu background thôi nôi file vector AI, PSD, Hình ảnh JPEG chất lượng cao, đẹp miễn phí">
                        </span>
                    </div>
                    <div class="summary">
                        <div class="title">Tải mẫu background thôi nôi file vector AI, PSD, Hình ảnh JPEG chất lượng cao, đẹp miễn phí</div>
                        <div class="time mt-2">Đăng vào 24-03-2022</div>
                    </div>

                    <div class="clearfix"></div>
                </a>
                            <a href="https://inkythuatso.com/mau-thiet-ke-vector/background-khai-giang-3776.html" title="Tải mẫu background khai giảng file vector AI, PSD, Hình ảnh JPEG chất lượng cao, đẹp miễn phí" class="itemSidebar">
                    <div class="image">
                        <span class="wrapImage">
                            <img class="obj lazy" data-src="https://inkythuatso.com/uploads/images/2022/01/background-khai-giang-inkythuatso-27-15-41-41.jpg" alt="Tải mẫu background khai giảng file vector AI, PSD, Hình ảnh JPEG chất lượng cao, đẹp miễn phí">
                        </span>
                    </div>
                    <div class="summary">
                        <div class="title">Tải mẫu background khai giảng file vector AI, PSD, Hình ảnh JPEG chất lượng cao, đẹp miễn phí</div>
                        <div class="time mt-2">Đăng vào 24-03-2022</div>
                    </div>

                    <div class="clearfix"></div>
                </a>
                            <a href="https://inkythuatso.com/mau-thiet-ke-vector/background-ban-hoc-3775.html" title="Tải mẫu background bàn học file vector AI, PSD, Hình ảnh JPEG chất lượng cao, đẹp miễn phí" class="itemSidebar">
                    <div class="image">
                        <span class="wrapImage">
                            <img class="obj lazy" data-src="https://inkythuatso.com/uploads/images/2022/01/background-ban-hoc-inkythuatso-27-15-21-17.jpg" alt="Tải mẫu background bàn học file vector AI, PSD, Hình ảnh JPEG chất lượng cao, đẹp miễn phí">
                        </span>
                    </div>
                    <div class="summary">
                        <div class="title">Tải mẫu background bàn học file vector AI, PSD, Hình ảnh JPEG chất lượng cao, đẹp miễn phí</div>
                        <div class="time mt-2">Đăng vào 24-03-2022</div>
                    </div>

                    <div class="clearfix"></div>
                </a>
                    </div>
    </div>

    <div class="boxNewsSidebar col mb-4">
        <h3 class="titleBox">Tin xem nhiều</h3>
        <div class="boxBody">
                            <a href="https://inkythuatso.com/mau-thiet-ke-vector/youtube-logo-1838.html" title="Tải mẫu youtube logo file vector AI, EPS, JPEG, SVG"  class="itemSidebar">
                    <div class="image">
                        <span class="wrapImage">
                            <img class="obj lazy" data-src="https://inkythuatso.com/uploads/images/2021/10/youtube-logo-inkythuatso-01-27-14-06-56.jpg" alt="Tải mẫu youtube logo file vector AI, EPS, JPEG, SVG">
                        </span>
                    </div>
                    <div class="summary">
                        <div class="title">Tải mẫu youtube logo file vector AI, EPS, JPEG, SVG</div>
                        <div class="time mt-2">86.371 đã xem</div>
                    </div>

                    <div class="clearfix"></div>
                </a>
                            <a href="https://inkythuatso.com/mau-thiet-ke-vector/logo-cong-doan-1626.html" title="Download logo Công Đoàn Vector, PSD, CDR, Ai, PNG miễn phí"  class="itemSidebar">
                    <div class="image">
                        <span class="wrapImage">
                            <img class="obj lazy" data-src="https://inkythuatso.com/uploads/images/2021/09/logo-cong-doan-viet-nam-vector-09-15-17-44.jpg" alt="Download logo Công Đoàn Vector, PSD, CDR, Ai, PNG miễn phí">
                        </span>
                    </div>
                    <div class="summary">
                        <div class="title">Download logo Công Đoàn Vector, PSD, CDR, Ai, PNG miễn phí</div>
                        <div class="time mt-2">56.208 đã xem</div>
                    </div>

                    <div class="clearfix"></div>
                </a>
                            <a href="https://inkythuatso.com/mau-thiet-ke-vector/zalo-logo-1647.html" title="Tải Zalo logo vector file AI, CDR, EPS, SVG, PSD, PNG, PDF miễn phí"  class="itemSidebar">
                    <div class="image">
                        <span class="wrapImage">
                            <img class="obj lazy" data-src="https://inkythuatso.com/uploads/images/2021/09/zalo-logo-inkythuatso-14-15-03-04.jpg" alt="Tải Zalo logo vector file AI, CDR, EPS, SVG, PSD, PNG, PDF miễn phí">
                        </span>
                    </div>
                    <div class="summary">
                        <div class="title">Tải Zalo logo vector file AI, CDR, EPS, SVG, PSD, PNG, PDF miễn phí</div>
                        <div class="time mt-2">48.657 đã xem</div>
                    </div>

                    <div class="clearfix"></div>
                </a>
                            <a href="https://inkythuatso.com/mau-thiet-ke-vector/logo-tiktok-1944.html" title="Tải mẫu logo Tiktok file vector AI, EPS, JPEG, SVG, PNG"  class="itemSidebar">
                    <div class="image">
                        <span class="wrapImage">
                            <img class="obj lazy" data-src="https://inkythuatso.com/uploads/images/2021/11/logo-tiktok-inkythuatso-2-mesa-de-trabajo-1-27-09-08-20.jpg" alt="Tải mẫu logo Tiktok file vector AI, EPS, JPEG, SVG, PNG">
                        </span>
                    </div>
                    <div class="summary">
                        <div class="title">Tải mẫu logo Tiktok file vector AI, EPS, JPEG, SVG, PNG</div>
                        <div class="time mt-2">44.742 đã xem</div>
                    </div>

                    <div class="clearfix"></div>
                </a>
                    </div>
    </div>



                </div>
            </div>
        </div>
    
        <div class="section mt-4" style="background-color: #f5f5f5; padding-bottom: 20px;">
        <div class="container">
            <p class="titleSection">Tin nổi bật
                                   Mẫu thiết kế vector                            </p>
            <div class="row row-5">
                                    <div class="col col-sm-6 col-md-4 col-lg-3 mb-10">
                        <div class="itemNews1">
                            <div class="images">
                                <span class="wrapImage">
                                    <img data-src="https://inkythuatso.com/uploads/thumbnails/800/2023/07/2-in-standee-x-inkythuatso-01-09-54-17.jpg" alt="Bảng báo giá Standee - Banner cuốn - In Standee giá rẻ, nhanh lấy liền, theo yêu cầu tại TPHCM" class="obj lazy">
                                </span>
                            </div>
                            <div class="summary">
                                <a href="https://inkythuatso.com/bang-bao-gia-standee-banner-cuon-824.html"
                                   class="title">Bảng báo giá Standee - Banner cuốn - In Standee...</a>
                                <div class="updated_at">06-03-2024</div>
                            </div>
                        </div>
                    </div>
                                    <div class="col col-sm-6 col-md-4 col-lg-3 mb-10">
                        <div class="itemNews1">
                            <div class="images">
                                <span class="wrapImage">
                                    <img data-src="https://inkythuatso.com/uploads/thumbnails/500/5abf1a4676a7f1522473542.jpg" alt="In bạt hiflex giá rẻ tại TPHCM" class="obj lazy">
                                </span>
                            </div>
                            <div class="summary">
                                <a href="https://inkythuatso.com/in-hiflex/in-bat-hiflex-gia-re-tai-tphcm-1274.html"
                                   class="title">In bạt hiflex giá rẻ tại TPHCM</a>
                                <div class="updated_at">29-02-2024</div>
                            </div>
                        </div>
                    </div>
                                    <div class="col col-sm-6 col-md-4 col-lg-3 mb-10">
                        <div class="itemNews1">
                            <div class="images">
                                <span class="wrapImage">
                                    <img data-src="https://inkythuatso.com/uploads/images/2024/02/3-in-hanger-quang-cao-inkythuatso-28-07-17-38.jpg" alt="In ấn các loại wobbler quảng cáo" class="obj lazy">
                                </span>
                            </div>
                            <div class="summary">
                                <a href="https://inkythuatso.com/in-an-cac-loai-wobbler-quang-cao-984.html"
                                   class="title">In ấn các loại wobbler quảng cáo</a>
                                <div class="updated_at">28-02-2024</div>
                            </div>
                        </div>
                    </div>
                                    <div class="col col-sm-6 col-md-4 col-lg-3 mb-10">
                        <div class="itemNews1">
                            <div class="images">
                                <span class="wrapImage">
                                    <img data-src="https://inkythuatso.com/uploads/thumbnails/800/2024/02/in-to-roi-dan-tuong-in-to-roi-offset-thong-tin-khuyen-mai-san-pham-may-dong-luc-inkythuatso-inkts1177-5-20-08-02-32.jpg" alt="In tờ rơi dán tường theo yêu cầu TPHCM" class="obj lazy">
                                </span>
                            </div>
                            <div class="summary">
                                <a href="https://inkythuatso.com/in-to-roi/in-to-roi-dan-tuong-1038.html"
                                   class="title">In tờ rơi dán tường theo yêu cầu TPHCM</a>
                                <div class="updated_at">21-02-2024</div>
                            </div>
                        </div>
                    </div>
                                    <div class="col col-sm-6 col-md-4 col-lg-3 mb-10">
                        <div class="itemNews1">
                            <div class="images">
                                <span class="wrapImage">
                                    <img data-src="https://inkythuatso.com/uploads/thumbnails/500/5a5068ee8dba81515219182.jpg" alt="Báo giá in PP bồi formex TPHCM" class="obj lazy">
                                </span>
                            </div>
                            <div class="summary">
                                <a href="https://inkythuatso.com/in-pp-boi-formex/bao-gia-in-pp-boi-formex-tphcm-1214.html"
                                   class="title">Báo giá in PP bồi formex TPHCM</a>
                                <div class="updated_at">02-02-2024</div>
                            </div>
                        </div>
                    </div>
                                    <div class="col col-sm-6 col-md-4 col-lg-3 mb-10">
                        <div class="itemNews1">
                            <div class="images">
                                <span class="wrapImage">
                                    <img data-src="https://inkythuatso.com/uploads/thumbnails/500/58450c7d46ded1480920189.jpg" alt="In Decal dán xe theo yêu cầu TPHCM" class="obj lazy">
                                </span>
                            </div>
                            <div class="summary">
                                <a href="https://inkythuatso.com/in-decal/in-decal-dan-xe-1010.html"
                                   class="title">In Decal dán xe theo yêu cầu TPHCM</a>
                                <div class="updated_at">28-12-2023</div>
                            </div>
                        </div>
                    </div>
                                    <div class="col col-sm-6 col-md-4 col-lg-3 mb-10">
                        <div class="itemNews1">
                            <div class="images">
                                <span class="wrapImage">
                                    <img data-src="https://inkythuatso.com/uploads/thumbnails/500/5b4d7d10419a61531804944.jpg" alt="In backlit film HCM - Báo giá in backlit film có keo, không keo làm hộp đèn, phông nền cao cấp" class="obj lazy">
                                </span>
                            </div>
                            <div class="summary">
                                <a href="https://inkythuatso.com/in-backlit-film/in-backlit-film-hcm-bao-gia-in-backlit-film-co-keo-khong-keo-lam-hop-den-phong-nen-cao-cap-1309.html"
                                   class="title">In backlit film HCM - Báo giá in backlit film có...</a>
                                <div class="updated_at">14-12-2023</div>
                            </div>
                        </div>
                    </div>
                                    <div class="col col-sm-6 col-md-4 col-lg-3 mb-10">
                        <div class="itemNews1">
                            <div class="images">
                                <span class="wrapImage">
                                    <img data-src="https://inkythuatso.com/uploads/images/2023/12/5-in-lich-treo-tuong-13-to-inkythuatso-04-08-43-53.jpg" alt="In lịch treo tường theo yêu cầu TPHCM - Thiết kế đẹp theo chủ đề" class="obj lazy">
                                </span>
                            </div>
                            <div class="summary">
                                <a href="https://inkythuatso.com/in-lich/in-lich-treo-tuong-theo-yeu-cau-tphcm-thiet-ke-dep-theo-chu-de-1370.html"
                                   class="title">In lịch treo tường theo yêu cầu TPHCM - Thiết kế...</a>
                                <div class="updated_at">04-12-2023</div>
                            </div>
                        </div>
                    </div>
                            </div>
        </div>
    </div>


    <link rel="stylesheet" href="/extension/hotline/HotLineFloat.css?v=1715682172">
    <div id="appHotline" class="ext">
        <hotline :logo="json_content.logo"
                 :hotline="json_content.hotline"
                 :footer_phone="json_content.footer_phone"
                 :footer_email="json_content.footer_email"
                 :types="json_content.types"
                 :footer_complaint="json_content.footer_complaint"></hotline>
    </div>
    <script>
        var appHot;
        document.addEventListener('DOMContentLoaded', (event) => {
            appHot = new Vue({
                el: '#appHotline',
                components:{
                    'hotline': HotLineFloat
                },
                data: {
                    json_content: {"logo":"https:\/\/inkythuatso.com\/assets\/imgs\/logo_inkythuatso.svg","types":[{"name":"phone","display":"G\u1ecdi \u0110i\u1ec7n","icon":"\/extension\/hotline\/phone.png"},{"name":"zalo","display":"chat Zalo","icon":"\/extension\/hotline\/zalo.png"}],"hotline":{"phone":[{"name":"Trung Ngh\u0129a","phone_display":"090 1180 365","href":"tel:0901180365"},{"name":"Xu\u00e2n H\u1ea1","phone_display":"090 1188 365","href":"tel:0901188365"},{"name":"\u00c1nh Duy\u00ean","phone_display":"090 6863 365","href":"tel:0906863365"},{"name":"\u00c1nh Duy\u00ean","phone_display":"090 6961 365","href":"tel:0906961365"},{"name":"Qu\u1ed1c Th\u00e1i","phone_display":"090 1319 365","href":"tel:0901319365"},{"name":"Di\u1ec5m Trinh","phone_display":"090 9357 365","href":"tel:0909357365"},{"name":"Kim Qu\u00fd","phone_display":"090 1189 365","href":"tel:0901189365"},{"name":"H\u1ea1nh Dung","phone_display":"090 9213 365","href":"tel:0909213365"},{"name":"Hu\u1ef3nh Nh\u00e2n","phone_display":"090 9212 365","href":"tel:0909212365"},{"name":"Ph\u01b0\u01a1ng Linh","phone_display":"090 9215 365","href":"tel:0909215365"},{"name":"\u00c1i Ng\u00e2n","phone_display":"090 1383 365","href":"tel:0901383365"},{"name":"Ms Th\u1ea3o","phone_display":"09 09 09 96 69","href":"tel:0909099669"}],"zalo":[{"name":"Trung Ngh\u0129a","phone_display":"090 1180 365","href":"https:\/\/zalo.me\/0901180365"},{"name":"Xu\u00e2n H\u1ea1","phone_display":"090 1188 365","href":"https:\/\/zalo.me\/0901188365"},{"name":"\u00c1nh Duy\u00ean","phone_display":"090 6863 365","href":"https:\/\/zalo.me\/0906863365"},{"name":"\u00c1nh Duy\u00ean","phone_display":"090 6961 365","href":"https:\/\/zalo.me\/0906961365"},{"name":"Qu\u1ed1c Th\u00e1i","phone_display":"090 1319 365","href":"https:\/\/zalo.me\/0901319365"},{"name":"Di\u1ec5m Trinh","phone_display":"090 9357 365","href":"https:\/\/zalo.me\/0909357365"},{"name":"Kim Qu\u00fd","phone_display":"090 1189 365","href":"https:\/\/zalo.me\/0901189365"},{"name":"H\u1ea1nh Dung","phone_display":"090 9213 365","href":"https:\/\/zalo.me\/0909213365"},{"name":"Hu\u1ef3nh Nh\u00e2n","phone_display":"090 9212 365","href":"https:\/\/zalo.me\/0909212365"},{"name":"Ph\u01b0\u01a1ng Linh","phone_display":"090 9215 365","href":"https:\/\/zalo.me\/0909215365"},{"name":"\u00c1i Ng\u00e2n","phone_display":"090 1383 365","href":"https:\/\/zalo.me\/0901383365"},{"name":"Ms Th\u1ea3o","phone_display":"09 09 09 96 69","href":"https:\/\/zalo.me\/0909099669"}]},"footer_phone":"","footer_email":"","footer_complaint":false}                },
            })
        })
    </script>
<div class="footerSite section mt-4" style="background-color: #ffffff">
    <div class="container">
        <div class="row">
            <div class="col-md-6 col-sm-6 col-12  mt-4 mt-md-0 mt-sm-0">
                <div class="footerContent">
                    <div class="title">Hotline tứ quý đặt hàng</div>

                    <div class="footerQuote">
                        Chúng tôi không thực hiện bất kỳ yêu cầu nâng giá, kê giá từ phía khách hàng và nhân viên
                    </div>
                    <div class="phoneSecondary mb-0">
                                                    <a href="tel:02822466666" class="itemPhone">
                                <b class="name" style="font-size: 16px; font-weight: bold; color: #888">Ms.Trinh</b>
                                <span class="phone"
                                      style="font-size: 18px; color: black; line-height:31px">(028) 224 66666</span>
                            </a>
                                                    <a href="tel:02822376666" class="itemPhone">
                                <b class="name" style="font-size: 16px; font-weight: bold; color: #888">Ms.Nhân</b>
                                <span class="phone"
                                      style="font-size: 18px; color: black; line-height:31px">(028) 2237 6666</span>
                            </a>
                                                    <a href="tel:02822386666" class="itemPhone">
                                <b class="name" style="font-size: 16px; font-weight: bold; color: #888">Ms.Xuân</b>
                                <span class="phone"
                                      style="font-size: 18px; color: black; line-height:31px">(028) 2238 6666</span>
                            </a>
                                                    <a href="tel:02822626666" class="itemPhone">
                                <b class="name" style="font-size: 16px; font-weight: bold; color: #888">Mr.Nghĩa</b>
                                <span class="phone"
                                      style="font-size: 18px; color: black; line-height:31px">(028) 2262 6666</span>
                            </a>
                                                    <a href="tel:02822636666" class="itemPhone">
                                <b class="name" style="font-size: 16px; font-weight: bold; color: #888">Ms.Thanh</b>
                                <span class="phone"
                                      style="font-size: 18px; color: black; line-height:31px">(028) 2263 6666</span>
                            </a>
                                                    <a href="tel:02822686666" class="itemPhone">
                                <b class="name" style="font-size: 16px; font-weight: bold; color: #888">Ms.Dung</b>
                                <span class="phone"
                                      style="font-size: 18px; color: black; line-height:31px">(028) 2268 6666</span>
                            </a>
                                            </div>
                    <hr class="mt-1">
                    <div class="row mb-1">
                        <div class="col col-4">
                            in@inkythuatso.com <br>
                            InNhanh@inkythuatso.com
                        </div>
                        <div class="col col-4 text-center" style="padding: 0 15px">
                            Than phiền - góp ý <br>
                            09 09 09 9669                        </div>
                        <div class="col col-4 text-right">
                            Kế toán / Tuyển dụng <br>
                            028 224 66666                        </div>
                    </div>
                </div>
            </div>


            <div class="col-md-6 col-sm-12 col-12">
                <div class="map mt-3">
                    <a target="_blank" href="https://g.page/InKyThuatSo?share">
                        <img data-src="/assets/imgs/store/1.jpg" alt="" class="obj lazy">
                    </a>
                </div>
            </div>
        </div>

    </div>

    <div
            style="
            font-size: 18px;
            padding: 20px 0 20px;
            background: #ffffe6;
            margin-top: 15px;"
    >
        <div class="container">
            <p>Các Khách Hàng in ấn bất kỳ: Công Ty không truyền bá các file gốc của Khách hàng cho người khác</p>
            <p>Các sản phẩm lỗi Khách hàng tự ý bỏ công ty sử dụng gói hàng hoá ( hoặc công ty chọn lại làm mẫu hoặc cho
                tặng người khác đối với hình tượng tôn kính không thể bỏ rác). Trừ trường hợp có thoả thuận khác.</p>
            <p>Không nhận in những sản phẩm vi phạm thuần phong mỹ tục. Vi phạm pháp luật</p>
        </div>
    </div>


    <div class="container">
        <div class="footerBottom mt-4 pt-3">
            <div class="row">
                <div class="col-12 col-md-6">

                    <div class="mb-3">
                        <div style="width: 48%;float: left">
                            <img data-src="/assets/imgs/logo_inkythuatso.svg" class="lazy logoFooter" alt="">
                        </div>
                        <div style="width: 50%;float: left;padding-left: 10px">
                            <b>Giờ làm việc</b> <br>
                            Thứ 2 - Thứ 7 : 8h - 19h <br>
                            <small><i>(Chủ nhật nghỉ)</i></small>
                        </div>
                        <div class="clearfix"></div>
                    </div>

                    <div class="itemAddress" style="background-position-y: top">
                        <p><span style="color: #ff0000;"><a style="color: #ff0000;" title="Công Ty In Kỹ Thuật Số - InKTS - Digital Printing ltd" href="https://www.facebook.com/InKyThuatSo/" target="_blank" rel="noopener">CÔNG TY TNHH IN KỸ THUẬT SỐ<br />DIGITAL PRINTING Co., LTD</a> Tax / MST: 0310 989 626 <strong><br /></strong></span>365 Lê Quang Định, phường 5, quận Bình Thạnh, TPHCM <a title="365 Lê Quang Định, phường 5, quận Bình Thạnh, TPHCM" href="https://g.page/InKyThuatSo?gm" rel="nofollow">(Xem bản đồ)</a></p>                    </div>

                    <div class="footerContent">
                        <div class="summary">
                            <div class="footerQuote mb-3" style="padding: 5px 10px">
                                <img data-src="/images/pcar.png" style="height: 30px;" alt="" class="lazy">
                                Car Parking
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-12 col-md-6 mt-4 mt-md-0 mt-lg-0">
                    <div class="footerContent">

                        <div class="title mt-3">IN KTS - Công ty In Ấn - In nhanh giá rẻ</div>
                        <div class="text-center mb-3">
                            <img style="width: 100%" class="lazy imgCompany"
                                 data-src="/themes/inkythuatso/imgs/footer-showroom.jpg"
                                 alt="">
                        </div>
                    </div>
                </div>

                <div class="col-12 col-sm-2">

                </div>
            </div>

        </div>
    </div>
</div>

<div class="copyright text-left mt-3">
    <div class="container">
        <div class="row">
            <div class="col-12 col-md-3">
                <a href="https://vinadesign.vn/dich-vu-thiet-ke-web/nganh-in-an-quang-cao-thiet-ke-1883.html"
                   style="color: black">
                    Web designed
                </a>
                by
                <a href="https://vinadesign.vn/" style="color: black">
                    <b>VINA<span style="color:red;">DESIGN</span></b>
                </a>

                <div class="mt-2">
                    <a class="footerSocial text-center"
                       href="/cong-ty-in-ky-thuat-so/cong-ty-inkythuatso-tren-mang-xa-hoi-1418.html">
                        <img class="ml-0 iconMBN" src="/themes/inkythuatso/imgs/social/004-mxhmbn.png" alt="">
                        <span class="fab">
                        <img class="ml-0 iconMBN" src="/themes/inkythuatso/imgs/social/001-facebook.svg" alt="">
                        </span>
                        <span class="fab">
                        <img class="ml-0 iconMBN" src="/themes/inkythuatso/imgs/social/002-instagram.svg" alt="">
                        </span>
                        <span class="fab">
                        <img class="ml-0 iconMBN" src="/themes/inkythuatso/imgs/social/003-youtube.svg" alt="">
                        </span>
                        <span class="fab">
                        <img class="ml-0 iconMBN" src="/themes/inkythuatso/imgs/social/004-twitter.svg" alt="">
                        </span>
                    </a>
                </div>
                <div class="clearfix"></div>

            </div>

            <div class="col-12 col-md-3">
                <div class='supper-content style-origin' id='supper-banner-global-footer'><p><a href="https://inkythuatso.com/quy-dinh-ve-hang-hoa-dich-vu-privacy-policy-867.html" rel="nofollow">Điều khoản sử dụng</a></p>
<p><a href="https://inkythuatso.com/cong-ty-in-ky-thuat-so-tai-tphcm/chinh-sach-bao-mat-thong-tin-681.html" rel="nofollow">Chính sách bảo mật</a></p>
<p><a href="https://inkythuatso.com/cong-ty-in-ky-thuat-so-tai-tphcm/chinh-sach-doi-tra-hang-hoan-tien-680.html" rel="nofollow">Chính sách đổi trả  </a> </p>
<p><a href="https://inkythuatso.com/quy-dinh-va-hinh-thuc-thanh-toan-678.html" rel="nofollow">Hình thức thanh toán</a></p></div>            </div>

            <div class="text-left col-12 col-md-6">
                <nav class="menuPolicy mb-1 text-left">
                    <ul class='menu wrapperMenu'><li class=''>
                            <a target='_blank' title='Blog In Kỹ Thuật Số' href='https://blog.inkythuatso.com/'>Blog In Kỹ Thuật Số</a> 
                             
                        </li><li class=''>
                            <a target='_blank' title='News In Kỹ Thuật Số' href='https://news.google.com/publications/CAAqBwgKMKe6oAswtMS4Aw'>News In Kỹ Thuật Số</a> 
                             
                        </li><li class=''>
                            <a  title='Vector đẹp' href='https://inkythuatso.com/mau-thiet-ke-vector.html'>Vector đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Mẫu Logo' href='https://inkythuatso.com/tags/mau-logo-dep.html'>Mẫu Logo</a> 
                             
                        </li><li class=''>
                            <a  title='Hình ảnh đẹp' href='https://inkythuatso.com/hinh-anh-dep.html'>Hình ảnh đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Ảnh 4K' href='https://inkythuatso.com/tags/anh-4k.html'>Ảnh 4K</a> 
                             
                        </li><li class=''>
                            <a  title='Ảnh Hoa' href='https://inkythuatso.com/tags/anh-hoa.html'>Ảnh Hoa</a> 
                             
                        </li><li class=''>
                            <a  title='Ghép ảnh đẹp' href='https://inkythuatso.com/tags/ghep-anh-dep.html'>Ghép ảnh đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Background đẹp' href='https://inkythuatso.com/tags/phong-nen-dep.html'>Background đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Mockup đẹp' href='https://inkythuatso.com/tags/mockup-dep.html'>Mockup đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Icon đẹp' href='https://inkythuatso.com/tags/icon.html'>Icon đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Sticker đẹp' href='https://inkythuatso.com/tags/sticker-dep.html'>Sticker đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Mẫu Standee Đẹp' href='https://inkythuatso.com/tags/mau-standee-dep.html'>Mẫu Standee Đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Mẫu Card Visit Đẹp' href='https://inkythuatso.com/tags/mau-card-visit-dep.html'>Mẫu Card Visit Đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Mẫu Poster đẹp' href='https://inkythuatso.com/tags/mau-poster-dep.html'>Mẫu Poster đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Mẫu Banner đẹp' href='https://inkythuatso.com/tags/mau-banner-dep.html'>Mẫu Banner đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Mẫu Menu Đẹp' href='https://inkythuatso.com/tags/mau-menu-dep.html'>Mẫu Menu Đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Mẫu Tờ Rơi Đẹp' href='https://inkythuatso.com/tags/mau-to-roi-dep.html'>Mẫu Tờ Rơi Đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Mẫu Catalogue Đẹp' href='https://inkythuatso.com/tags/mau-catalogue-dep.html'>Mẫu Catalogue Đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Mẫu Brochure Đẹp' href='https://inkythuatso.com/tags/mau-brochure-dep.html'>Mẫu Brochure Đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Mẫu túi giấy đẹp' href='https://inkythuatso.com/tags/mau-tui-giay-dep.html'>Mẫu túi giấy đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Mẫu hashtag cầm tay' href='https://inkythuatso.com/tags/mau-hashtag-cam-tay.html'>Mẫu hashtag cầm tay</a> 
                             
                        </li><li class=''>
                            <a  title='Font Chữ Đẹp' href='https://inkythuatso.com/tags/font-chu-dep.html'>Font Chữ Đẹp</a> 
                             
                        </li><li class=''>
                            <a  title='Standee' href='https://inkythuatso.com/bang-bao-gia-standee-banner-cuon-824.html'>Standee</a> 
                             
                        </li></ul>                </nav>
                <div>
                    <a href="/cong-ty-in-ky-thuat-so/thong-tin-website-inkythuatso-com-1492.html">
                        <img
                                style="height: 40px"
                                src="https://cdn.inkythuatso.com/asset/home/img/aaa_dathongbao.png" alt=""></a>
                </div>
            </div>
        </div>
    </div>
</div>


<script type="application/ld+json">{"@context":"https:\/\/schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"name":"Trang ch\u1ee7","item":"https:\/\/inkythuatso.com\/"},{"@type":"ListItem","position":2,"name":"M\u1eabu thi\u1ebft k\u1ebf vector","item":"https:\/\/inkythuatso.com\/mau-thiet-ke-vector.html"},{"@type":"ListItem","position":3,"name":"T\u1ea3i m\u1eabu VNPAY logo file vector AI, EPS, JPEG, PNG, SVG","item":null}]}</script>
<script type="application/ld+json">{"@context":"https:\/\/schema.org","@type":"NewsArticle","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/inkythuatso.com\/"},"headline":"T\u1ea3i m\u1eabu VNPAY logo file vector AI, EPS, JPEG, PNG, SVG","image":["\/uploads\/thumbnails\/500\/https:\/\/inkythuatso.com\/uploads\/images\/2021\/12\/vnpay-logo-inkythuatso-01-13-16-26-42.jpg"],"datePublished":"2021-12-13T16:29:43+07:00","dateModified":"2021-12-13T16:35:27+07:00","author":{"@type":"Person","name":"Th\u1ea3o Inkythuatso"},"publisher":{"@type":"Organization","name":"inkythuatso.com","logo":{"@type":"ImageObject","url":"https:\/\/inkythuatso.com\/asset\/home\/img\/logo_inkts_mobile.png"}},"description":"Download VNPAY logo vector \u2713 VNPAY logo png \u2713 \u00dd ngh\u0129a logo VNPAY \u2713 VNPAY QR logo \u2713 VNPAY Scan \u2713 T\u1ea3i xu\u1ed1ng mi\u1ec5n ph\u00ed"}</script>
<script src="/assets/themes/covid-19-001/js/jquery-3.5.1.min.js?v="></script>
<script src="/assets/themes/covid-19-001/js/vue2.6.11.js?v="></script>
<script src="/assets/themes/covid-19-001/js/lazyload.min.js?v="></script>
<script src="/assets/themes/covid-19-001/js/main.js?v="></script>
<script src="/extension/hotline/HotLineFloat.umd.js?v=1715682172"></script>
<link rel="stylesheet" href="/assets/fonts/fontawesome5.3.6/css/all.min.css?v=">
<link rel="stylesheet" href="/extension/product/css/style.css?v=1715682172">
<div class="zalo-chat-widget" data-oaid="4355688727875163729" data-welcome-message="In Nhanh Giá Rẻ - Giao Hàng Toàn Quốc" data-autopopup="0" data-width="350" data-height="420"></div>

<script src="https://sp.zalo.me/plugins/sdk.js"></script><div id="fb-root"></div><script async defer crossorigin="anonymous" src="https://connect.facebook.net/vi_VN/sdk.js#xfbml=1&version=v10.0&appId=887444158033293&autoLogAppEvents=1"></script><script>
        window.fbAsyncInit = function() {
          FB.init({
            xfbml            : true,
            version          : 'v10.0', 
            autoLogAppEvents: true,
            debug: true
          });
        };

        (function(d, s, id) {
          var js, fjs = d.getElementsByTagName(s)[0];
          if (d.getElementById(id)) return;
          js = d.createElement(s); js.id = id;
          js.src = 'https://connect.facebook.net/vi_VN/sdk/xfbml.customerchat.js';
          fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));
 
      </script>

      <!-- Your Plugin chat code -->
      <div class="fb-customerchat"
        attribution="setup_tool"
        page_id="259107547519516">
      </div></body>
</html>

================
File: src/assets/images/wallet.svg
================
<svg width="13" height="12" viewBox="0 0 13 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10.7679 3.56526H2.65449C2.46634 3.56526 2.31395 3.42139 2.31395 3.24376C2.31395 3.06613 2.46634 2.92225 2.65449 2.92225H10.8275C11.0156 2.92225 11.168 2.77838 11.168 2.60075C11.168 2.06805 10.7106 1.63623 10.1464 1.63623H2.31395C1.56156 1.63623 0.951782 2.21193 0.951782 2.92225V9.35234C0.951782 10.0627 1.56156 10.6384 2.31395 10.6384H10.7679C11.3642 10.6384 11.8491 10.2057 11.8491 9.67384V4.52977C11.8491 3.99789 11.3642 3.56526 10.7679 3.56526ZM9.80584 7.74482C9.42976 7.74482 9.12476 7.45687 9.12476 7.10181C9.12476 6.74675 9.42976 6.4588 9.80584 6.4588C10.1819 6.4588 10.4869 6.74675 10.4869 7.10181C10.4869 7.45687 10.1819 7.74482 9.80584 7.74482Z" fill="white" fill-opacity="0.4"/>
</svg>

================
File: src/assets/images/wealth.svg
================
<svg width="13" height="13" viewBox="0 0 13 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.87413 1.59013C3.86503 1.59013 1.42548 3.75673 1.42548 6.42961C1.42548 7.58271 1.88116 8.64019 2.63908 9.47151C2.37175 10.6421 1.48294 11.6872 1.4723 11.6995C1.44938 11.7259 1.43405 11.7591 1.42819 11.7949C1.42234 11.8307 1.42622 11.8676 1.43936 11.901C1.45249 11.9345 1.47431 11.963 1.50211 11.983C1.52991 12.003 1.56246 12.0136 1.59575 12.0136C3.00601 12.0136 4.06445 11.2749 4.58825 10.8182C5.28402 11.1046 6.05662 11.2691 6.87413 11.2691C9.88323 11.2691 12.3228 9.1025 12.3228 6.42961C12.3228 3.75673 9.88323 1.59013 6.87413 1.59013ZM7.38494 8.62693V9.03549C7.38494 9.24117 7.23255 9.40776 7.0444 9.40776H6.70386C6.51571 9.40776 6.36332 9.24117 6.36332 9.03549V8.62297C6.12026 8.59156 5.88911 8.50222 5.68692 8.35633C5.55453 8.26071 5.54176 8.05131 5.65393 7.92869L6.02682 7.52106C6.10642 7.43404 6.22497 7.42241 6.32714 7.47383C6.39482 7.5078 6.46889 7.52548 6.54551 7.52548H7.24319C7.34237 7.52548 7.42283 7.43753 7.42283 7.32957C7.42283 7.24232 7.36919 7.16484 7.29257 7.14088L6.22689 6.80816C5.75332 6.66042 5.37532 6.23324 5.3136 5.69904C5.2274 4.95287 5.71863 4.31629 6.36332 4.23207V3.82374C6.36332 3.61806 6.51571 3.45147 6.70386 3.45147H7.0444C7.23255 3.45147 7.38494 3.61806 7.38494 3.82374V4.23626C7.628 4.26767 7.85914 4.35701 8.06134 4.50289C8.19373 4.59852 8.20649 4.80792 8.09433 4.93054L7.72144 5.33817C7.64184 5.42519 7.52329 5.43682 7.42112 5.3854C7.3526 5.35115 7.2781 5.33353 7.20275 5.33375H6.50507C6.40589 5.33375 6.32543 5.4217 6.32543 5.52965C6.32543 5.61691 6.37907 5.69438 6.45569 5.71835L7.52137 6.05106C7.99493 6.19904 8.37293 6.62598 8.43466 7.16019C8.52086 7.90612 8.02963 8.5427 7.38494 8.62693Z" fill="white" fill-opacity="0.4"/>
</svg>

================
File: src/component/auth/Button.js
================
import { useMemo } from "react";

const Button = ({
    heroiconsOutlinedevicePho,
    inputFieldPassword,
    propAlignSelf,
    propFlex,
    className,
    link,
}) => {
    const buttonStyle = useMemo(() => {
        return {
            alignSelf: propAlignSelf,
            flex: propFlex,

        };
    }, [propAlignSelf, propFlex]);

    return (
        <a
        href={link}
        className={`w-12 h-12 flex items-center justify-center bg-gray-200 rounded-full hover:bg-gray-300 ${className}`}
    >
        <img
            className="w-6 h-6"
            alt="Button Icon"
            src={heroiconsOutlinedevicePho}
        />
    </a>
    );
};
export default Button;

================
File: src/component/auth/CheckBox.js
================
import React, { useState } from 'react';

function Checkbox() {
  const [isChecked, setIsChecked] = useState(false);

  return (
    <div>
      {/* Sử dụng input type="checkbox" và thêm thuộc tính checked và onChange */}
      <input
        type="checkbox"
        checked={isChecked}
        onChange={() => setIsChecked(!isChecked)}
      />
      <label></label>
    </div>
  );
}

export default Checkbox;

================
File: src/component/auth/Oauth2.module.scss
================
.btn {
    &:hover {
        opacity: 0.6;
    }
    transition: all 0.3 ease;
}

================
File: src/component/auth/OAuth2Form.js
================
import Button from "./Button";
import FaceBookLogo from "../../assets/images/facebook-svgrepo-com.svg";
import GithubLogo from "../../assets/images/github-svgrepo-com.svg";
import GoogleLogo from "../../assets/images/google-color-svgrepo-com.svg";
function OAuth2Form() {
    return (
        <div className="flex flex-row items-center justify-center gap-4">
        <Button
            link="http://localhost:8080/oauth2/authorization/google"
            heroiconsOutlinedevicePho={GoogleLogo}
        />
        <Button
            link="http://localhost:8080/oauth2/authorization/facebook"
            heroiconsOutlinedevicePho={FaceBookLogo}
        />
        <Button
            link="http://localhost:8080/oauth2/authorization/github"
            heroiconsOutlinedevicePho={GithubLogo}
        />
    </div>
    
    );
}

export default OAuth2Form;

================
File: src/component/auth/ShowPassword.js
================
import { useState } from "react";
import eyeSlash from "../../assets/images/eye-slash.png";
function ShowPassword({ passInput }) {
    const [render, setRender] = useState("password");
    const handleShowPassword = (e) => {
        if (passInput === null) {
            return;
        }
        if (passInput.type === "password") {
            passInput.type = "text";
            setRender("text");
        } else {
            passInput.type = "password";
            setRender("password");
        }
    };
    return (
        <>
            {render !== "password" ? (
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 16 16"
                    fill="currentColor"
                    onClick={handleShowPassword}
                    className="h-4 cursor-pointer shrink-0 w-6 aspect-square"
                >
                    <path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z" />
                    <path
                        fillRule="evenodd"
                        d="M1.38 8.28a.87.87 0 0 1 0-.566 7.003 7.003 0 0 1 13.238.006.87.87 0 0 1 0 .566A7.003 7.003 0 0 1 1.379 8.28ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                        clipRule="evenodd"
                    />
                </svg>
            ) : (
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 16 16"
                    fill="currentColor"
                    onClick={handleShowPassword}
                    className="h-4 cursor-pointer shrink-0 w-6 aspect-square"
                >
                    <path
                        fillRule="evenodd"
                        d="M3.28 2.22a.75.75 0 0 0-1.06 1.06l10.5 10.5a.75.75 0 1 0 1.06-1.06l-1.322-1.323a7.012 7.012 0 0 0 2.16-3.11.87.87 0 0 0 0-.567A7.003 7.003 0 0 0 4.82 3.76l-1.54-1.54Zm3.196 3.195 1.135 1.136A1.502 1.502 0 0 1 9.45 8.389l1.136 1.135a3 3 0 0 0-4.109-4.109Z"
                        clipRule="evenodd"
                    />
                    <path d="m7.812 10.994 1.816 1.816A7.003 7.003 0 0 1 1.38 8.28a.87.87 0 0 1 0-.566 6.985 6.985 0 0 1 1.113-2.039l2.513 2.513a3 3 0 0 0 2.806 2.806Z" />
                </svg>
            )}
        </>
    );
}

export default ShowPassword;

================
File: src/component/card/index.js
================
import React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlayCircle } from '@fortawesome/free-solid-svg-icons';

const CourseOption = () => {
  return (
    <div className="max-w-sm rounded overflow-hidden shadow-lg bg-white text-center p-4">
      <div className="flex justify-center">
        <FontAwesomeIcon icon={faPlayCircle} className="text-4xl text-gray-700" />
      </div>
      <div className="px-6 py-4">
        <div className="font-bold text-xl mb-2">Khóa học</div>
        <p className="text-gray-700 text-base">
          Các bài giảng video, trắc nghiệm, bài tập coding, v.v. có thể giúp bạn tạo nên trải
          nghiệm học tập phong phú.
        </p>
      </div>
    </div>
  );
};

export default CourseOption;

================
File: src/component/cardTotal/CardSatiscal.module.scss
================
.wrap {
    border-radius: 8px;
}

.up {
    color: green;
}

.down {
    color: red;
}


.amount {
    font-size: 24px;
}

================
File: src/component/cardTotal/index.js
================
import styles from "./CardSatiscal.module.scss";
import clsx from "clsx";

function CardStatiscal({
    title = "Total Active Users",
    prevAmount = 12000,
    amount = 13100,
    up = true,
    currency,
}) {
    return (
        <div className={clsx(styles.wrap, " b-shadow-sm ")}>
            <div className="row p-3">
                <div className="text-sm">
                    <div className="font-medium mb-2 flex items-center">
                        {title}{" "}
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            aria-hidden="true"
                            role="img"
                            fill="#22c55e"
                            className={clsx(
                                "w-6 h-6 ml-1 component-iconify MuiBox-root css-v0h3dx iconify iconify--solar",
                                { [styles.up]: up }
                            )}
                            viewBox="0 0 24 24"
                        >
                            <path
                                fill="currentColor"
                                d="M5 17.75a.75.75 0 0 1-.488-1.32l7-6a.75.75 0 0 1 .976 0l7 6A.75.75 0 0 1 19 17.75z"
                                opacity=".5"
                            ></path>
                            <path
                                fill="currentColor"
                                fillRule="evenodd"
                                d="M4.43 13.488a.75.75 0 0 0 1.058.081L12 7.988l6.512 5.581a.75.75 0 1 0 .976-1.138l-7-6a.75.75 0 0 0-.976 0l-7 6a.75.75 0 0 0-.081 1.057"
                                clipRule="evenodd"
                            ></path>
                        </svg>
                    </div>
                    <div
                        className={clsx("text-end font-bold self-center", styles.amount)}
                    >
                        {amount.toLocaleString()} {currency}
                    </div>
                </div>
            </div>
        </div>
    );
}

export default CardStatiscal;

================
File: src/component/categories/CattegoryCard.js
================
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import * as dataApi from "../../api/apiService/dataService"

const TopCategories = ({ category }) => {
  return (
    <div className="bg-orange-100 shadow-md w-full h-20  rounded-lg p-4 m-2 lg:w-1/4 px-28 lg:justify-center">
      <h3 className="text-lg font-bold mb-2">{category.name}</h3>
      {/* <p className="text-gray-600">{category.count} Courses</p> */}
    </div>
  );
};

const CategoryCard = () => {
  const dispatch=useDispatch()
  const [categories,setCategories]=useState([])
  console.log(categories)
  const [courses, setCourses] = useState([]);
  useEffect(() => {
      const fetchApi = async () => {
          try {
              const result = await dataApi.getAllCategories(0, 100);
              console.log("Hello"+result.content)
              setCategories(result.content.content);
          } catch (error) {
              console.log("error: " + error);
          }
      };
      fetchApi();
  }, []);
  return (
    <div className="flex flex-wrap justify-center mb-6 sm:w-full">
      {categories &&categories.map((category,index) => (
        <TopCategories key={category.name} category={category} />
      ))}
    </div>
  );
};

export default CategoryCard;

================
File: src/component/combobox/Combobox.module.scss
================
@import "../../component/globalStyles/GlobalStyles.scss";

.cbb {
    position: relative;
    .formSelect:focus-visible + .label {
        color: rgb(33, 43, 54);
    }
    label {
        font-weight: 600;

        position: absolute;
        font-size: 14px;
        background-color: rgb(255, 255, 255);
        top: -50%;
        color: $label-gray;
        transform: translateY(120%);
        left: 14px;
    }
}

.formSelect {
    font-family: "Be Vietnam Pro";
    width: 100%;
    appearance: none;
    user-select: none;
    border-radius: 8px;
    cursor: pointer;
    color: currentcolor;
    border: 1px solid $border-color;
    // box-sizing: content-box;
    background: none;
    // height: 1.4375em;
    margin: 0px;
    -webkit-tap-highlight-color: transparent;
    display: block;
    min-width: 0px;
    animation-name: mui-auto-fill-cancel;
    animation-duration: 10ms;
    line-height: 23px;
    font-size: 0.875rem;
    font-weight: 400;
    padding: 16.5px 14px;
}

.svg {
    user-select: none;
    display: inline-block;
    fill: currentcolor;
    flex-shrink: 0;
    transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    font-size: 1.5rem;
    // position: absolute;
    pointer-events: none;
    color: white;
    right: 10px;
    width: 18px;
    height: 18px;
    top: calc(50% - 9px);
}

================
File: src/component/combobox/index.js
================
import clsx from "clsx";
import styles from "./Combobox.module.scss";
import { useState } from "react";

function Combobox({ title = "title", list = [], fValueChange = (temp) => {} }) {
    const [selected, setSelected] = useState();
    const handleChange = (event) => {
        const value = event.target.value;
        setSelected(value);
        fValueChange(event);
    };
    return (
        <div className={clsx(styles.cbb)}>
            <select
                onChange={handleChange}
                defaultValue={list.at(0)}
                className={clsx(styles.formSelect)}
            >
                {list.map((op, index) => {
                    return (
                        <>
                            <option key={index} selected>
                                {op}
                            </option>
                        </>
                    );
                })}
            </select>
            <label id="label" className={clsx(styles.label)} htmlFor="">
                {title}
            </label>

            <svg
                className={clsx(styles.svg)}
                focusable="false"
                aria-hidden="true"
                viewBox="0 0 24 24"
            >
                <path d="M12,16 C11.7663478,16.0004565 11.5399121,15.9190812 11.36,15.77 L5.36,10.77 C4.93474074,10.4165378 4.87653776,9.78525926 5.23,9.36 C5.58346224,8.93474074 6.21474074,8.87653776 6.64,9.23 L12,13.71 L17.36,9.39 C17.5665934,9.2222295 17.8315409,9.14373108 18.0961825,9.17188444 C18.3608241,9.2000378 18.6033268,9.33252029 18.77,9.54 C18.9551341,9.74785947 19.0452548,10.0234772 19.0186853,10.3005589 C18.9921158,10.5776405 18.8512608,10.8311099 18.63,11 L12.63,15.83 C12.444916,15.955516 12.2231011,16.0153708 12,16 Z"></path>
            </svg>
        </div>
    );
}

export default Combobox;

================
File: src/component/comment/Comment.module.scss
================
// .cmt {
//     img {
//         width: 40px;
//         height: 40px;
//         border-radius: 100rem;
//         margin-right: 10px;
//     }
// }

// .input {
//     font-size: 12px;
//     margin-top: 10px;
//     padding: 0 12px;
//     height: 30px;
//     background-color: transparent;
//     outline: none;
// }

// .cmtItem {
//     // width: 100%;
// }

// // .cmtContent {
// //     padding: 8px 12px;
// //     align-items: center;
// //     border-radius: 8px;
// //     background: #f0f2f5;
// //     font-size: 14px;
// //     min-height: 70px;

// //     span {
// //         margin-bottom: 6px;
// //     }
// // }

// .content {
//     margin-top: 12px;
//     font-size: 12px;
// }

// .cmtWrap {
//     max-height: 430px;
//     overflow-y: scroll;
// }

// .btnSend {
//     font-size: 14px;
//     background-color: black;
//     color: white;
//     padding: 6px 12px;
//     border-radius: 8px;
//     float: right;
//     margin: 0px 12px 8px 12px;
//     cursor: pointer;
//     &:hover {
//         opacity: 0.8;
//     }
// }

// // .input:focus {
// //     border-bottom: 1px solid black;
// //     outline: none;
// // }

// .cmtContent {
//     align-items: center;
//     font-size: 14px;
//     min-height: 70px;

//     .wrap {
//         padding: 8px 12px;
//         border-radius: 8px;
//         display: inline-block;
//         background: #f0f2f5;
//         span {
//             font-weight: 600;
//             margin-bottom: 6px;
//         }
//     }

//     .timeCmt {
//         font-size: 12px;
//     }

//     .actionsCmt {
//         padding: 2px;
//         font-weight: 500;
//         font-size: 12px;
//     }
// }
// .content {
//     margin-top: 4px;
//     font-size: 12px;
// }

// .cmtWrap {
//     max-height: 476px;
//     height: 476px;
//     padding-right: 10px;
//     overflow-y: scroll;
// }

// .replyBox {
//     margin-top: 12px;
//     margin-left: 50px;
//     display: none;
// }

// .cmt {
//     img {
//         width: 40px;
//         height: 40px;
//         border-radius: 100rem;
//         margin-right: 10px;
//     }
// }

// .subCmtWrap {
//     padding-top: 12px;
//     margin-left: 50px;
//     border-left: 1px solid #ccc;
//     padding-left: 12px;
// }

// .viewAll {
//     text-align: center;
//     align-items: center;
//     display: flex;
//     font-size: 12px;
//     font-weight: 500;
//     margin: 12px 0;
//     margin-left: 50px;
//     cursor: pointer;
//     padding: 4px 0;

//     svg {
//         width: 22px;
//         height: 20px;
//     }
//     &:hover {
//         opacity: 0.8;
//     }
//     display: none;
// }

// .subCmtWrap.cmtItem {
//     display: none;
// }

// .boxInput {
//     background: #e4e6eb;
//     border-radius: 8px;
// }
/* Comment.module.scss */

.commentsSection {
    margin-top: 20px;
  }
  
  .commentInputContainer {
    position: relative;
    display: flex;
    margin-bottom: 20px;
  }
  
  .avatar {
    width: 40px;
    height: 40px;
    border-radius: 100%;
    margin-right: 10px;
  }
  
  .commentInputBox {
    flex: 1;
    position: absolute;
  }
  .replyInputBox{
    width: 100%;
    height: 100%;
  }
  .commentInput,
  .replyInput {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 20px;
    resize: none;
    font-size: 14px;
    line-height: 1.5;
  }
  
  .sendButton {
    position: absolute;
    right: 10px;
    bottom: 10px;
    background-color: #1c1d1f;
    color: #fff;
    border: none;
    padding: 6px 12px;
    border-radius: 20px;
    cursor: pointer;
  }
  
  .sendButton:hover {
    background-color: #161718;
  }
  
  .commentsList {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  
  .commentContainer {
    display: flex;
    flex-direction: column;
  }
  
  .comment {
    display: flex;
  }
  
  .commentContent {
    flex: 1;
  }
  
  .commentHeader {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .commentAuthor {
    font-weight: 600;
    font-size: 14px;
  }
  
  .commentTime {
    font-size: 12px;
    color: #6a6f73;
  }
  
  .commentText {
    margin-top: 5px;
    font-size: 14px;
    line-height: 1.5;
  }
  
  .commentActions {
    margin-top: 10px;
  }
  
  .replyButton,
  .deleteButton {
    background: none;
    border: none;
    color: #1c1d1f;
    font-size: 14px;
    cursor: pointer;
    margin-right: 15px;
  }
  
  .replyButton:hover,
  .deleteButton:hover {
    text-decoration: underline;
  }
  
  .replyInputContainer {
    display: flex;
    margin-top: 15px;
    margin-left: 50px;
  }
  
  .repliesContainer {
    margin-left: 50px;
    margin-top: 20px;
    border-left: 1px solid #e0e0e0;
    padding-left: 20px;
  }

================
File: src/component/comment/commentItem/CommentItem.module.scss
================
.cmt {
    img {
        width: 40px;
        height: 40px;
        border-radius: 100rem;
        margin-right: 10px;
    }
}

.cmtItem {
    // width: 100%;
}

.cmtContent {
    align-items: center;
    font-size: 14px;
    min-height: 70px;

    .wrap {
        padding: 8px 12px;
        border-radius: 8px;
        display: inline-block;
        background: #f0f2f5;
        span {
            font-weight: 600;
            margin-bottom: 6px;
        }
    }

    .timeCmt {
        font-size: 12px;
    }

    .actionsCmt {
        padding: 2px;
        font-weight: 500;
        margin-right: 12px;
        font-size: 12px;
    }
}

.content {
    margin-top: 4px;
    font-size: 12px;
}

.subCmtWrap {
    margin-top: 12px;
    margin-left: 50px;
    border-left: 1px solid #ccc;
    padding-left: 12px;
}

.subCmtWrap.cmtItem {
    display: none;
}

================
File: src/component/comment/commentItem/index.js
================
import React from "react";
import moment from "moment";
import clsx from "clsx";
import styles from "./styles.module.css"; // Assuming you have a CSS module

const Comment = ({
    comment,
    handleReply,
    handleSendComment,
    subComment,
    setSubComment,
    showReplyBox,
    avatar,
}) => {
    const timeElapsed = moment(comment.date).fromNow();
    return (
        <div className={clsx(styles.cmtItem, "flex flex-col flex-none")}>
            <div className={styles.cmt}>
                <img src={avatar} alt="avatar" />
                <div className={styles.cmtContent}>
                    <div className={styles.wrap}>
                        <span>{comment.author}</span>
                        {comment.text}
                    </div>
                    <div className={styles.timeCmt}>{timeElapsed}</div>
                    <div className={styles.actionsCmt}>
                        <button onClick={() => handleReply(comment.id)}>Reply</button>
                    </div>
                </div>
            </div>
            {comment.children &&
                comment.children.map((childComment, ind) => (
                    <Comment
                        key={ind}
                        comment={childComment}
                        handleReply={handleReply}
                        handleSendComment={handleSendComment}
                        subComment={subComment}
                        setSubComment={setSubComment}
                        showReplyBox={showReplyBox}
                        avatar={avatar}
                    />
                ))}
        </div>
    );
};

================
File: src/component/comment/index.js
================
import React, { useEffect, useState } from "react";
import clsx from "clsx";
import styles from "./Comment.module.scss";
import avatarPlaceholder from "../../assets/images/Avatar.png";
import { over } from "stompjs";
import SockJS from "sockjs-client";
import { useSelector } from "react-redux";
import * as dataApi from "../../api/apiService/dataService";
import moment from "moment";
import { toast } from "sonner";

let stompClient = null;

export default function Comment({ courseId, lessonId }) {
  const userInfo = useSelector((state) => state.login.user);
  const initComment = {
    avatar: userInfo.avatar,
    email: userInfo.email,
    userName: `${userInfo.firstName} ${userInfo.lastName}`,
    lessonId,
  };

  const [comments, setComments] = useState([]);
  const [showReplyBox, setShowReplyBox] = useState(-1);
  const [subComment, setSubComment] = useState(initComment);
  const [comment, setComment] = useState(initComment);

  useEffect(() => {
    if (!lessonId) return;

    connect();
    fetchComments();

    return () => {
      if (stompClient) {
        stompClient.disconnect();
        console.log("Disconnected from WebSocket.");
      }
    };
  }, [lessonId]);

  const fetchComments = async () => {
    try {
      const result = await dataApi.getComments(lessonId);
      setComments(result.content.content);
    } catch (error) {
      console.log("Error fetching comments:", error);
      toast.error("Failed to load comments.");
    }
  };

  const connect = () => {
    const Sock = new SockJS("http://localhost:8080/ws");
    stompClient = over(Sock);
    stompClient.connect({}, () => {
      console.log("WebSocket connected successfully.");
      onConnected();
    }, onError);
  };

  const onConnected = () => {
    if (stompClient) {
      console.log(`Subscribing to comments for lesson: ${lessonId}`);
      stompClient.subscribe(`/comment/lesson/${lessonId}`, onMessageReceived);
    }
  };

  const onError = (err) => {
    console.log("WebSocket connection error:", err);
  };

  const onMessageReceived = (payload) => {
    const payloadData = JSON.parse(payload.body);
    console.log("WebSocket message received:", payloadData);
    setComments((prev) => [payloadData, ...prev]);
  };

  const sendValue = (sub) => {
    if (stompClient) {
        const data = sub ? { ...subComment } : { ...comment };
        console.log("Sending data:", data);
        // Send to WebSocket
        stompClient.send(`/app/comment/lesson/${lessonId}`, {}, JSON.stringify(data));
        // Clear the input field
        sub
            ? setSubComment({ ...subComment, content: "" })
            : setComment({ ...comment, content: "" });
    } else {
        console.log("WebSocket is not connected.");
    }
};


  const handleSendComment = (sub) => {
    sendValue(sub);
    setShowReplyBox(-1);
  };

  const handleReply = (cmt) => {
    setShowReplyBox(cmt.id);
    setSubComment({
      ...subComment,
      content: "",
      parentId: cmt.id,
      replyToUser: cmt.userEmail,
      replyToUserName: cmt.userName,
    });
  };

  const getReplies = (commentId) => {
    return comments.filter((c) => c.parentId === commentId);
  };

  const renderComments = (commentList) => {
    return commentList.map((cmt, ind) => {
      const timeElapsed = moment(cmt.date).fromNow();
      const replies = getReplies(cmt.id);

      return (
        <div key={cmt.id} className="flex flex-col">
          <div className="flex items-start space-x-4">
            <img
              src={cmt.avatar || avatarPlaceholder}
              alt="User Avatar"
              className="w-10 h-10 rounded-full"
            />
            <div className="flex-1">
              <div className="flex items-center space-x-2">
                <span className="font-semibold text-gray-800">{cmt.userName}</span>
                <span className="text-sm text-gray-500">{timeElapsed}</span>
              </div>
              <p className="mt-1 text-gray-700">{cmt.content}</p>
              <button
                onClick={() => handleReply(cmt)}
                className="mt-2 text-sm text-blue-500 hover:underline"
              >
                Reply
              </button>
            </div>
          </div>

          {showReplyBox === cmt.id && (
            <div className="ml-14 mt-4">
              <textarea
                value={subComment.content}
                onChange={(e) =>
                  setSubComment({ ...subComment, content: e.target.value })
                }
                className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500"
                placeholder={`Reply to ${cmt.userName}`}
                rows={2}
              />
              <div className="flex justify-end mt-2">
                <button
                  onClick={() => handleSendComment(true)}
                  className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
                >
                  Send
                </button>
              </div>
            </div>
          )}

          {replies.length > 0 && (
            <div className="ml-14 mt-4 space-y-4">
              {renderComments(replies)}
            </div>
          )}
        </div>
      );
    });
  };

  return (
    <div className="mt-8">
      {/* Comment Input */}
      <div className="flex items-start space-x-4">
        <img
          src={userInfo.avatar || avatarPlaceholder}
          alt="User Avatar"
          className="w-10 h-10 rounded-full"
        />
        <div className="flex-1">
          <textarea
            value={comment.content}
            onChange={(e) => setComment({ ...comment, content: e.target.value })}
            className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500"
            placeholder="Add a comment..."
            rows={3}
          />
          <div className="flex justify-end mt-2">
            <button
              onClick={() => handleSendComment(false)}
              className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
            >
              Send
            </button>
          </div>
        </div>
      </div>

      {/* Comments List */}
      <div className="mt-8 space-y-6">
        {renderComments(
          comments.filter((c) => c.parentId === 0 || c.parentId === null)
        )}
      </div>
    </div>
  );
}

================
File: src/component/dashboard/leftNavDash/index.js
================
import styles from "./LeftNavDash.module.scss";
import clsx from "clsx";
import appDash from "../../../assets/images/app_dash.svg";
import eDash from "../../../assets/images/ecommerce_dash.svg";
import icUser from "../../../assets/images/ic_user.svg";
import icCourse from "../../../assets/images/icCourse.svg";
import { Link } from "react-router-dom";
import { ChevronLeftIcon, ChevronRightIcon } from "@heroicons/react/20/solid";
import { useState } from "react";

function LeftNavDash() {
    const [close, setClose] = useState(false);
    const [listOpen, setListOpen] = useState([]);

    const handleOnSub = (e) => {
        const id = e.currentTarget.id;
        if (listOpen.includes(id)) {
            setListOpen((prev) => prev.filter((item) => item !== id));
        } else {
            setListOpen([...listOpen, id]);
        }
    };
    const subItemClickHandle = (e) => {
        console.log(e.currentTarget.id);
        var element = e.currentTarget;
        element.classList.toggle(clsx(styles.active));

        switch (element.id) {
            case "list":
                break;
            default:
                break;
        }
    };

    const handleCloseNavBar = () => {
        setClose(!close);
    };

    return (
        <div
            className={clsx(styles.Wrapper, "fixed z-header", {
                [styles.close]: close,
            })}
        >
            <div
                className={clsx(styles.btnClose, "b-shadow")}
                onClick={handleCloseNavBar}
            >
                {!close && <ChevronLeftIcon></ChevronLeftIcon>}
                {close && <ChevronRightIcon></ChevronRightIcon>}
            </div>
            <nav className={clsx(styles.container)}>
                <div className={clsx(styles.sectionNav)}>
                    <li
                        className={clsx(styles.title, {
                            [styles.close]: close,
                        })}
                    >
                        OVERVIEW
                    </li>
                    <div className={clsx(styles.listItem)}>
                        <Link className={clsx(styles.actionLink)} to="/admin">
                            <span className={clsx(styles.icon)}>
                                <img src={appDash} alt="" />
                            </span>
                            <span
                                className={clsx(
                                    styles.nameAction,
                                    styles.label
                                )}
                            >
                                App
                            </span>
                        </Link>
                    </div>
                </div>
                <div className={clsx(styles.sectionNav)}>
                    <li
                        className={clsx(styles.title, {
                            [styles.close]: close,
                        })}
                    >
                        Manager
                    </li>
                    <div className={clsx(styles.listItem)}>
                        <div
                            id="userLink"
                            className={clsx(styles.actionLink, {
                                [styles.active]: listOpen.includes("userLink"),
                            })}
                            onClick={handleOnSub}
                        >
                            <span className={clsx(styles.icon)}>
                                <img src={icUser} alt="" />
                            </span>
                            <span
                                className={clsx(
                                    styles.nameAction,
                                    styles.label
                                )}
                            >
                                User
                            </span>
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                aria-hidden="true"
                                role="img"
                                className="arrow MuiBox-root css-3o0h5k iconify iconify--eva"
                                width="1em"
                                height="1em"
                                viewBox="0 0 24 24"
                            >
                                <path
                                    fill="currentColor"
                                    d="M10 19a1 1 0 0 1-.64-.23a1 1 0 0 1-.13-1.41L13.71 12L9.39 6.63a1 1 0 0 1 .15-1.41a1 1 0 0 1 1.46.15l4.83 6a1 1 0 0 1 0 1.27l-5 6A1 1 0 0 1 10 19"
                                ></path>
                            </svg>
                        </div>
                        {listOpen.includes("userLink") && (
                            <div
                                id="subUser"
                                className={clsx(styles.subContent, {
                                    "d-block": !close,
                                })}
                            >
                                <ul className={clsx(styles.subList)}>
                                    <Link
                                        to="/admin/user/list"
                                        id="list"
                                        onClick={subItemClickHandle}
                                        className={clsx(styles.subItem)}
                                    >
                                        <li className="d-flex">
                                            <span
                                                className={clsx(styles.dotItem)}
                                            ></span>
                                            <span className={clsx(styles.text)}>
                                                List
                                            </span>
                                        </li>
                                    </Link>

                                    <Link
                                        to="/admin/user/create"
                                        onClick={subItemClickHandle}
                                        className={clsx(styles.subItem)}
                                    >
                                        <li className="d-flex">
                                            <span
                                                className={clsx(styles.dotItem)}
                                            ></span>
                                            <span className={clsx(styles.text)}>
                                                Create
                                            </span>
                                        </li>
                                    </Link>
                                    <Link
                                        className={clsx(styles.subItem)}
                                        to="/admin/user/historyDelete"
                                    >
                                        <li className="d-flex">
                                            <span
                                                className={clsx(styles.dotItem)}
                                            ></span>
                                            <span className={clsx(styles.text)}>
                                                History Delete
                                            </span>
                                        </li>
                                    </Link>
                                </ul>
                            </div>
                        )}
                        <div
                            onClick={handleOnSub}
                            id="courseLink"
                            className={clsx(styles.actionLink, {
                                [styles.active]:
                                    listOpen.includes("courseLink"),
                            })}
                        >
                            <span className={clsx(styles.icon)}>
                                <img src={icCourse} alt="" />
                            </span>
                            <span
                                className={clsx(
                                    styles.nameAction,
                                    styles.label
                                )}
                            >
                                Course
                            </span>
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                aria-hidden="true"
                                role="img"
                                className="arrow MuiBox-root css-3o0h5k iconify iconify--eva"
                                width="1em"
                                height="1em"
                                viewBox="0 0 24 24"
                            >
                                <path
                                    fill="currentColor"
                                    d="M10 19a1 1 0 0 1-.64-.23a1 1 0 0 1-.13-1.41L13.71 12L9.39 6.63a1 1 0 0 1 .15-1.41a1 1 0 0 1 1.46.15l4.83 6a1 1 0 0 1 0 1.27l-5 6A1 1 0 0 1 10 19"
                                ></path>
                            </svg>
                        </div>
                        {listOpen.includes("courseLink") && (
                            <div
                                id="subCourse"
                                className={clsx(styles.subContent, {
                                    "d-block": !close,
                                })}
                            >
                                <ul className={clsx(styles.subList)}>
                                    <Link
                                        className={clsx(styles.subItem)}
                                        to="/admin/course/list"
                                    >
                                        <li className="d-flex">
                                            <span
                                                className={clsx(styles.dotItem)}
                                            ></span>
                                            <span className={clsx(styles.text)}>
                                                List
                                            </span>
                                        </li>
                                    </Link>
                                    <Link
                                        className={clsx(styles.subItem)}
                                        to="/admin/course/create"
                                    >
                                        <li className="d-flex">
                                            <span
                                                className={clsx(styles.dotItem)}
                                            ></span>
                                            <span className={clsx(styles.text)}>
                                                Create
                                            </span>
                                        </li>
                                    </Link>
                                    <Link
                                        className={clsx(styles.subItem)}
                                        to="/admin/course/historyDelete"
                                    >
                                        <li className="d-flex">
                                            <span
                                                className={clsx(styles.dotItem)}
                                            ></span>
                                            <span className={clsx(styles.text)}>
                                                History Delete
                                            </span>
                                        </li>
                                    </Link>
                                </ul>
                            </div>
                        )}

                        <div
                            id="categoryLink"
                            className={clsx(styles.actionLink, {
                                [styles.active]:
                                    listOpen.includes("categoryLink"),
                            })}
                            onClick={handleOnSub}
                        >
                            <span className={clsx(styles.icon)}>
                                <svg
                                    className="transform-none"
                                    xmlns="http://www.w3.org/2000/svg"
                                    height="24"
                                    viewBox="0 -960 960 960"
                                    width="24"
                                    fill="#768490"
                                >
                                    <path d="m260-520 220-360 220 360H260ZM700-80q-75 0-127.5-52.5T520-260q0-75 52.5-127.5T700-440q75 0 127.5 52.5T880-260q0 75-52.5 127.5T700-80Zm-580-20v-320h320v320H120Zm580-60q42 0 71-29t29-71q0-42-29-71t-71-29q-42 0-71 29t-29 71q0 42 29 71t71 29Zm-500-20h160v-160H200v160Zm202-420h156l-78-126-78 126Zm78 0ZM360-340Zm340 80Z" />
                                </svg>
                            </span>
                            <span
                                className={clsx(
                                    styles.nameAction,
                                    styles.label
                                )}
                            >
                                Category
                            </span>
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                aria-hidden="true"
                                role="img"
                                className="arrow MuiBox-root css-3o0h5k iconify iconify--eva"
                                width="1em"
                                height="1em"
                                viewBox="0 0 24 24"
                            >
                                <path
                                    fill="currentColor"
                                    d="M10 19a1 1 0 0 1-.64-.23a1 1 0 0 1-.13-1.41L13.71 12L9.39 6.63a1 1 0 0 1 .15-1.41a1 1 0 0 1 1.46.15l4.83 6a1 1 0 0 1 0 1.27l-5 6A1 1 0 0 1 10 19"
                                ></path>
                            </svg>
                        </div>
                        {listOpen.includes("categoryLink") && (
                            <div
                                id="subCategory"
                                className={clsx(styles.subContent, {
                                    "d-block": close === false,
                                })}
                            >
                                <ul className={clsx(styles.subList)}>
                                    <Link
                                        className={clsx(styles.subItem)}
                                        to="/admin/category/list"
                                    >
                                        <li className="d-flex">
                                            <span
                                                className={clsx(styles.dotItem)}
                                            ></span>
                                            <span className={clsx(styles.text)}>
                                                List
                                            </span>
                                        </li>
                                    </Link>
                                    <Link
                                        className={clsx(styles.subItem)}
                                        to="/admin/category/create"
                                    >
                                        <li className="d-flex">
                                            <span
                                                className={clsx(styles.dotItem)}
                                            ></span>
                                            <span className={clsx(styles.text)}>
                                                Create
                                            </span>
                                        </li>
                                    </Link>
                                    <Link
                                        className={clsx(styles.subItem)}
                                        to="/admin/category/historyDelete"
                                    >
                                        <li className="d-flex">
                                            <span
                                                className={clsx(styles.dotItem)}
                                            ></span>
                                            <span className={clsx(styles.text)}>
                                                History Delete
                                            </span>
                                        </li>
                                    </Link>
                                </ul>
                            </div>
                        )}
                        <div
                            id="invoiceLink"
                            className={clsx(styles.actionLink, {
                                [styles.active]:
                                    listOpen.includes("invoiceLink"),
                            })}
                            onClick={handleOnSub}
                        >
                            <span className={clsx(styles.icon)}>
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    viewBox="0 0 16 16"
                                    fill="#768490"
                                    className="w-6 h-6"
                                >
                                    <path
                                        fillRule="evenodd"
                                        d="M1 3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V3Zm9 3a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm-6.25-.75a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5ZM11.5 6A.75.75 0 1 1 13 6a.75.75 0 0 1-1.5 0Z"
                                        clipRule="evenodd"
                                    />
                                    <path d="M13 11.75a.75.75 0 0 0-1.5 0v.179c0 .15-.138.28-.306.255A65.277 65.277 0 0 0 1.75 11.5a.75.75 0 0 0 0 1.5c3.135 0 6.215.228 9.227.668A1.764 1.764 0 0 0 13 11.928v-.178Z" />
                                </svg>
                            </span>
                            <span
                                className={clsx(
                                    styles.nameAction,
                                    styles.label
                                )}
                            >
                                Invoice
                            </span>
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                aria-hidden="true"
                                role="img"
                                className="arrow MuiBox-root css-3o0h5k iconify iconify--eva"
                                width="1em"
                                height="1em"
                                viewBox="0 0 24 24"
                            >
                                <path
                                    fill="currentColor"
                                    d="M10 19a1 1 0 0 1-.64-.23a1 1 0 0 1-.13-1.41L13.71 12L9.39 6.63a1 1 0 0 1 .15-1.41a1 1 0 0 1 1.46.15l4.83 6a1 1 0 0 1 0 1.27l-5 6A1 1 0 0 1 10 19"
                                ></path>
                            </svg>
                        </div>
                        {listOpen.includes("invoiceLink") && (
                            <div
                                id="subInvoice"
                                className={clsx(styles.subContent, {
                                    "d-block": close === false,
                                })}
                            >
                                <ul className={clsx(styles.subList)}>
                                    <Link
                                        className={clsx(styles.subItem)}
                                        to="/admin/invoice/list"
                                    >
                                        <li className="d-flex">
                                            <span
                                                className={clsx(styles.dotItem)}
                                            ></span>
                                            <span className={clsx(styles.text)}>
                                                List
                                            </span>
                                        </li>
                                    </Link>
                                    <Link
                                        className={clsx(styles.subItem)}
                                        to="/admin/category/create"
                                    >
                                        <li className="d-flex">
                                            <span
                                                className={clsx(styles.dotItem)}
                                            ></span>
                                            <span className={clsx(styles.text)}>
                                                Create
                                            </span>
                                        </li>
                                    </Link>
                                    <Link
                                        className={clsx(styles.subItem)}
                                        to="/admin/invoice/historyDelete"
                                    >
                                        <li className="d-flex">
                                            <span
                                                className={clsx(styles.dotItem)}
                                            ></span>
                                            <span className={clsx(styles.text)}>
                                                History Delete
                                            </span>
                                        </li>
                                    </Link>
                                </ul>
                            </div>
                        )}
                    </div>
                </div>
            </nav>
        </div>
    );
}

export default LeftNavDash;

================
File: src/component/dashboard/leftNavDash/LeftNavDash.module.scss
================
@import "/src/component/globalStyles/GlobalStyles.scss";

$bg-hover: rgba(145, 158, 171, 0.08);

$border-color: #e9ecee;
.Wrapper {
    box-sizing: border-box;
    border-right: 1px solid $border-color;
    margin-top: $h-admin-header;
    background-color: white;
    width: 280px;
    height: calc(100vh - #{$h-admin-header}) !important;
    transition: all 0.3s ease-in-out;
    position: sticky;
    top: $h-admin-header;
}

.container {
    padding-left: 16px;
    width: 100%;
    height: 100%;
    overflow-y: scroll;
}

.title {
    box-sizing: border-box;
    list-style: none;
    font-size: 14px;
    cursor: pointer;
    font-weight: 800;
    line-height: 1.5;
    text-transform: uppercase;
    display: inline-flex;
    color: rgb(145, 158, 171);
    margin-bottom: 4px;
    padding: 16px 8px 8px 12px;
    transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;

    &:hover {
        color: rgb(33, 43, 54);
    }
}

.actionLink {
    -webkit-tap-highlight-color: transparent;
    background-color: transparent;
    outline: 0px;
    border: 0px;

    margin: 0px 0px 4px;
    cursor: pointer;
    user-select: none;
    display: flex;
    flex-grow: 1;
    justify-content: flex-start;
    align-items: center;
    text-align: left;
    transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    border-radius: 8px;
    color: rgb(99, 115, 129);
    padding: 4px 8px 4px 12px;
    min-height: 44px;

    &:hover {
        text-decoration: none;
        background-color: rgba(145, 158, 171, 0.08);
    }
    svg {
        width: 28px;
    }
}

.icon {
    width: 24px;
    height: 24px;
    flex-shrink: 0;
    margin-right: 16px;
    svg {
        transform: none !important;
        color: #e9ebed;
    }
}

.nameAction {
    font-size: 14px;
}

.label {
    width: 100%;
    max-width: 100%;
    display: block;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    line-height: 1.57143;
    font-size: 14px;
    font-weight: 600;
    text-transform: capitalize;
}

.dotItem {
    width: 24px;
    height: 24px;
    flex-shrink: 0;
    margin-right: 16px;
    display: flex;
    -webkit-box-align: center;
    align-items: center;
    -webkit-box-pack: center;
    justify-content: center;
    &::after {
        display: block;
        content: "";
        width: 4px;
        height: 4px;
        border-radius: 50%;
        background-color: rgb(145, 158, 171);
        transition: transform 200ms;
    }
}

.subContent {
    display: none;
    min-height: 0px;
    height: auto;
    transition-duration: 300ms;
    width: 100%;

    overflow: visible;
    transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
}

.subItem {
    -webkit-tap-highlight-color: transparent;
    background-color: transparent;
    outline: 0px;
    border: 0px;
    margin: 0px 0px 4px;
    cursor: pointer;
    user-select: none;
    vertical-align: middle;
    appearance: none;
    display: flex;
    -webkit-box-flex: 1;
    flex-grow: 1;
    -webkit-box-pack: start;
    justify-content: flex-start;
    -webkit-box-align: center;
    align-items: center;
    position: relative;
    text-decoration: none;
    min-width: 0px;
    box-sizing: border-box;
    text-align: left;
    transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    border-radius: 8px;
    color: rgb(99, 115, 129);
    padding: 4px 8px 4px 12px;
    min-height: 36px;
    &:hover {
        background-color: $bg-hover;
    }
}

.listItem {
    transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    transition: all 0.3s linear;
    transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    /* transition-behavior: normal; */
    /* transition-duration: 150ms; */
    /* transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); */
    /* transition-delay: 0ms; */
    /* transition-property: background-color;
    */
}

.text {
    font-size: 15px;
}

.actionLink.active {
    background-color: rgba(0, 167, 111, 0.08);
    color: rgb(0, 167, 111);
}

.btnClose {
    position: absolute;
    cursor: pointer;
    top: 40px;
    right: -16px;
    width: 32px;
    height: 32px;
    border-radius: 100rem;
    color: #6b8399;
    background-color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    svg {
        width: 22px;
    }
}

.close {
    width: 84px;
    .container {
        pointer-events: none;
    }
}

.title.close {
    display: none;
}

================
File: src/component/dashboard/MainDash/index.js
================
import clsx from "clsx";
import styles from "./MainDash.module.scss";
import { Link } from "react-router-dom";
import CoursesComponent from "../../ladingComponent/CourseCard";
import { adminRoutes } from "../../../router/index";
import ListCourse from "../../../pages/admin/Course/List";
import { Routes, Route, Router } from "react-router-dom";
function MainDash() {
    return (
        <Router>
            <div className={clsx(styles.wrapper)}>
                <Routes>
                    {adminRoutes.map((route, index) => {
                        const Page = route.component;
                        return (
                            <Route
                                key={index}
                                path={route.path}
                                element={<Page></Page>}
                            ></Route>
                        );
                    })}
                </Routes>
                <div className={clsx(styles.container)}>
                    <div className={clsx(styles.listProduct)}>
                        <CoursesComponent></CoursesComponent>
                    </div>
                </div>
            </div>
        </Router>
    );
}

export default MainDash;

================
File: src/component/dashboard/MainDash/MainDash.module.scss
================
@import ".././../../../node_modules/nice-select2/src/scss/nice-select2.scss";
@import "../leftNavDash/LeftNavDash.module.scss";

.wrapper {
    margin-right: 120px;
}

================
File: src/component/dashboard/NavigationTopBar.js
================
import styles from "./NavigationTopBar.module.scss";
import Avatar from "../../assets/images/Avatar.png";
import { useSelector } from "react-redux";
import clsx from "clsx";
import NotificationItem from "../notificationItem";
import Dropdown from "../dropDown";
import SearchBar from "../search"
const NavigationTopBar = () => {
    const user = useSelector((state) => state.login.user);
    return (
        <header className={styles.navigationTopBar1}>
            <div className={styles.navigationTopBar11}>
                <div className={styles.topBarBg} />
                <div className={styles.div}></div>
                <div className={styles.navLeftWrapper}></div>
                <div className={styles.navRight}>
                <SearchBar/>
                    <div className={styles.profile}>
                        <div
                            className={clsx(
                                styles.notification,
                                "flex items-center"
                            )}
                        >
                            <NotificationItem
                                iconBtn={
                                    <svg viewBox="0 0 448 512" className="bell">
                                        <path d="M224 0c-17.7 0-32 14.3-32 32V49.9C119.5 61.4 64 124.2 64 200v33.4c0 45.4-15.5 89.5-43.8 124.9L5.3 377c-5.8 7.2-6.9 17.1-2.9 25.4S14.8 416 24 416H424c9.2 0 17.6-5.3 21.6-13.6s2.9-18.2-2.9-25.4l-14.9-18.6C399.5 322.9 384 278.8 384 233.4V200c0-75.8-55.5-138.6-128-150.1V32c0-17.7-14.3-32-32-32zm0 96h8c57.4 0 104 46.6 104 104v33.4c0 47.9 13.9 94.6 39.7 134.6H72.3C98.1 328 112 281.3 112 233.4V200c0-57.4 46.6-104 104-104h8zm64 352H224 160c0 17 6.7 33.3 18.7 45.3s28.3 18.7 45.3 18.7s33.3-6.7 45.3-18.7s18.7-28.3 18.7-45.3z"></path>
                                    </svg>
                                }
                            ></NotificationItem>
                        </div>
                       

                        <div className={styles.userInfo}>
                            <div className={styles.userName}>
                                <b
                                    className={clsx(
                                        styles.joneAly,
                                        "uppercase"
                                    )}
                                >
                                    {user &&
                                        user.firstName + " " + user.lastName}
                                </b>
                                <div className={clsx(styles.admin, "")}>
                                    Role
                                </div>
                            </div>
                        </div>
                        <Dropdown
                            admin={true}
                            elementClick={
                                <img
                                    className="border circle object-cover w-10 h-10 border-gray-200 cursor-pointer"
                                    src={
                                        user && user.avatar
                                            ? user.avatar
                                            : Avatar
                                    }
                                    alt=""
                                />
                            }
                        ></Dropdown>
                        {/* <div className={styles.moreOptions}>
                            <img
                                className={styles.moreIcon}
                                alt=""
                                src={user.avatar ? user.avatar : Avatar}
                            />
                        </div> */}
                    </div>
                </div>
            </div>
        </header>
    );
};

export default NavigationTopBar;

================
File: src/component/dashboard/NavigationTopBar.module.scss
================
.navigationTopBar1 {
    font-family: "Be Vietnam Pro", "Helvetica Neue", Helvetica, Arial !important;
}

.div,
.topBarBg {
    position: relative;
    display: none;
}
.topBarBg {
    height: 70px;
    width: 1201px;
    background-color: var(--theme-colors-white);
    max-width: 100%;
}
.div {
    width: 28px;
    font-weight: 500;
    white-space: nowrap;
}
.h3,
.pathIcon {
    position: absolute;
}
.pathIcon {
    height: 96%;
    width: 100%;
    top: 0;
    right: 0;
    bottom: 4%;
    left: 0;
    max-width: 100%;
    overflow: hidden;
    max-height: 100%;
}
.h3 {
    margin: 0;
    top: calc(50% - 12.5px);
    left: 4.17%;
    font-size: inherit;
    font-weight: 500;
    font-family: inherit;
    white-space: nowrap;
    z-index: 1;
}
.icon {
    align-self: stretch;
    height: 25px;
    position: relative;
    opacity: 0.9;
    mix-blend-mode: normal;
    z-index: 1;
}
.bg,
.iconWrapper {
    box-sizing: border-box;
}
.iconWrapper {
    width: 24px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-end;
    padding: 0 0 var(--padding-7xs);
}
.bg {
    height: 100%;
    width: 100%;
    position: absolute;
    margin: 0 !important;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    border-radius: var(--br-lgi);
    background-color: var(--color-ghostwhite);
    border: 0.6px solid var(--color-lightgray);
}
.searchIcon {
    height: 15px;
    width: 15px;
    mix-blend-mode: normal;
}
.search,
.search1,
.searchIcon {
    position: relative;
    z-index: 1;
}
.search1 {
    width: 320px;
    border: 0;
    outline: 0;
    font-family: var(--font-nunito-sans);
    font-size: var(--font-size-sm);
    background-color: transparent;
    height: 19px;
    color: var(--color-gray-200);
    display: inline-block;
    mix-blend-mode: normal;
    padding: 0;
}

.searchIcon {
    cursor: pointer;
}

.search {
    flex: 1;
    flex-direction: row;
    align-items: flex-start;
    border-radius: var(--br-lgi);
    border: 1px solid var(--color-lightgray);
    padding: var(--padding-3xs) var(--padding-base-5) var(--padding-4xs);
    box-sizing: border-box;
    gap: var(--gap-sm-5);
}
.navLeft,
.navLeftWrapper,
.search {
    display: flex;
    justify-content: flex-start;
    max-width: 100%;
}
.navLeft {
    flex-direction: row;
    align-items: flex-end;
    gap: var(--gap-5xl);
}
.navLeftWrapper {
    width: 436px;
    flex-direction: column;
    align-items: flex-start;
    padding: var(--padding-10xs) 0 0;
    box-sizing: border-box;
    font-size: var(--font-size-3xl);
}
.icon2,
.ovalIcon {
    max-width: 100%;
    overflow: hidden;
    max-height: 100%;
}
.icon2 {
    position: absolute;
    height: 83.61%;
    width: 82.76%;
    top: 16.39%;
    right: 17.24%;
    bottom: 0;
    left: 0;
    object-fit: contain;
}
.ovalIcon {
    height: 52.46%;
    width: 55.17%;
    top: 0;
    right: 0;
    bottom: 47.54%;
    left: 44.83%;
    z-index: 1;
}
.b,
.ovalIcon,
.ovalIcon1 {
    position: absolute;
}
.b {
    top: calc(50% - 15.25px);
    left: 58.62%;
    display: inline-block;
    min-width: 6.1px;
    white-space: nowrap;
    z-index: 2;
}
.ovalIcon1 {
    top: -1px;
    right: -1px;
    width: 18px;
    height: 18px;
    mix-blend-mode: normal;
    z-index: 3;
}
.icon1 {
    align-self: stretch;
    height: 30.5px;
    position: relative;
    z-index: 1;
}
.iconContainer {
    width: 29px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    padding: var(--padding-7xs) 0 0;
    box-sizing: border-box;
    font-size: var(--font-size-xs);
}
.flagIcon {
    width: 40px;
    height: 27px;
    position: relative;
    object-fit: cover;
}
.languageFlag {
    width: 45.1px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    padding: 0 var(--padding-7xs-1) 0 0;
    box-sizing: border-box;
}
.english1 {
    position: relative;
    font-weight: 600;
    white-space: nowrap;
}
.englishContainer {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    padding: var(--padding-8xs) 0 0;
}
.dropDownIcon {
    width: 8.2px;
    height: 4.7px;
    position: relative;
}
.dropdownMenu {
    flex-direction: column;
    padding: var(--padding-3xs-7) 0 0;
}
.dropdownMenu,
.english,
.englishWrapper {
    display: flex;
    align-items: flex-start;
    justify-content: flex-start;
}
.english {
    align-self: stretch;
    flex-direction: row;
    gap: var(--gap-2xs-9);
    z-index: 1;
}
.englishWrapper {
    width: 123.1px;
    flex-direction: column;
    padding: var(--padding-4xs) 0 0;
    box-sizing: border-box;
    color: var(--color-dimgray-100);
}
.man438081960720Icon {
    height: 44px;
    width: 44px;
    position: relative;
    object-fit: cover;
    min-height: 44px;
}
.admin,
.joneAly {
    position: relative;
    white-space: nowrap;
}
.admin {
    font-size: var(--font-size-xs);
    font-weight: 600;
    color: var(--color-dimgray-200);
}
.userInfo,
.userName {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    justify-content: flex-start;
}
.userName {
    gap: 4px;
}
.userInfo {
    margin-left: 12px;
    padding: var(--padding-10xs) var(--padding-7xs) 0 0;
}
.moreIcon {
    position: relative;
}
.moreOptions {
    overflow: hidden;
    width: 42px;
    height: 42px;
    border-radius: 100rem;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    /* padding: var(--padding-smi) 0 0; */
}
.moreOptions,
.navRight,
.profile {
    justify-content: flex-start;
}
.profile {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    gap: 6px;
    z-index: 1;
    color: var(--color-darkslategray-100);
}
.navRight {
    gap: var(--gap-7xl-5);
    text-align: left;
    font-size: var(--font-size-sm);
    color: var(--theme-colors-white);
    font-family: var(--font-nunito-sans);
}
.navRight,
.navigationTopBar1,
.navigationTopBar11 {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    max-width: 100%;
}
.navigationTopBar11 {
    padding-right: 100px !important;
    flex: 1;
    justify-content: space-between;
    padding: var(--padding-smi) var(--padding-12xl) var(--padding-smi)
        var(--padding-11xl);
    box-sizing: border-box;
    gap: var(--gap-xl);
}
.navigationTopBar1 {
    align-self: stretch;
    justify-content: flex-start;
    z-index: 1;
    text-align: center;
    font-size: var(--font-size-9xl);
    color: var(--color-gray-100);
    font-family: var(--font-lineawesome);
}
@media screen and (max-width: 900px) {
    .userName {
        display: none;
    }
}

================
File: src/component/dashboard/Sidebar/index.js
================
import React from "react";
import {
  IconButton,
  Typography,
  List,
  ListItem,
  ListItemPrefix,
  Accordion,
  AccordionHeader,
  AccordionBody,
  Drawer,
  Card,
} from "@material-tailwind/react";
import appDash from "../../../assets/images/app_dash.svg";
import icUser from "../../../assets/images/ic_user.svg";
import icCourse from "../../../assets/images/icCourse.svg";
import Avatar from "../../../assets/images/Avatar.png";
import {
  ChevronRightIcon,
  ChevronDownIcon,
  Bars3Icon,
  XMarkIcon,
} from "@heroicons/react/24/outline";
import { Link, useLocation } from "react-router-dom";
import { useSelector } from "react-redux";
import NotificationItem from "../../notificationItem";
import Dropdown from "../../dropDown";
import SearchBar from "../../search";

export default function SidebarWithBurgerMenu() {
  const [open, setOpen] = React.useState(null);
  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);
  const location = useLocation();
  const user = useSelector((state) => state.login.user);

  const handleOpen = (value) => {
    setOpen(open === value ? null : value);
  };

  const openDrawer = () => setIsDrawerOpen(true);
  const closeDrawer = () => setIsDrawerOpen(false);

  // Navigation data
  const navigationData = [
    {
      title: "OVERVIEW",
      items: [
        {
          label: "App",
          icon: appDash,
          link: "/admin",
        },
      ],
    },
    {
      title: "Manager",
      items: [
        {
          label: "User",
          icon: icUser,
          subItems: [
            { label: "List", link: "/admin/user/list" },
            { label: "Create", link: "/admin/user/create" },
            { label: "History Delete", link: "/admin/user/historyDelete" },
          ],
        },
        {
          label: "Test",
          icon: icUser,
          subItems: [
            { label: "List", link: "/admin/test/list" },
            { label: "Create", link: "/admin/test/create" },
            // { label: "History Delete", link: "/admin/user/historyDelete" },
          ],
        },
        {
          label: "Course",
          icon: icCourse,
          subItems: [
            { label: "List", link: "/admin/course/list" },
            { label: "Create", link: "/admin/course/create" },
            { label: "History Delete", link: "/admin/course/historyDelete" },
          ],
        },
        {
          label: "Writing Tasks",
          icon: icCourse, // You can replace this with an appropriate icon
          subItems: [
            { label: "List", link: "/admin/writing-task/list" },
            { label: "Create", link: "/admin/writing-task/create" },
          ],
        },
        
      ],
    },
  ];

  return (
    <>
      <IconButton variant="text" size="lg" onClick={openDrawer}>
        {isDrawerOpen ? (
          <XMarkIcon className="h-8 w-8 stroke-2" />
        ) : (
          <Bars3Icon className="h-8 w-8 stroke-2" />
        )}
      </IconButton>
      <Drawer
        open={isDrawerOpen}
        onClose={closeDrawer}
        overlay={false}
        className=""
      >
        <Card
          color="transparent"
          shadow={false}
          className="h-[calc(100vh-2rem)] w-full"
        >
          {/* User Info Section */}
          <div className="mb-4 flex items-center gap-4 p-4">
            {/* Notification Icon */}
            <div className="flex items-center">
              <NotificationItem
                iconBtn={
                  <svg viewBox="0 0 448 512" className="bell w-6 h-6">
                    <path d="M224 0c-17.7 0-32 14.3-32 32V49.9C119.5 61.4 64 124.2 64 200v33.4c0 45.4-15.5 89.5-43.8 124.9L5.3 377c-5.8 7.2-6.9 17.1-2.9 25.4S14.8 416 24 416H424c9.2 0 17.6-5.3 21.6-13.6s2.9-18.2-2.9-25.4l-14.9-18.6C399.5 322.9 384 278.8 384 233.4V200c0-75.8-55.5-138.6-128-150.1V32c0-17.7-14.3-32-32-32zm0 96h8c57.4 0 104 46.6 104 104v33.4c0 47.9 13.9 94.6 39.7 134.6H72.3C98.1 328 112 281.3 112 233.4V200c0-57.4 46.6-104 104-104h8zm64 352H224 160c0 17 6.7 33.3 18.7 45.3s28.3 18.7 45.3 18.7s33.3-6.7 45.3-18.7s18.7-28.3 18.7-45.3z"></path>
                  </svg>
                }
              />
            </div>

            {/* User Avatar and Info */}
            <div className="flex items-center gap-3">
              <Dropdown
                admin={true}
                elementClick={
                  <img
                    className="rounded-full object-cover w-12 h-12 border border-gray-200 cursor-pointer"
                    src={user?.avatar || Avatar}
                    alt="User Avatar"
                  />
                }
              />
              <div className="flex flex-col">
                <b className="uppercase">
                  {user ? `${user.firstName} ${user.lastName}` : "User Name"}
                </b>
                <div className="text-sm text-gray-500">
                  {user?.role || "Role"}
                </div>
              </div>
            </div>
          </div>

          {/* Optional Divider */}
          <hr className="my-2 border-blue-gray-50" />

          {/* Search Bar */}
          <div className="p-2">
            <SearchBar />
          </div>

          {/* Navigation List */}
          <List>
            {navigationData.map((section, index) => (
              <React.Fragment key={index}>
                <Typography
                  variant="small"
                  color="gray"
                  className="font-medium uppercase py-2 px-3"
                >
                  {section.title}
                </Typography>
                {section.items.map((item, idx) => {
                  const isActive = location.pathname.startsWith(item.link);
                  if (item.subItems) {
                    return (
                      <Accordion
                        key={idx}
                        open={open === item.label}
                        icon={
                          <ChevronDownIcon
                            strokeWidth={2.5}
                            className={`mx-auto h-4 w-4 transition-transform ${
                              open === item.label ? "rotate-180" : ""
                            }`}
                          />
                        }
                      >
                        <ListItem className="p-0">
                          <AccordionHeader
                            onClick={() => handleOpen(item.label)}
                            className="border-b-0 py-2 px-3"
                          >
                            <ListItemPrefix>
                              {typeof item.icon === "string" ? (
                                <img
                                  src={item.icon}
                                  alt={item.label}
                                  className="h-5 w-5"
                                />
                              ) : (
                                item.icon
                              )}
                            </ListItemPrefix>
                            <Typography
                              color="blue-gray"
                              className="mr-auto font-normal"
                            >
                              {item.label}
                            </Typography>
                          </AccordionHeader>
                        </ListItem>
                        <AccordionBody className="py-1">
                          <List className="p-0">
                            {item.subItems.map((subItem, subIdx) => (
                              <Link to={subItem.link} key={subIdx}>
                                <ListItem
                                  selected={
                                    location.pathname === subItem.link
                                  }
                                  className="py-2 px-3"
                                >
                                  <ListItemPrefix>
                                    <ChevronRightIcon
                                      strokeWidth={3}
                                      className="h-3 w-5"
                                    />
                                  </ListItemPrefix>
                                  {subItem.label}
                                </ListItem>
                              </Link>
                            ))}
                          </List>
                        </AccordionBody>
                      </Accordion>
                    );
                  } else {
                    return (
                      <Link to={item.link} key={idx}>
                        <ListItem selected={isActive} className="py-2 px-3">
                          <ListItemPrefix>
                            {typeof item.icon === "string" ? (
                              <img
                                src={item.icon}
                                alt={item.label}
                                className="h-5 w-5"
                              />
                            ) : (
                              item.icon
                            )}
                          </ListItemPrefix>
                          {item.label}
                        </ListItem>
                      </Link>
                    );
                  }
                })}
              </React.Fragment>
            ))}
          </List>
        </Card>
      </Drawer>
    </>
  );
}

================
File: src/component/dashboard/SideBar2/index.js
================
import React from 'react';
import { Card, Typography, List, ListItem, ListItemPrefix, ListItemSuffix, Chip } from "@material-tailwind/react";
import { PresentationChartBarIcon, ShoppingBagIcon, UserCircleIcon, Cog6ToothIcon, InboxIcon, PowerIcon } from "@heroicons/react/24/solid";
import { useMediaQuery } from '@mui/material';
import { Link, useNavigate } from 'react-router-dom';
import { useDispatch } from 'react-redux';

const Sidebar = () => {
    const navigate=useNavigate()
    console.log('=======================================================================');
    const isSmallScreen = useMediaQuery('(max-width: 868px)');
    const handleLogout=async()=>{
        navigate('/')
    }
    return (
        <Card className={`p-4 ${isSmallScreen ? 'fixed bottom-0 left-0 right-0 w-full ' : 'h-screen md:max-w-[20rem] w-60 shadow-blue-gray-900/5 shadow-xl '} `}>
            <div className="mb-2 p-4">
                <Typography variant="h5" color="blue-gray">
                {isSmallScreen ? null : 'Admin'}
                </Typography>
            </div>
            <List className={`md:flex ${isSmallScreen ? 'flex-row justify-between' : 'flex-col gap-4'}`}>
               <Link to='/admin'>
                <ListItem>
                    <ListItemPrefix>
                        <PresentationChartBarIcon className="h-5 w-5" />
                    </ListItemPrefix>
                    {isSmallScreen ? null : 'Dashboard'}
                </ListItem>
                </Link>
               <Link to='/admin/category/list'>
                 <ListItem>
                    <ListItemPrefix>
                        <ShoppingBagIcon className="h-5 w-5" />
                    </ListItemPrefix>
                    {isSmallScreen ? null : 'Categories'}
                </ListItem>
                </Link>
                   <Link to='/admin/writing/list'> 
                <ListItem>
                   <ListItemPrefix>
                        <InboxIcon className="h-5 w-5" />
                    </ListItemPrefix>
                    {isSmallScreen ? null : 'Writing'}
                    <ListItemSuffix>
                    </ListItemSuffix>
                </ListItem>
                    </Link>
                    <Link to='/admin/user/list'>
                <ListItem>
                    <ListItemPrefix>
                        <UserCircleIcon className="h-5 w-5" />
                    </ListItemPrefix>
                    {isSmallScreen ? null : 'User'}
                </ListItem>
                </Link>
                <Link to='/admin/course/list'>
                <ListItem>
                    <ListItemPrefix>
                        <Cog6ToothIcon className="h-5 w-5" />
                    </ListItemPrefix>
                    {isSmallScreen ? null : 'Courses'}
                </ListItem>
                </Link>
                <ListItem onClick={handleLogout}>
                    <ListItemPrefix>
                        <PowerIcon className="h-5 w-5" />
                    </ListItemPrefix>
                    {isSmallScreen ? null : 'Log Out'}
                </ListItem>
            </List>
        </Card>
    );
};

export default Sidebar;

================
File: src/component/dropDown/index.js
================
import { Menu, Transition } from "@headlessui/react";
import clsx from "clsx";
import styles from "./Menu.module.scss";
import { Fragment } from "react";
import avatarDefault from "../../assets/images/Avatar.png";
import { ChevronDownIcon } from "@heroicons/react/20/solid";
import { Link, useNavigate } from "react-router-dom";
import * as authApi from "../../api/apiService/authService";
import { useDispatch, useSelector } from "react-redux";
import loginSlice from "../../redux/reducers/loginSlice";

function Dropdown({ elementClick, ...props }) {
    const dispatch = useDispatch();
    const user = useSelector((state) => state.login.user);
    const navigate = useNavigate();
    const handleLogout = () => {
        const fetchApi = async () => {
            try {
                await authApi.logout();
                dispatch(loginSlice.actions.setLogout());
                navigate("/");
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };

    return (
        <div className="text-right flex items-center">
            <Menu as="div" className="relative text-left flex ml-2">
                <Menu.Button className="inline-flex items-center w-full justify-center rounded-md text-sm font-medium text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-white/75">
                    {elementClick
                        ? elementClick
                        : "Options" +
                          (
                              <ChevronDownIcon
                                  className="-mr-1 ml-2 h-5 w-5 text-violet-200 hover:text-violet-100"
                                  aria-hidden="true"
                              />
                          )}
                </Menu.Button>
                <Transition
                    as={Fragment}
                    enter="transition ease-out duration-100"
                    enterFrom="transform opacity-0 scale-95"
                    enterTo="transform opacity-100 scale-100"
                    leave="transition ease-in duration-75"
                    leaveFrom="transform opacity-100 scale-100"
                    leaveTo="transform opacity-0 scale-95"
                >
                    <Menu.Items
                        className={clsx(
                            styles.itemClick,
                            "absolute right-0 mt-2origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black/5 focus:outline-none"
                        )}
                    >
                        <div className="px-4 py-1 w-max">
                            <div
                                className={`${"text-gray-900"} group flex w-full items-center rounded-md py-2.5 text-sm`}
                            >
                                <div>
                                    <img
                                        className={clsx(styles.avatar)}
                                        src={
                                            user && user.avatar
                                                ? user.avatar
                                                : avatarDefault
                                        }
                                        alt=""
                                    />
                                </div>
                                <div
                                    className={clsx(styles.userName, "flex-1")}
                                >
                                    <span>
                                        {user && user.firstName}
                                        {user && user.lastName}
                                    </span>
                                    <div>
                                        {user?.email?.includes("@")
                                            ? "@" +
                                              user.email.substring(
                                                  0,
                                                  user.email.indexOf("@")
                                              )
                                            : "@" + user?.email}
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div className="px-1 py-1 ">
                            {user?.role === "ADMIN" && (
                                <Link to={"/admin"}>
                                    <Menu.Item>
                                        {({ active }) => (
                                            <button
                                                className={`${
                                                    active
                                                        ? "bg-black text-white"
                                                        : "text-gray-900"
                                                } group flex w-full items-center rounded-md px-2 py-2.5 text-sm`}
                                            >
                                                {active ? (
                                                    <svg
                                                        xmlns="http://www.w3.org/2000/svg"
                                                        viewBox="0 0 24 24"
                                                        id="dashboard"
                                                        className="mr-2 w-6 h-6"
                                                        fill="#fff"
                                                    >
                                                        <path d="M8.5 3h-3a2.5 2.5 0 0 0 0 5h3a2.5 2.5 0 0 0 0-5zm0 4h-3a1.5 1.5 0 0 1 0-3h3a1.5 1.5 0 0 1 0 3zm0 3h-3A2.5 2.5 0 0 0 3 12.5v6A2.5 2.5 0 0 0 5.5 21h3a2.5 2.5 0 0 0 2.5-2.5v-6A2.5 2.5 0 0 0 8.5 10zm1.5 8.5A1.5 1.5 0 0 1 8.5 20h-3A1.5 1.5 0 0 1 4 18.5v-6A1.5 1.5 0 0 1 5.5 11h3a1.5 1.5 0 0 1 1.5 1.5zm8.5-2.5h-3a2.5 2.5 0 0 0 0 5h3a2.5 2.5 0 0 0 0-5zm0 4h-3a1.5 1.5 0 0 1 0-3h3a1.5 1.5 0 0 1 0 3zm0-17h-3A2.5 2.5 0 0 0 13 5.5v6a2.5 2.5 0 0 0 2.5 2.5h3a2.5 2.5 0 0 0 2.5-2.5v-6A2.5 2.5 0 0 0 18.5 3zm1.5 8.5a1.5 1.5 0 0 1-1.5 1.5h-3a1.5 1.5 0 0 1-1.5-1.5v-6A1.5 1.5 0 0 1 15.5 4h3A1.5 1.5 0 0 1 20 5.5z"></path>
                                                    </svg>
                                                ) : (
                                                    <svg
                                                        xmlns="http://www.w3.org/2000/svg"
                                                        viewBox="0 0 24 24"
                                                        id="dashboard"
                                                        className="mr-2 w-6 h-6 "
                                                    >
                                                        <path d="M8.5 3h-3a2.5 2.5 0 0 0 0 5h3a2.5 2.5 0 0 0 0-5zm0 4h-3a1.5 1.5 0 0 1 0-3h3a1.5 1.5 0 0 1 0 3zm0 3h-3A2.5 2.5 0 0 0 3 12.5v6A2.5 2.5 0 0 0 5.5 21h3a2.5 2.5 0 0 0 2.5-2.5v-6A2.5 2.5 0 0 0 8.5 10zm1.5 8.5A1.5 1.5 0 0 1 8.5 20h-3A1.5 1.5 0 0 1 4 18.5v-6A1.5 1.5 0 0 1 5.5 11h3a1.5 1.5 0 0 1 1.5 1.5zm8.5-2.5h-3a2.5 2.5 0 0 0 0 5h3a2.5 2.5 0 0 0 0-5zm0 4h-3a1.5 1.5 0 0 1 0-3h3a1.5 1.5 0 0 1 0 3zm0-17h-3A2.5 2.5 0 0 0 13 5.5v6a2.5 2.5 0 0 0 2.5 2.5h3a2.5 2.5 0 0 0 2.5-2.5v-6A2.5 2.5 0 0 0 18.5 3zm1.5 8.5a1.5 1.5 0 0 1-1.5 1.5h-3a1.5 1.5 0 0 1-1.5-1.5v-6A1.5 1.5 0 0 1 15.5 4h3A1.5 1.5 0 0 1 20 5.5z"></path>
                                                    </svg>
                                                )}
                                                Dashboard
                                            </button>
                                        )}
                                    </Menu.Item>
                                </Link>
                            )}
                            <Link
                                to={`/me/profile/${
                                    user?.email?.includes("@")
                                        ? "@" +
                                          user.email.substring(
                                              0,
                                              user.email.indexOf("@")
                                          )
                                        : "@" + user?.email
                                }`}
                            >
                                <Menu.Item>
                                    {({ active }) => (
                                        <button
                                            className={`${
                                                active
                                                    ? "bg-black text-white"
                                                    : "text-gray-900"
                                            } group flex w-full items-center rounded-md px-2 py-2.5 text-sm`}
                                        >
                                            {active ? (
                                                <svg
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    fill="none"
                                                    viewBox="0 0 24 24"
                                                    strokeWidth="1.5"
                                                    stroke="currentColor"
                                                    className="mr-2 w-6 h-6"
                                                >
                                                    <path
                                                        strokeLinecap="round"
                                                        stroklinejoin="round"
                                                        d="M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                                                    />
                                                </svg>
                                            ) : (
                                                <svg
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    fill="none"
                                                    viewBox="0 0 24 24"
                                                    strokeWidth="1.5"
                                                    stroke="currentColor"
                                                    className="mr-2 w-6 h-6"
                                                >
                                                    <path
                                                        strokeLinecap="round"
                                                        stroklinejoin="round"
                                                        d="M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                                                    />
                                                </svg>
                                            )}
                                            Profile
                                        </button>
                                    )}
                                </Menu.Item>
                            </Link>
                            {user?.role !== "ADMIN" && (
                                <Link to={"/me/my-courses"}>
                                    <Menu.Item>
                                        {({ active }) => (
                                            <button
                                                className={`${
                                                    active
                                                        ? "bg-black text-white"
                                                        : "text-gray-900"
                                                } group flex w-full items-center rounded-md px-2 py-2.5 text-sm`}
                                            >
                                                {active ? (
                                                    <svg
                                                        xmlns="http://www.w3.org/2000/svg"
                                                        fill="none"
                                                        viewBox="0 0 24 24"
                                                        strokeWidth="1.5"
                                                        stroke="currentColor"
                                                        className="mr-2 w-6 h-6"
                                                    >
                                                        <path
                                                            strokeLinecap="round"
                                                            stroklinejoin="round"
                                                            d="M9 4.5v15m6-15v15m-10.875 0h15.75c.621 0 1.125-.504 1.125-1.125V5.625c0-.621-.504-1.125-1.125-1.125H4.125C3.504 4.5 3 5.004 3 5.625v12.75c0 .621.504 1.125 1.125 1.125Z"
                                                        />
                                                    </svg>
                                                ) : (
                                                    <svg
                                                        xmlns="http://www.w3.org/2000/svg"
                                                        fill="none"
                                                        viewBox="0 0 24 24"
                                                        strokeWidth="1.5"
                                                        stroke="currentColor"
                                                        className="mr-2 w-6 h-6"
                                                    >
                                                        <path
                                                            strokeLinecap="round"
                                                            stroklinejoin="round"
                                                            d="M9 4.5v15m6-15v15m-10.875 0h15.75c.621 0 1.125-.504 1.125-1.125V5.625c0-.621-.504-1.125-1.125-1.125H4.125C3.504 4.5 3 5.004 3 5.625v12.75c0 .621.504 1.125 1.125 1.125Z"
                                                        />
                                                    </svg>
                                                )}
                                                My courses
                                            </button>
                                        )}
                                    </Menu.Item>
                                </Link>
                            )}
                        </div>
                        <div className="px-1 py-1">
                            <div onClick={handleLogout}>
                                <Menu.Item>
                                    {({ active }) => (
                                        <button
                                            className={`${
                                                active
                                                    ? "bg-black text-white"
                                                    : "text-gray-900"
                                            } group flex w-full items-center rounded-md px-2 py-2.5 text-sm`}
                                        >
                                            {active ? (
                                                <svg
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    fill="none"
                                                    viewBox="0 0 24 24"
                                                    strokeWidth="1.5"
                                                    stroke="currentColor"
                                                    className="mr-2 w-6 h-6"
                                                >
                                                    <path
                                                        strokeLinecap="round"
                                                        stroklinejoin="round"
                                                        d="M15.75 9V5.25A2.25 2.25 0 0 0 13.5 3h-6a2.25 2.25 0 0 0-2.25 2.25v13.5A2.25 2.25 0 0 0 7.5 21h6a2.25 2.25 0 0 0 2.25-2.25V15M12 9l-3 3m0 0 3 3m-3-3h12.75"
                                                    />
                                                </svg>
                                            ) : (
                                                <svg
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    fill="none"
                                                    viewBox="0 0 24 24"
                                                    strokeWidth="1.5"
                                                    stroke="currentColor"
                                                    className="mr-2 w-6 h-6"
                                                >
                                                    <path
                                                        strokeLinecap="round"
                                                        stroklinejoin="round"
                                                        d="M15.75 9V5.25A2.25 2.25 0 0 0 13.5 3h-6a2.25 2.25 0 0 0-2.25 2.25v13.5A2.25 2.25 0 0 0 7.5 21h6a2.25 2.25 0 0 0 2.25-2.25V15M12 9l-3 3m0 0 3 3m-3-3h12.75"
                                                    />
                                                </svg>
                                            )}
                                            Logout
                                        </button>
                                    )}
                                </Menu.Item>
                            </div>
                        </div>
                    </Menu.Items>
                </Transition>
            </Menu>
        </div>
    );
}

export default Dropdown;

================
File: src/component/dropDown/Menu.module.scss
================
.itemClick {
    top: 56px;
    right: -80px;
}

.avatar {
    width: 54px;
    height: 54px;
    border-radius: 100rem;
    max-width: none;
}

.userName {
    padding-left: 8px;
    text-align: left;
}

================
File: src/component/footerDataAdmin/FooterDataAdmin.module.scss
================
.footer {
    padding-top: 24px;
    display: flex;
    justify-content: end;

    .footerItem {
        display: flex;
        align-items: center;
        margin-left: 32px;
        line-height: 14px;
        font-size: 14px;
        font-weight: 400;

        svg {
            width: 24px;
        }
    }
}

.controlPage {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 32px;
    height: 32px;
    margin-left: 8px;
    border-radius: 100rem;
    &:hover {
        background-color: #f3f0f0;
    }
}

.disableControl {
    user-select: none;
    cursor: not-allowed;
    svg {
        color: #a7b1bb;
    }
}

================
File: src/component/footerDataAdmin/index.js
================
import {
    CheckIcon,
    ChevronLeftIcon,
    ChevronRightIcon,
    ChevronUpDownIcon,
} from "@heroicons/react/20/solid";
import styles from "./FooterDataAdmin.module.scss";
import clsx from "clsx";
import { Listbox, Transition } from "@headlessui/react";
import { Fragment, useState } from "react";

const selectes = [5, 10, 25];

function FooterDataAdmin({
    handleSelectPageSizeChange,
    totalData,
    size = 5,
    page = 0,
    setPage,
}) {
    const handlePageData = async (action) => {
        const currentTotalData = page * size + size;
        if (action === "next" && currentTotalData < totalData) {
            setPage((page) => page + 1);
        }
        if (action === "previous" && page > 0) {
            setPage((page) => page - 1);
        }
    };

    return (
        <div className={clsx(styles.footer)}>
            <div className={styles.footerItem}>
                Rows per page:
                <div className="b-shadow-light rounded-lg ml-2 w-24">
                    <Listbox value={size} onChange={handleSelectPageSizeChange}>
                        <div className="relative mt-1">
                            <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white/75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
                                <span className="block truncate">{size}</span>
                                <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                                    <ChevronUpDownIcon
                                        className="h-5 w-5 text-gray-400"
                                        aria-hidden="true"
                                    />
                                </span>
                            </Listbox.Button>
                            <Transition
                                as={Fragment}
                                leave="transition ease-in duration-100"
                                leaveFrom="opacity-100"
                                leaveTo="opacity-0"
                            >
                                <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm">
                                    {selectes.map((element, index) => (
                                        <Listbox.Option
                                            key={index}
                                            className={({ active }) =>
                                                `relative cursor-default select-none py-2 pl-10 pr-4 ${
                                                    active
                                                        ? "bg-amber-100 text-amber-900"
                                                        : "text-gray-900"
                                                }`
                                            }
                                            value={element}
                                        >
                                            {({ size }) => (
                                                <>
                                                    <span
                                                        className={`block truncate ${
                                                            size
                                                                ? "font-medium"
                                                                : "font-normal"
                                                        }`}
                                                    >
                                                        {element}
                                                    </span>
                                                    {size ? (
                                                        <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600">
                                                            <CheckIcon
                                                                className="h-5 w-5"
                                                                aria-hidden="true"
                                                            />
                                                        </span>
                                                    ) : null}
                                                </>
                                            )}
                                        </Listbox.Option>
                                    ))}
                                </Listbox.Options>
                            </Transition>
                        </div>
                    </Listbox>
                </div>
            </div>
            <div className={clsx(styles.footerItem)}>
                <div className="mr-3">
                    {" "}
                    <span id="currentPage">
                        {page * size + 1}-
                        {totalData < page * size + size
                            ? totalData
                            : page * size + size}
                    </span>
                    <span> of </span>
                    <span id="total">{totalData}</span>
                </div>
                <button
                    disabled={page === 0}
                    onClick={() => handlePageData("previous")}
                    className={clsx(styles.controlPage, {
                        [styles.disableControl]: page === 0,
                    })}
                >
                    <ChevronLeftIcon></ChevronLeftIcon>
                </button>
                <button
                    disabled={page * size + size >= totalData}
                    onClick={() => handlePageData("next")}
                    className={clsx(styles.controlPage, {
                        [styles.disableControl]:
                            page * size + size >= totalData,
                    })}
                >
                    <ChevronRightIcon></ChevronRightIcon>
                </button>
            </div>
        </div>
    );
}

export default FooterDataAdmin;

================
File: src/component/globalStyles/dropDown/index.js
================
import { Menu, Transition } from "@headlessui/react";
import clsx from "clsx";
import styles from "./Menu.module.scss";
import { Fragment } from "react";
import avatarDefault from "../../assets/images/Avatar.png";
import { ChevronDownIcon } from "@heroicons/react/20/solid";
import { Link, useNavigate } from "react-router-dom";
import * as authApi from "../../api/apiService/authService";
import { useDispatch, useSelector } from "react-redux";
import loginSlice from "../../redux/reducers/loginSlice";

function Dropdown({ elementClick, ...props }) {
    const dispatch = useDispatch();
    const user = useSelector((state) => state.login.user);
    const navigate = useNavigate();
    const handleLogout = () => {
        const fetchApi = async () => {
            try {
                await authApi.logout();
                dispatch(loginSlice.actions.setLogout());
                navigate("/");
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };

    return (
        <div className="text-right flex items-center">
            <Menu as="div" className="relative text-left flex ml-2">
                <Menu.Button className="inline-flex items-center w-full justify-center rounded-md text-sm font-medium text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-white/75">
                    {elementClick
                        ? elementClick
                        : "Options" +
                          (
                              <ChevronDownIcon
                                  className="-mr-1 ml-2 h-5 w-5 text-violet-200 hover:text-violet-100"
                                  aria-hidden="true"
                              />
                          )}
                </Menu.Button>
                <Transition
                    as={Fragment}
                    enter="transition ease-out duration-100"
                    enterFrom="transform opacity-0 scale-95"
                    enterTo="transform opacity-100 scale-100"
                    leave="transition ease-in duration-75"
                    leaveFrom="transform opacity-100 scale-100"
                    leaveTo="transform opacity-0 scale-95"
                >
                    <Menu.Items
                        className={clsx(
                            styles.itemClick,
                            "absolute right-0 mt-2origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black/5 focus:outline-none"
                        )}
                    >
                        <div className="px-4 py-1 w-max">
                            <div
                                className={`${"text-gray-900"} group flex w-full items-center rounded-md py-2.5 text-sm`}
                            >
                                <div>
                                    <img
                                        className={clsx(styles.avatar)}
                                        src={
                                            user && user.avatar
                                                ? user.avatar
                                                : avatarDefault
                                        }
                                        alt=""
                                    />
                                </div>
                                <div
                                    className={clsx(styles.userName, "flex-1")}
                                >
                                    <span>
                                        {user && user.firstName}
                                        {user && user.lastName}
                                    </span>
                                    <div>
                                        {user?.email?.includes("@")
                                            ? "@" +
                                              user.email.substring(
                                                  0,
                                                  user.email.indexOf("@")
                                              )
                                            : "@" + user?.email}
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div className="px-1 py-1 ">
                            {user?.role === "ADMIN" && (
                                <Link to={"/admin"}>
                                    <Menu.Item>
                                        {({ active }) => (
                                            <button
                                                className={`${
                                                    active
                                                        ? "bg-black text-white"
                                                        : "text-gray-900"
                                                } group flex w-full items-center rounded-md px-2 py-2.5 text-sm`}
                                            >
                                                {active ? (
                                                    <svg
                                                        xmlns="http://www.w3.org/2000/svg"
                                                        viewBox="0 0 24 24"
                                                        id="dashboard"
                                                        className="mr-2 w-6 h-6"
                                                        fill="#fff"
                                                    >
                                                        <path d="M8.5 3h-3a2.5 2.5 0 0 0 0 5h3a2.5 2.5 0 0 0 0-5zm0 4h-3a1.5 1.5 0 0 1 0-3h3a1.5 1.5 0 0 1 0 3zm0 3h-3A2.5 2.5 0 0 0 3 12.5v6A2.5 2.5 0 0 0 5.5 21h3a2.5 2.5 0 0 0 2.5-2.5v-6A2.5 2.5 0 0 0 8.5 10zm1.5 8.5A1.5 1.5 0 0 1 8.5 20h-3A1.5 1.5 0 0 1 4 18.5v-6A1.5 1.5 0 0 1 5.5 11h3a1.5 1.5 0 0 1 1.5 1.5zm8.5-2.5h-3a2.5 2.5 0 0 0 0 5h3a2.5 2.5 0 0 0 0-5zm0 4h-3a1.5 1.5 0 0 1 0-3h3a1.5 1.5 0 0 1 0 3zm0-17h-3A2.5 2.5 0 0 0 13 5.5v6a2.5 2.5 0 0 0 2.5 2.5h3a2.5 2.5 0 0 0 2.5-2.5v-6A2.5 2.5 0 0 0 18.5 3zm1.5 8.5a1.5 1.5 0 0 1-1.5 1.5h-3a1.5 1.5 0 0 1-1.5-1.5v-6A1.5 1.5 0 0 1 15.5 4h3A1.5 1.5 0 0 1 20 5.5z"></path>
                                                    </svg>
                                                ) : (
                                                    <svg
                                                        xmlns="http://www.w3.org/2000/svg"
                                                        viewBox="0 0 24 24"
                                                        id="dashboard"
                                                        className="mr-2 w-6 h-6 "
                                                    >
                                                        <path d="M8.5 3h-3a2.5 2.5 0 0 0 0 5h3a2.5 2.5 0 0 0 0-5zm0 4h-3a1.5 1.5 0 0 1 0-3h3a1.5 1.5 0 0 1 0 3zm0 3h-3A2.5 2.5 0 0 0 3 12.5v6A2.5 2.5 0 0 0 5.5 21h3a2.5 2.5 0 0 0 2.5-2.5v-6A2.5 2.5 0 0 0 8.5 10zm1.5 8.5A1.5 1.5 0 0 1 8.5 20h-3A1.5 1.5 0 0 1 4 18.5v-6A1.5 1.5 0 0 1 5.5 11h3a1.5 1.5 0 0 1 1.5 1.5zm8.5-2.5h-3a2.5 2.5 0 0 0 0 5h3a2.5 2.5 0 0 0 0-5zm0 4h-3a1.5 1.5 0 0 1 0-3h3a1.5 1.5 0 0 1 0 3zm0-17h-3A2.5 2.5 0 0 0 13 5.5v6a2.5 2.5 0 0 0 2.5 2.5h3a2.5 2.5 0 0 0 2.5-2.5v-6A2.5 2.5 0 0 0 18.5 3zm1.5 8.5a1.5 1.5 0 0 1-1.5 1.5h-3a1.5 1.5 0 0 1-1.5-1.5v-6A1.5 1.5 0 0 1 15.5 4h3A1.5 1.5 0 0 1 20 5.5z"></path>
                                                    </svg>
                                                )}
                                                Dashboard
                                            </button>
                                        )}
                                    </Menu.Item>
                                </Link>
                            )}
                            <Link
                                to={`/me/profile/${
                                    user?.email?.includes("@")
                                        ? "@" +
                                          user.email.substring(
                                              0,
                                              user.email.indexOf("@")
                                          )
                                        : "@" + user?.email
                                }`}
                            >
                                <Menu.Item>
                                    {({ active }) => (
                                        <button
                                            className={`${
                                                active
                                                    ? "bg-black text-white"
                                                    : "text-gray-900"
                                            } group flex w-full items-center rounded-md px-2 py-2.5 text-sm`}
                                        >
                                            {active ? (
                                                <svg
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    fill="none"
                                                    viewBox="0 0 24 24"
                                                    strokeWidth="1.5"
                                                    stroke="currentColor"
                                                    className="mr-2 w-6 h-6"
                                                >
                                                    <path
                                                        strokeLinecap="round"
                                                        stroklinejoin="round"
                                                        d="M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                                                    />
                                                </svg>
                                            ) : (
                                                <svg
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    fill="none"
                                                    viewBox="0 0 24 24"
                                                    strokeWidth="1.5"
                                                    stroke="currentColor"
                                                    className="mr-2 w-6 h-6"
                                                >
                                                    <path
                                                        strokeLinecap="round"
                                                        stroklinejoin="round"
                                                        d="M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                                                    />
                                                </svg>
                                            )}
                                            Profile
                                        </button>
                                    )}
                                </Menu.Item>
                            </Link>
                            {user?.role !== "ADMIN" && (
                                <Link to={"/me/my-courses"}>
                                    <Menu.Item>
                                        {({ active }) => (
                                            <button
                                                className={`${
                                                    active
                                                        ? "bg-black text-white"
                                                        : "text-gray-900"
                                                } group flex w-full items-center rounded-md px-2 py-2.5 text-sm`}
                                            >
                                                {active ? (
                                                    <svg
                                                        xmlns="http://www.w3.org/2000/svg"
                                                        fill="none"
                                                        viewBox="0 0 24 24"
                                                        strokeWidth="1.5"
                                                        stroke="currentColor"
                                                        className="mr-2 w-6 h-6"
                                                    >
                                                        <path
                                                            strokeLinecap="round"
                                                            stroklinejoin="round"
                                                            d="M9 4.5v15m6-15v15m-10.875 0h15.75c.621 0 1.125-.504 1.125-1.125V5.625c0-.621-.504-1.125-1.125-1.125H4.125C3.504 4.5 3 5.004 3 5.625v12.75c0 .621.504 1.125 1.125 1.125Z"
                                                        />
                                                    </svg>
                                                ) : (
                                                    <svg
                                                        xmlns="http://www.w3.org/2000/svg"
                                                        fill="none"
                                                        viewBox="0 0 24 24"
                                                        strokeWidth="1.5"
                                                        stroke="currentColor"
                                                        className="mr-2 w-6 h-6"
                                                    >
                                                        <path
                                                            strokeLinecap="round"
                                                            stroklinejoin="round"
                                                            d="M9 4.5v15m6-15v15m-10.875 0h15.75c.621 0 1.125-.504 1.125-1.125V5.625c0-.621-.504-1.125-1.125-1.125H4.125C3.504 4.5 3 5.004 3 5.625v12.75c0 .621.504 1.125 1.125 1.125Z"
                                                        />
                                                    </svg>
                                                )}
                                                My courses
                                            </button>
                                        )}
                                    </Menu.Item>
                                </Link>
                            )}
                        </div>
                        <div className="px-1 py-1">
                            <div onClick={handleLogout}>
                                <Menu.Item>
                                    {({ active }) => (
                                        <button
                                            className={`${
                                                active
                                                    ? "bg-black text-white"
                                                    : "text-gray-900"
                                            } group flex w-full items-center rounded-md px-2 py-2.5 text-sm`}
                                        >
                                            {active ? (
                                                <svg
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    fill="none"
                                                    viewBox="0 0 24 24"
                                                    strokeWidth="1.5"
                                                    stroke="currentColor"
                                                    className="mr-2 w-6 h-6"
                                                >
                                                    <path
                                                        strokeLinecap="round"
                                                        stroklinejoin="round"
                                                        d="M15.75 9V5.25A2.25 2.25 0 0 0 13.5 3h-6a2.25 2.25 0 0 0-2.25 2.25v13.5A2.25 2.25 0 0 0 7.5 21h6a2.25 2.25 0 0 0 2.25-2.25V15M12 9l-3 3m0 0 3 3m-3-3h12.75"
                                                    />
                                                </svg>
                                            ) : (
                                                <svg
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    fill="none"
                                                    viewBox="0 0 24 24"
                                                    strokeWidth="1.5"
                                                    stroke="currentColor"
                                                    className="mr-2 w-6 h-6"
                                                >
                                                    <path
                                                        strokeLinecap="round"
                                                        stroklinejoin="round"
                                                        d="M15.75 9V5.25A2.25 2.25 0 0 0 13.5 3h-6a2.25 2.25 0 0 0-2.25 2.25v13.5A2.25 2.25 0 0 0 7.5 21h6a2.25 2.25 0 0 0 2.25-2.25V15M12 9l-3 3m0 0 3 3m-3-3h12.75"
                                                    />
                                                </svg>
                                            )}
                                            Logout
                                        </button>
                                    )}
                                </Menu.Item>
                            </div>
                        </div>
                    </Menu.Items>
                </Transition>
            </Menu>
        </div>
    );
}

export default Dropdown;

================
File: src/component/globalStyles/dropDown/Menu.module.scss
================
.itemClick {
    top: 56px;
    right: -80px;
}

.avatar {
    width: 54px;
    height: 54px;
    border-radius: 100rem;
    max-width: none;
}

.userName {
    padding-left: 8px;
    text-align: left;
}

================
File: src/component/globalStyles/footerDataAdmin/FooterDataAdmin.module.scss
================
.footer {
    padding-top: 24px;
    display: flex;
    justify-content: end;

    .footerItem {
        display: flex;
        align-items: center;
        margin-left: 32px;
        line-height: 14px;
        font-size: 14px;
        font-weight: 400;

        svg {
            width: 24px;
        }
    }
}

.controlPage {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 32px;
    height: 32px;
    margin-left: 8px;
    border-radius: 100rem;
    &:hover {
        background-color: #f3f0f0;
    }
}

.disableControl {
    user-select: none;
    cursor: not-allowed;
    svg {
        color: #a7b1bb;
    }
}

================
File: src/component/globalStyles/footerDataAdmin/index.js
================
import {
    CheckIcon,
    ChevronLeftIcon,
    ChevronRightIcon,
    ChevronUpDownIcon,
} from "@heroicons/react/20/solid";
import styles from "./FooterDataAdmin.module.scss";
import clsx from "clsx";
import { Listbox, Transition } from "@headlessui/react";
import { Fragment, useState } from "react";

const selectes = [5, 10, 25];

function FooterDataAdmin({
    handleSelectPageSizeChange,
    totalData,
    size = 5,
    page = 0,
    setPage,
}) {
    const handlePageData = async (action) => {
        const currentTotalData = page * size + size;
        if (action === "next" && currentTotalData < totalData) {
            setPage((page) => page + 1);
        }
        if (action === "previous" && page > 0) {
            setPage((page) => page - 1);
        }
    };

    return (
        <div className={clsx(styles.footer)}>
            <div className={styles.footerItem}>
                Rows per page:
                <div className="b-shadow-light rounded-lg ml-2 w-24">
                    <Listbox value={size} onChange={handleSelectPageSizeChange}>
                        <div className="relative mt-1">
                            <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white/75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
                                <span className="block truncate">{size}</span>
                                <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                                    <ChevronUpDownIcon
                                        className="h-5 w-5 text-gray-400"
                                        aria-hidden="true"
                                    />
                                </span>
                            </Listbox.Button>
                            <Transition
                                as={Fragment}
                                leave="transition ease-in duration-100"
                                leaveFrom="opacity-100"
                                leaveTo="opacity-0"
                            >
                                <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm">
                                    {selectes.map((element, index) => (
                                        <Listbox.Option
                                            key={index}
                                            className={({ active }) =>
                                                `relative cursor-default select-none py-2 pl-10 pr-4 ${
                                                    active
                                                        ? "bg-amber-100 text-amber-900"
                                                        : "text-gray-900"
                                                }`
                                            }
                                            value={element}
                                        >
                                            {({ size }) => (
                                                <>
                                                    <span
                                                        className={`block truncate ${
                                                            size
                                                                ? "font-medium"
                                                                : "font-normal"
                                                        }`}
                                                    >
                                                        {element}
                                                    </span>
                                                    {size ? (
                                                        <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600">
                                                            <CheckIcon
                                                                className="h-5 w-5"
                                                                aria-hidden="true"
                                                            />
                                                        </span>
                                                    ) : null}
                                                </>
                                            )}
                                        </Listbox.Option>
                                    ))}
                                </Listbox.Options>
                            </Transition>
                        </div>
                    </Listbox>
                </div>
            </div>
            <div className={clsx(styles.footerItem)}>
                <div className="mr-3">
                    {" "}
                    <span id="currentPage">
                        {page * size + 1}-
                        {totalData < page * size + size
                            ? totalData
                            : page * size + size}
                    </span>
                    <span> of </span>
                    <span id="total">{totalData}</span>
                </div>
                <button
                    disabled={page === 0}
                    onClick={() => handlePageData("previous")}
                    className={clsx(styles.controlPage, {
                        [styles.disableControl]: page === 0,
                    })}
                >
                    <ChevronLeftIcon></ChevronLeftIcon>
                </button>
                <button
                    disabled={page * size + size >= totalData}
                    onClick={() => handlePageData("next")}
                    className={clsx(styles.controlPage, {
                        [styles.disableControl]:
                            page * size + size >= totalData,
                    })}
                >
                    <ChevronRightIcon></ChevronRightIcon>
                </button>
            </div>
        </div>
    );
}

export default FooterDataAdmin;

================
File: src/component/globalStyles/GlobalStyles.scss
================
.w-1400 {
    width: 1400px !important;
}
@import url("https://fonts.googleapis.com/css2?family=Be+Vietnam+Pro:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");

$label-gray: #919eab;
$bg-hover: rgba(145, 158, 171, 0.08);
$border-color: #e9ecee;
$h-header: 89px;
$h-admin-header: 68px;
$w-lefNav: 240px;
$h-m-header: 104px;
$b-shadow: rgba(17, 17, 26, 0.1) 0px 0px 16px;
$c-black: rgb(33, 43, 54);

body {
    margin: 0;
    line-height: normal;
    font-family: "Be Vietnam Pro", "Helvetica Neue", Helvetica, Arial !important;
}
:root {
    /* fonts */
    // --font-nunito-sans: "Nunito Sans";
    // --font-lineawesome: LineAwesome;
    // --font-inter: Inter;
    // --font-dm-sans: "DM Sans";

    /* font sizes */
    --font-size-xl: 20px;
    --font-size-base: 16px;
    --font-size-3xl: 22px;
    --font-size-lg: 18px;
    --font-size-sm: 14px;
    --font-size-xs: 12px;
    --font-size-9xl: 28px;

    /* Colors */
    --theme-colors-white: #fff;
    --color-royalblue-100: #4880ff;
    --color-royalblue-200: #4c61cc;
    --color-darkslategray-100: #404040;
    --color-darkslateblue-100: #3749a6;
    --color-gray-100: #202224;
    --gray-900: #161c24;
    --color-gray-200: rgba(32, 34, 36, 0.5);
    --color-gray-300: rgba(0, 0, 0, 0.4);
    --color-lavender: rgba(226, 234, 248, 0.7);
    --color-coral: #ff8743;
    --color-dimgray-100: #646464;
    --color-dimgray-200: #565656;
    --color-ghostwhite: #f5f6fa;
    --color-lightgray: #d5d5d5;
    --gray-200: #f4f6f8;
    --theme-colors-primary: #624bff;
    --gray-600: #637381;

    /* Gaps */
    --gap-base: 16px;
    --gap-xl: 20px;
    --gap-11xl: 30px;
    --gap-5xl: 24px;
    --gap-5xs: 8px;
    --gap-10xs-4: 2.4px;
    --gap-7xl-5: 26.5px;
    --gap-10xs: 3px;
    --gap-2xs-9: 10.9px;
    --gap-sm-5: 13.5px;

    /* Paddings */
    --padding-5xl: 24px;
    --padding-xl: 20px;
    --padding-smi: 13px;
    --padding-21xl: 40px;
    --padding-xs: 12px;
    --padding-10xs: 3px;
    --padding-sm: 14px;
    --padding-5xs: 8px;
    --padding-12xs: 1px;
    --padding-11xl: 30px;
    --padding-4xl: 23px;
    --padding-base: 16px;
    --padding-8xs: 5px;
    --padding-11xs: 2px;
    --padding-46xl: 65px;
    --padding-12xl: 31px;
    --padding-7xs: 6px;
    --padding-4xs: 9px;
    --padding-3xs-7: 9.7px;
    --padding-7xs-1: 5.1px;
    --padding-3xs: 10px;
    --padding-base-5: 16.5px;

    /* Border radiuses */
    --br-7xs: 6px;
    --br-9xs: 4px;
    --br-xs: 12px;
    --br-sm: 14px;
    --br-2xs: 11px;
    --br-lgi: 19px;
    --br-5xs: 8px;
}

.d-flex {
    display: flex;
}

.d-block {
    display: block !important;
}

.b-shadow {
    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px !important;
}

.b-shadow-light {
    box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px,
        rgba(0, 0, 0, 0.1) 0px 0px 1px 0px;
}

.container {
    width: 1200px;
}

.wrapMainDash {
    margin: 0px 70px 160px 70px;
}

.titleMainDash {
    margin: 0px 0px 26px;
    font-weight: 800;
    text-transform: uppercase;
    text-align: center;
    line-height: 1.5;
    font-size: 24px;
}

.h-22 {
    height: 88px !important;
}

a {
    text-decoration: none !important;
}

.css-tj5bde-Svg {
    position: relative !important;
    right: 1px;
    top: 4%;
}

.css-1im77uy-control {
    height: 100% !important;
    border-radius: 8px !important;
}

.css-b62m3t-container,
.css-gymzdq-control {
    height: 100% !important;
    border-radius: 8px !important;
}

.formGroup {
    border-radius: 8px;
    padding: 24px;
    box-shadow: rgba(145, 158, 171, 0.2) 0px 0px 2px 0px,
        rgba(145, 158, 171, 0.12) 0px 12px 24px -4px;
}

.z-header {
    z-index: 5;
}

.mt-header {
    margin-top: $h-header;
}
.pt-header {
    padding-top: $h-m-header;
}

.boxShadow {
    box-shadow: rgba(145, 158, 171, 0.2) 0px 0px 2px 0px,
        rgba(145, 158, 171, 0.12) 0px 12px 24px -4px;
}

.des-line-3 {
    -webkit-line-clamp: 3;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

d-none {
    display: none;
}

.css-gymzdq-control,
.css-s2gg24-control {
    height: 58px !important;
    // width: 200px !important;
}

.field-disable {
    user-select: none;

    input {
        cursor: not-allowed;
        opacity: 0.6;
    }
}

.List_contentItem__EdrE8 svg {
    right: 0px !important;
}

.btnModal {
    padding: 6px 10px;
    border-radius: 8px;
    margin: 4px 10px;
    font-size: 14px;
    font-weight: 700;
    border: 1px solid #ccc;
    color: black;
}

.btnModal.delete {
    color: white;
    background-color: #ff5630;
}
.css-s2gg24-control {
    height: 54px !important;
    border-radius: 8px;
}

ul {
    padding-left: 0;
}

.overlay {
    background-color: rgba(22, 28, 36, 0.8);
}

.disabled {
    display: none !important;
}

.active {
    svg {
        transform: rotate(-180deg);
    }
}

.transform {
    transition: all 0.2s ease-in-out;
}

.checkbox-wrapper *,
.checkbox-wrapper *::before,
.checkbox-wrapper *::after {
    box-sizing: border-box;
}

.checkbox-wrapper label {
    display: block;
    width: 20px;
    height: 20px;
    cursor: pointer;
}

.checkbox-wrapper input {
    visibility: hidden;
    display: none;
}

.checkbox-wrapper input:checked ~ .checkbox {
    transform: rotate(45deg) translateX(-7px);
    width: 14px;
    margin-left: 12px;
    border-color: #24c78e;
    border-top-color: transparent;
    border-left-color: transparent;
    border-radius: 0;
}

.checkbox-wrapper .checkbox {
    display: block;
    width: inherit;
    height: inherit;
    border: 2px solid #434343;
    border-radius: 4px;
    transition: all 0.375s;
}

.App {
    height: 100vh;
}

.hideScroll {
    overflow-y: hidden !important;
}

// input {
//     outline: none !important;
//     border: none !important;
// }

.b-shadow-sm {
    box-shadow: rgba(17, 17, 26, 0.05) 0px 0px 4px,
        rgba(17, 17, 26, 0.05) 0px 0px 26px !important;
}

body {
    color: rgb(33, 43, 54);
}

.circle {
    border-radius: 100rem;
}

.disabled-field {
    color: #9c9696;
    cursor: not-allowed;
    user-select: none;
    input {
        cursor: not-allowed;
    }
}

button {
    cursor: pointer;
    transition: all 0.1s ease;
    &:hover {
        opacity: 0.8;
    }
}

.btn {
    background-color: black;
    color: white;
}

.show {
    display: block !important;
}

.showFlex {
    display: flex !important;
}

hr {
    margin: 0px !important;
}

.cssHr {
    margin: 0px !important;
    flex-shrink: 0;
    border-width: 0px 0px thin;
    border-style: solid;
    border-color: rgba(145, 158, 171, 0.9);
}

.time {
    color: rgb(145, 158, 171);
    font-size: 10px;
}

.dotNew {
    // position: absolute;
    top: 26px;
    right: 20px;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: rgb(0, 184, 217);
}

.boxNew {
    height: 24px;
    min-width: 24px;
    border-radius: 6px;
    cursor: default;
    align-items: center;
    white-space: nowrap;
    display: inline-flex;
    justify-content: center;
    padding: 0px 12px;
    font-size: 0.75rem;
    font-weight: 700;
    transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    color: rgb(255, 255, 255);
    background-color: rgb(0, 184, 217);
}

.boxReaded {
    height: 24px;
    min-width: 24px;
    border-radius: 6px;
    cursor: default;
    align-items: center;
    white-space: nowrap;
    display: inline-flex;
    justify-content: center;
    padding: 0px 12px;
    font-size: 0.75rem;
    font-weight: 700;
    transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    color: rgb(255, 255, 255);
    background-color: black;
}

.dotReaded {
    top: 26px;
    right: 20px;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: black;
}

/* CSS */
.btnCss {
    all: unset;
    width: 24px;
    // height: 30px;
    font-size: 12px;
    border: none;
    position: relative;
    color: #f0f0f0;
    cursor: pointer;
    z-index: 1;
    padding: 6px 26px;
    display: flex;
    align-items: center;
    justify-content: center;
    white-space: nowrap;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
}

.btnCss::after,
.btnCss::before {
    content: "";
    position: absolute;
    bottom: 0;
    right: 0;
    z-index: -99999;
    transition: all 0.4s;
}

.btnCss.btn-black {
    ::before {
        background: black !important;
    }
}
.btnCss::before {
    transform: translate(0%, 0%);
    width: 100%;
    height: 100%;
    background: rgb(232, 70, 70);
    border-radius: 10px;
}

.btnCss::after {
    transform: translate(10px, 10px);
    width: 35px;
    height: 35px;
    background: #f1080815;
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    border-radius: 50px;
}

.btnCss:hover::before {
    transform: translate(5%, 20%);
    width: 110%;
    height: 110%;
}

.btnCss:hover::after {
    border-radius: 10px;
    transform: translate(0, 0);
    width: 100%;
    height: 100%;
}

.btnCss:active::after {
    transition: 0s;
    transform: translate(0, 5%);
}

.btnLGBT {
    padding: 0.6em 2em;
    border: none;
    outline: none;
    color: rgb(255, 255, 255);
    background: #111;
    cursor: pointer;
    z-index: 0;
    border-radius: 10px;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
}

.btnLGBT:before {
    content: "";
    background: linear-gradient(
        45deg,
        #ff0000,
        #ff7300,
        #fffb00,
        #48ff00,
        #00ffd5,
        #002bff,
        #7a00ff,
        #ff00c8,
        #ff0000
    );
    position: absolute;
    top: -2px;
    left: -2px;
    background-size: 400%;
    z-index: -1;
    filter: blur(5px);
    -webkit-filter: blur(5px);
    width: calc(100% + 4px);
    height: calc(100% + 4px);
    animation: glowing-btnLGBT 20s linear infinite;
    transition: opacity 0.3s ease-in-out;
    border-radius: 10px;
}

@keyframes glowing-btnLGBT {
    0% {
        background-position: 0 0;
    }
    50% {
        background-position: 400% 0;
    }
    100% {
        background-position: 0 0;
    }
}

.btnLGBT:after {
    z-index: -1;
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background: #222;
    left: 0;
    top: 0;
    border-radius: 10px;
}

.box-md {
    width: 960px !important;
}

.input[type="checkbox"] {
    display: none;
}

/* Style for the custom checkbox */
.custom-checkbox {
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 2px solid #333;
    border-radius: 4px;
    position: relative;
    cursor: pointer;
}

/* Style for the custom checkmark */
.custom-checkbox::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 10px;
    height: 10px;
    background-color: #333;
    border-radius: 2px;
    opacity: 0;
}

.input[type="checkbox"]:checked + .custom-checkbox::after {
    opacity: 1;
}

.btn-lgbt {
    display: block;
    cursor: pointer;
    color: white;
    margin: 0 12px;
    position: relative;
    text-decoration: none;
    font-weight: 600;
    border-radius: 6px;
    overflow: hidden;
    padding: 3px;
    isolation: isolate;
}

.btn-lgbt::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 400%;
    height: 100%;
    background: linear-gradient(
        115deg,
        #4fcf70,
        #fad648,
        #a767e5,
        #12bcfe,
        #44ce7b
    );
    background-size: 25% 100%;
    animation: an-at-keyframe-css-at-rule-that-translates-via-the-transform-property-the-background-by-negative-25-percent-of-its-width-so-that-it-gives-a-nice-border-animation_-We-use-the-translate-property-to-have-a-nice-transition-so-it_s-not-a-jerk-of-a-start-or-stop
        0.75s linear infinite;
    animation-play-state: paused;
    translate: -5% 0%;
    transition: translate 0.25s ease-out;
}

.btn-lgbt:hover::before {
    animation-play-state: running;
    transition-duration: 0.75s;
    translate: 0% 0%;
}

@keyframes an-at-keyframe-css-at-rule-that-translates-via-the-transform-property-the-background-by-negative-25-percent-of-its-width-so-that-it-gives-a-nice-border-animation_-We-use-the-translate-property-to-have-a-nice-transition-so-it_s-not-a-jerk-of-a-start-or-stop {
    to {
        transform: translateX(-25%);
    }
}

.btn-lgbt.btn-black span {
    position: relative;
    display: block;
    padding: 1rem 1.5rem;
    font-size: 14px;
    background: #000;
    border-radius: 3px;
    height: 100%;
}
.btn-lgbt.btn-white span {
    position: relative;
    display: block;
    padding: 1rem 1.5rem;
    font-size: 14px;
    background: white;
    color: black;
    border-radius: 3px;
    height: 100%;
}

.text-info-payment {
    width: 510px;
}

.w-140 {
    width: 560px !important;
}
.w-130 {
    width: 460px !important;
}

.mt-26px {
    margin-top: 26px !important;
}

.color-delete {
    color: rgb(255, 86, 48);
}

.h-full {
    height: 100%;
}

.ql-toolbar.ql-snow {
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    border-color: black;
    transition: all 0.2s ease-in-out;
}

.ql-container.ql-snow {
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
    transition: all 0.2s ease-in-out;
    border-top: 0px;
    &:focus-within {
        border: 1px solid;
        border-top: 0px;
        border-color: black;
        transition: all 0.2s ease-in-out;
    }
}

================
File: src/component/globalStyles/imgPreview/index.js
================
// import styles from "./ImgPreview.module.scss";
// import clsx from "clsx";

// function ImgPreview({img}) {
//     return (
//         <div className={clsx(styles.imgList)}>
//             <div className={clsx(styles.imgField)}>
//                 <img src="" alt="" />
//                 <button
//                     onClick={}
//                     className={clsx(styles.btnClose)}
//                 >
//                     {" "}
//                     <img src={btnClose} alt="" />{" "}
//                 </button>
//             </div>
//         </div>
//     );
// }

// export default ImgPreview;

================
File: src/component/globalStyles/index.js
================
import "./GlobalStyles.scss";

function GlobalStyle({ children }) {
    return children;
}

export default GlobalStyle;

================
File: src/component/globalStyles/ladingComponent/CourseCard.js
================
import React, { useState, memo, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import * as dataApi from "../../api/apiService/dataService.js";
import { useSelector } from "react-redux";
import * as userApi from "../../api/apiService/authService.js";
import { toast } from "sonner";
import clsx from "clsx";

function Badge({ keyData, children }) {
    return (
        <div
            key={keyData}
            className="px-1 py-1 bg-orange-100 text-orange-700 rounded-md text-xs font-semibold uppercase w-10"
        >
            {children}
        </div>
    );
}

export const CourseCard = memo(({ course, textBtn = "Get It Now", courseId = -1 }) => {
    const user = useSelector((state) => state.login.user);
    const navigate = useNavigate();

    const handleGoToCourse = () => {
        if (user) {
            const fetchApi = async () => {
                try {
                    const result = await userApi.getListCourse(user.email);
                    let isEnroll = false;
                    result.content.forEach((progress) => {
                        if (progress.course.id === courseId) {
                            isEnroll = true;
                            navigate(`/course/detail/${courseId}`);
                        }
                    });
                    if (!isEnroll) {
                        navigate(`/course/${courseId}`);
                    }
                } catch (error) {
                    console.log(error);
                }
            };
            fetchApi();
        } else {
            toast.info("Please login to enroll this course");
            sessionStorage.setItem("prevPath", window.location.pathname);
            navigate("/login");
        }
    };

    return (
        <div className="course-card w-full h-full  px-4 mb-8">
        <div className="b-shadow bg-white rounded-lg border border-gray-100 overflow-hidden">
            {/* Phần chứa hình ảnh */}
            <div className="relative">
                <img
                    src={course.thumbnail}
                    alt={course.title}
                    className="w-full h-40 object-cover"
                />
            </div>
    
            {/* Phần chứa Badge (chuyển xuống dưới) */}
            <div className="px-4 mt-2 h-2">
                {course.categories.length > 0 && (
                    <Badge keyData={course.categories[0].id}>
                        {course.categories[0].name}
                    </Badge>
                )}
            </div>
    
            {/* Nội dung khóa học */}
            <div className="p-4">
                <h3 className="text-md sm:text-lg font-semibold text-neutral-800 mb-2 line-clamp-2">
                    {course.title}
                </h3>
                <div className="flex items-center mb-2 text-yellow-500 text-sm">
                    <span className="mr-1">5.0★</span>
                    <span>{course.rating}</span>
                    <span className="ml-2 text-gray-500 ml-20">{course.students}30000 students</span>
                </div>
                <button
                    type="button"
                    onClick={handleGoToCourse}
                    className="mt-4 w-full px-4 py-2 text-sm font-medium text-white rounded-md bg-orange-500 hover:bg-orange-600 transition"
                >
                    {textBtn}
                </button>
            </div>
        </div>
    </div>
    
    );
});

const CoursesComponent = () => {
    const [courses, setCourses] = useState([]);
    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllCourse(0, 9999);
                setCourses(result.content.content);
            } catch (error) {
                console.log("error: " + error);
            }
        };
        fetchApi();
    }, []);
    return (
        <section className="p-4 sm:px-5 sm:py-10 mx-auto max-w-[1200px]">
            <div className="flex flex-wrap justify-center">
                {courses &&
                    courses.map((course, index) => (
                        <CourseCard key={index} course={course} courseId={course.id} />
                    ))}
            </div>
        </section>
    );
};

export default CoursesComponent;

================
File: src/component/globalStyles/ladingComponent/CourseSection.js
================
import * as React from "react";

function CourseSection() {
    return (
        <section className="flex flex-wrap gap-5 mx-auto max-w-screen-xl text-start mt-10">
            <div className="flex flex-col flex-1">
                <h2 className="text-2xl md:text-4xl font-semibold leading-tight md:leading-snug text-neutral-800">
                    Our Courses
                </h2>
                <p className="mt-1 text-sm md:text-base leading-snug md:leading-normal text-zinc-600">
                   There will be more investment in terms of
                    in-depth knowledge, the quality of teaching, and many
                    valuable things.
                </p>
            </div>
        </section>
    );
}

export default CourseSection;

================
File: src/component/globalStyles/ladingComponent/ImageLandingPage.js
================
import * as React from "react";

export default function Imagelandingpage() {
    return (
        <main className="flex justify-center items-center px-16 py-20 mt-40 w-full max-w-screen-xl rounded-xl border-solid border-[16px] border-neutral-100 max-md:px-5 max-md:mt-10 max-md:max-w-full">
            <div className="flex justify-center items-center px-2.5 mt-56 mb-40 border-4 border-solid bg-white bg-opacity-20 border-white border-opacity-30 h-[54px] rounded-[68px] w-[54px] max-md:my-10">
                <img
                    loading="lazy"
                    src="https://cdn.builder.io/api/v1/image/assets/TEMP/261804cbee74c42a8269a4b836f398757e9f80c68f22d0b3e89abb48f0cadc48?apiKey=9349475655ee4a448868f824f5feb11d&"
                    alt="Decorative image"
                    className="w-full aspect-square"
                />
            </div>
        </main>
    );
}

================
File: src/component/globalStyles/ladingComponent/Slideshow.css
================
.swiper-button-next,
.swiper-button-prev {
    background-color: rgba(255, 255, 255);
    border-radius: 50%;
    width: 30px;
    height: 30px;
    top: 50%;
    transform: translateY(-20%);
    color: #000;
    z-index: 101;
}

.swiper-button-next {
    right: 0;
    margin-right: 10px;
}

.swiper-button-prev {
    margin-left: 10px;
    left: 0; /* Half outside the swiper container */
}

.swiper-button-next:hover,
.swiper-button-prev:hover {
    background-color: rgba(255, 255, 255, 0.8);
}
.swiper-button-next:after,
.swiper-button-prev:after {
    font-size: 15px;
}
.SwiperBulletcustom {
    width: 32px;
    height: 8px;
    background-color: white;
    border-radius: 4px;
    margin-right: 8px;
    opacity: 1;
}

.swiper-pagination-bullet-active.SwiperBulletcustom {
    width: 50px;
    background-color: #a855f7;
}

================
File: src/component/globalStyles/ladingComponent/SlideShow.js
================
import React, { memo } from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";
import "./Slideshow.css";
import { Pagination, Navigation, Autoplay } from "swiper/modules";
import background from "../../assets/images/Banner_01_2.png";

const PromoSlideshow = () => {
    const slides = [
        {
            img: background,
            title: "Lorem ipsum dolor",
            description:
                "Lorem ipsum dolor, sit amet consectetur adipisicing elit. Eos, natus fugiat quod unde aliquid eius facere dignissimos aut quidem. Temporibus sapiente eligendi reiciendis dolorem rerum nobis fugit magnam, dolore corrupti!",
            buttonText: "Register Now",
        },
        {
            img: background,
            title: "Lorem ipsum dolor",
            description:
                "Lorem ipsum dolor, sit amet consectetur adipisicing elit. Eos, natus fugiat quod unde aliquid eius facere dignissimos aut quidem. Temporibus sapiente eligendi reiciendis dolorem rerum nobis fugit magnam, dolore corrupti!",
            buttonText: "Register Now",
        },
    ];

    return (
        <div className="max-w-screen-xl mx-auto">
            <Swiper
                modules={[Pagination, Navigation, Autoplay]}
                spaceBetween={50}
                slidesPerView={1}
                loop={true}
                autoplay={{
                    delay: 3500,
                    disableOnInteraction: false,
                }}
                pagination={{
                    clickable: true,
                    renderBullet: (index, className) => {
                        return (
                            '<span class="' +
                            className +
                            ' SwiperBulletcustom"></span>'
                        );
                    },
                }}
                navigation={true}
                className="relative rounded-xl"
                style={{ height: "300px" }}
            >
                {slides.map((slide, index) => (
                    <SwiperSlide
                        key={index}
                        className="flex items-center justify-between bg-pink-300"
                    >
                        <div className="row">
                        <div className="flex z-10 p-10 text-left text-white w-full md:w-1/2 col-lg-6">
                            <div>
                                <h2 className="pl-20 text-2xl md:text-4xl font-bold">
                                    {slide.title}
                                </h2>
                                <p className="pl-20 my-4 text-sm md:text-base">
                                    {slide.description}
                                </p>
                                <button className="ml-20 px-4 py-2 mb-2 text-white bg-purple-500 rounded-full font-medium shadow-lg text-sm md:text-base">
                                    {slide.buttonText}
                                </button>
                            </div>
                        </div>
                        <div className="md:w-1/2 col-lg-6">
                            <img
                                src={slide.img}
                                alt="Slide image"
                                className="object-contain h-full m-auto pb-5"
                            />
                        </div>
                        </div>
                    </SwiperSlide>
                ))}
            </Swiper>
        </div>
    );
};

export default PromoSlideshow;

================
File: src/component/globalStyles/modal/index.js
================
import { Dialog, Transition } from "@headlessui/react";
import styles from "./Model.module.scss";
import { Fragment } from "react";
import clsx from "clsx";

function Modal({
    icon,
    isOpen,
    closeModal,
    handleRemove,
    children,
    title = "Delete",
    description = "Are you sure want to delete?",
}) {
    if (!isOpen) return null;

    return (
        <Transition appear show={isOpen} as={Fragment}>
            <Dialog as="div" className="relative z-10" onClose={closeModal}>
                <Transition.Child
                    as={Fragment}
                    enter="ease-out duration-300"
                    enterFrom="opacity-0"
                    enterTo="opacity-100"
                    leave="ease-in duration-200"
                    leaveFrom="opacity-100"
                    leaveTo="opacity-0"
                >
                    <div className="fixed inset-0 bg-black bg-opacity-25" />
                </Transition.Child>

                <div className="fixed inset-0 overflow-y-auto overlay">
                    <div className="flex min-h-full items-center justify-center p-4 text-center">
                        <Transition.Child
                            as={Fragment}
                            enter="ease-out duration-300"
                            enterFrom="opacity-0 scale-95"
                            enterTo="opacity-100 scale-100"
                            leave="ease-in duration-200"
                            leaveFrom="opacity-100 scale-100"
                            leaveTo="opacity-0 scale-95"
                        >
                            <Dialog.Panel className="z-50 w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                                <h2 className={styles.titleModal}>{title}</h2>
                                <div className={clsx(styles.descModal, "mt-3")}>
                                    {description}
                                </div>
                                <div className={clsx("flex justify-end mt-4")}>
                                    <button
                                        onClick={handleRemove}
                                        className={clsx("btnModal delete")}
                                    >
                                        {title}
                                    </button>
                                    <button
                                        onClick={closeModal}
                                        className={clsx("btnModal cancel")}
                                    >
                                        Cancel
                                    </button>
                                </div>
                            </Dialog.Panel>
                        </Transition.Child>
                    </div>
                </div>
            </Dialog>
        </Transition>
    );
}
export default Modal;

================
File: src/component/globalStyles/modal/Model.module.scss
================
.titleModal {
    font-weight: 700;
    font-size: 16px;
}

.descModal {
    font-weight: 400;
    font-size: 14px;
}

================
File: src/component/globalStyles/notificationItem/index.js
================
import styles from "./NotificationItem.module.scss";
import clsx from "clsx";
import { Popover, Transition } from "@headlessui/react";
import { Fragment, useEffect, useState } from "react";
import avatar from "../../assets/images/avatar_25.jpg";
import { useDispatch, useSelector } from "react-redux";
import moment from "moment/moment";
import { useNavigate } from "react-router-dom";
import * as userApi from "../../api/apiService/authService";
import notificationSlice from "../../redux/reducers/notificationSlice";
export default function NotificationItem({ iconBtn }) {
    const user = useSelector((state) => state.login.user);

    const notifications = useSelector(
        (state) => state.notification.notifications
    );
    const [totalUnRead, setTotalUnRead] = useState(0);
    const navigate = useNavigate();
    const dispatch = useDispatch();

    useEffect(() => {
        let total = 0;
        notifications.forEach((noti) => {
            if (!noti.read) {
                console.log(noti.read);
                total += 1;
            }
        });
        setTotalUnRead((prev) => total);
    }, [notifications]);

    const handleRead = (notification) => {
        const fetchApi = async () => {
            try {
                console.log("read");
                const result = await userApi.readNotification(
                    user.email,
                    notification.id
                );
                dispatch(notificationSlice.actions.update(result.content));
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
        navigate(notification.path);
    };

    const handleReadAll = () => {
        if (totalUnRead === 0) {
            return;
        }

        const fetchApi = async () => {
            try {
                const result = await userApi.readAllNotifications(user.email);
                dispatch(notificationSlice.actions.init(result.content));
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };

    const handleRemoveAllNotification = () => {
        const fetchApi = async () => {
            try {
                const result = await userApi.removeAllNotifications(user.email);
                dispatch(notificationSlice.actions.removeAll(result.content));
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };

    return (
        <div className="w-full max-w-sm px-1">
            <Popover className="relative">
                {({ open }) => (
                    <>
                        <Popover.Button
                            className={`
              text-black  items-center group inline-flex x-3 text-base font-medium hover:text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-white/75`}
                        >
                            <span className="relative">
                                <div className={clsx(styles.button)}>
                                    {iconBtn}
                                </div>
                                {totalUnRead > 0 && (
                                    <div className={styles.neo}>
                                        {totalUnRead}
                                    </div>
                                )}
                            </span>
                        </Popover.Button>
                        <Transition
                            as={Fragment}
                            enter="transition ease-out duration-200"
                            enterFrom="opacity-0 translate-y-1"
                            enterTo="opacity-100 translate-y-0"
                            leave="transition ease-in duration-150"
                            leaveFrom="opacity-100 translate-y-0"
                            leaveTo="opacity-0 translate-y-1"
                        >
                            <Popover.Panel
                                className={clsx(
                                    styles.wrap,
                                    "absolute -left-1/3 z-10 mt-3 -translate-x-1/2 transform px-4 sm:px-0 "
                                )}
                            >
                                <div className="overflow-hidden rounded-lg shadow-lg ring-1 ring-black/5">
                                    <div className="relative bg-white ">
                                        <div
                                            className={clsx(
                                                styles.header,
                                                "font-semibold text-lg flex justify-between items-center"
                                            )}
                                        >
                                            <span> Notifications</span>
                                            <span
                                                onClick={handleReadAll}
                                                className=" mr-1 p-1 hover:opacity-80 text-xs font-medium"
                                            >
                                                Mark all as read
                                            </span>
                                        </div>
                                        <hr className="cssHr" />
                                        <div
                                            className={clsx(
                                                styles.header,
                                                "flex py-1.5  text-xs font-medium gap-4 justify-between"
                                            )}
                                        >
                                            <div className="flex gap-2">
                                                <div className="flex items-center gap-2">
                                                    All
                                                    <div className="boxReaded">
                                                        {notifications.length}
                                                    </div>
                                                </div>
                                                <div className="flex items-center gap-2">
                                                    Unread
                                                    <div className="boxNew">
                                                        {totalUnRead}
                                                    </div>
                                                </div>
                                            </div>
                                            <div className="flex items-center mr-2">
                                                <div
                                                    className="btnCss"
                                                    onClick={
                                                        handleRemoveAllNotification
                                                    }
                                                >
                                                    Remove All
                                                </div>
                                            </div>
                                        </div>
                                        <hr className="cssHr" />
                                        <div
                                            className={clsx(styles.boxContent)}
                                        >
                                            {notifications &&
                                                notifications.map(
                                                    (noti, ind) => {
                                                        const time = moment(
                                                            noti.date
                                                        ).fromNow();
                                                        return (
                                                            <div key={ind}>
                                                                <div
                                                                    className={clsx(
                                                                        styles.item,
                                                                        "flex gap-3",
                                                                        {
                                                                            [styles.unRead]:
                                                                                !noti.read,
                                                                        }
                                                                    )}
                                                                    onClick={() =>
                                                                        handleRead(
                                                                            noti
                                                                        )
                                                                    }
                                                                >
                                                                    <img
                                                                        src={
                                                                            avatar
                                                                        }
                                                                        alt="avatar"
                                                                    />
                                                                    <div className="text-xs flex-1">
                                                                        <strong>
                                                                            {
                                                                                noti.fromUser
                                                                            }
                                                                        </strong>{" "}
                                                                        {
                                                                            noti.content
                                                                        }
                                                                        <div className="time font-medium mt-1">
                                                                            {
                                                                                time
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                    {/* {noti.read ? (
                                                                        <div className="dotReaded"></div>
                                                                    ) : (
                                                                        <div className="dotNew"></div>
                                                                    )} */}
                                                                    {!noti.read && (
                                                                        <div className="dotNew"></div>
                                                                    )}
                                                                </div>
                                                                <hr className="cssHr" />
                                                            </div>
                                                        );
                                                    }
                                                )}
                                        </div>
                                    </div>
                                </div>
                            </Popover.Panel>
                        </Transition>
                    </>
                )}
            </Popover>
        </div>
    );
}

================
File: src/component/globalStyles/notificationItem/NotificationItem.module.scss
================
.wrap {
    width: 400px;
    cursor: default;
}
@media(max-width:768px){
    .wrap{
        width: 320px;
    }
}
.item {
    padding: 14px 18px;
    transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    img {
        width: 40px;
        height: 40px;
        border-radius: 100rem;
    }
    &:hover {
        background-color: rgba(145, 158, 171, 0.15);
    }
}

.header {
    padding: 12px 8px 30px 20px;
}

.boxContent {
    overflow-y: scroll !important;
    max-height: 405px;
}

.neo {
    width: 18px;
    height: 18px;
    background: red;
    color: white;
    position: absolute;
    font-size: 12px;
    top: -4px;
    right: -4px;
    font-weight: 600;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 100rem;
}

.unRead {
    background-color: rgba(145, 158, 171, 0.15);
}

.button {
    width: 36px;
    height: 36px;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    cursor: pointer;
    transition-duration: 0.3s;
    // box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.13);
    border: none;
    svg {
        fill: black;
        width: 18px;
    }
}

.button:hover {
    background-color: black;
    opacity: 1 !important;
}

.button:hover svg {
    animation: bellRing 0.6s both;
    fill: white;
}

/* bell ringing animation keyframes*/
@keyframes bellRing {
    0%,
    100% {
        transform-origin: top;
    }

    15% {
        transform: rotateZ(10deg);
    }

    30% {
        transform: rotateZ(-10deg);
    }

    45% {
        transform: rotateZ(5deg);
    }

    60% {
        transform: rotateZ(-5deg);
    }

    75% {
        transform: rotateZ(2deg);
    }
}

.button:active {
    transform: scale(0.8);
}

================
File: src/component/globalStyles/search/index.js
================
import React, { useState, useEffect, useRef } from "react";
import searchIcon from "../../assets/images/search.png";
import loadingIcon from "../../assets/images/loading.png";
import * as dataApi from "../../api/apiService/dataService";
import clsx from "clsx";
import styles from "./Search.module.scss";
let timerId = null;

const SearchBar = () => {
    const [searchTerm, setSearchTerm] = useState("");
    const [searchResult, setSearchResult] = useState([]);
    const [showResult, setShowResult] = useState(false);
    const searchBarRef = useRef(null);
    const [loading, setLoading] = useState(false);
    const inputRef = useRef();

    // API fetch function
    const fetchApi = async (title) => {
        try {
            const result = await dataApi.getCourseByName(title);
            setLoading(false);
            setShowResult(true);
            setSearchResult(result.content.content);
        } catch (error) {
            console.log(error);
        }
    };

    // Debounce function
    const debounce = (func, delay = 800) => {
        return (title) => {
            clearTimeout(timerId);
            timerId = setTimeout(() => {
                func(title);
            }, delay);
        };
    };

    const fetchApiRequest = debounce(fetchApi, 500);

    const handleSearch = (event) => {
        const title = event.target.value;

        setSearchTerm(title);
        setLoading(true);
        if (title.trim() === "") {
            setSearchResult([]);
            setShowResult(false);
            clearTimeout(timerId);
            return;
        }
        fetchApiRequest(title);
    };

    // Handle clicking outside of search bar to close results
    const handleClickOutside = (event) => {
        if (searchBarRef.current && !searchBarRef.current.contains(event.target)) {
            setShowResult(false);
        }
    };

    // Clear the search input
    const clearSearch = () => {
        setSearchTerm("");
        inputRef.current.focus();
        setSearchResult([]);
        setShowResult(false);
    };

    useEffect(() => {
        document.addEventListener("mousedown", handleClickOutside);
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, []);

    return (
        <div
            className={clsx(
                styles.searchWrap,
                "relative flex items-center bg-white border border-gray-300 w-80 hover:border-black transition-all duration-200"
            )}
            ref={searchBarRef}
        >
            <div className="flex w-full items-center pl-4 pr-2 py-2">
                <input
                    ref={inputRef}
                    type="text"
                    value={searchTerm}
                    onChange={handleSearch}
                    className="flex-grow text-sm pl-2 pr-4 text-gray-700 leading-tight focus:outline-none"
                    placeholder="What do you want learn..."
                    onClick={() => searchResult.length > 0 && setShowResult(true)}
                    style={{ borderRadius: "0px" }} // Loại bỏ bo tròn
                />
                <div className="flex items-center">
                    {loading && searchTerm !== "" && (
                        <img
                            src={loadingIcon}
                            alt="Loading"
                            className="w-4 h-4 animate-spin mr-2"
                        />
                    )}
                    {searchTerm.length > 0 && !loading && (
                        <button onClick={clearSearch} className="mr-2">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 20 20"
                                fill="#a6a7ac"
                                className="w-5 h-5 hover:opacity-80"
                            >
                                <path
                                    fillRule="evenodd"
                                    d="M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16ZM8.28 7.22a.75.75 0 0 0-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 1 0 1.06 1.06L10 11.06l1.72 1.72a.75.75 0 1 0 1.06-1.06L11.06 10l1.72-1.72a.75.75 0 0 0-1.06-1.06L10 8.94 8.28 7.22Z"
                                    clipRule="evenodd"
                                />
                            </svg>
                        </button>
                    )}
                    <button className="px-2">
                        <img
                            src={searchIcon}
                            alt="Search"
                            className="w-4 h-4"
                        />
                    </button>
                </div>
            </div>

            {showResult && (
                <div className="absolute top-full mt-2 w-full bg-white border border-gray-300 shadow-lg z-20">
                    {searchResult.length > 0 ? (
                        <div>
                            {searchResult.map((course, index) => (
                                <div
                                    key={index}
                                    className="flex font-semibold text-sm p-3 hover:bg-gray-100 cursor-pointer"
                                >
                                    <div className="w-10 h-10 mr-3">
                                        <img
                                            src={course.thumbnail ? course.thumbnail : ""}
                                            alt="thumbnail"
                                            className="w-10 h-10 object-cover"
                                        />
                                    </div>
                                    <div>
                                        {course.title}
                                        <div className="font-normal text-xs text-gray-500 mt-1">
                                            Tags:
                                            {course.categories.map((cate, ind) => (
                                                <span className="ml-1" key={ind}>
                                                    {cate.name}
                                                </span>
                                            ))}
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <div className="p-4 text-center text-sm">
                            <p className="text-base font-bold">No Results Found</p>
                            <p className="text-gray-500 mt-1">Try checking for typos or using complete words.</p>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export default SearchBar;

================
File: src/component/globalStyles/search/Search.module.scss
================
.searchWrap {
    transition: all 0.2s ease-in-out;
    &:focus-within {
        border-color: black;
    }
}

================
File: src/component/globalStyles/useNotificationWebSocket/index.js
================
import { Stomp } from "@stomp/stompjs";
import { Socket } from "net";
import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import notificationSlice from "../../redux/reducers/notificationSlice";
import SockJS from "sockjs-client";
import { client } from "stompjs";
import { toast } from "sonner";

export default function useNotificationWebSocket() {
    const userInfo = useSelector((state) => state.login.user);
    const dispatch = useDispatch();

    const onDisconnected = () => {
        console.log("Disconnect Websocket");
    };

    useEffect(() => {
        let stompClient = null;
        if (userInfo) {
            const alias = userInfo.email.split("@")[0];
            const sockjs = new SockJS("http://localhost:8080/ws");
            stompClient = Stomp.over(sockjs);
            stompClient.connect({}, () => {
                stompClient.subscribe(
                    `/user/${alias}/notification`,
                    (message) => {
                        const data = JSON.parse(message.body);
                        console.log(data);
                        toast.info("You have a new notification");
                        dispatch(notificationSlice.actions.add(data));
                    }
                );
            });
        }
        return () => {
            if (stompClient) {
                stompClient.disconnect(onDisconnected, {});
            }
        };
    }, [userInfo, dispatch]);
}

================
File: src/component/globalStyles/validation/index.js
================
const validateForm = (formData) => {
    const errors = {};
    if (!formData.title) errors.title = "Course Name is required.";
    if (!formData.description) errors.description = "Description is required.";
    if (!formData.price) errors.price = "Price is required.";
    if (!formData.thumbnail) errors.thumbnail = "Thumbnail is required.";
    if (formData.categories.length === 0)
        errors.categories = "At least one category is required.";

    formData.sections.forEach((section, sectionIndex) => {
        if (!section.title)
            errors[`section-${sectionIndex}`] = `Section ${
                sectionIndex + 1
            } Name is required.`;
        section.lessons?.forEach((lesson, lessonIndex) => {
            if (!lesson.title)
                errors[`lesson-${sectionIndex}-${lessonIndex}`] = `Lesson ${
                    lessonIndex + 1
                } Name is required in Section ${sectionIndex + 1}.`;
            if (!lesson.description)
                errors[
                    `lesson-desc-${sectionIndex}-${lessonIndex}`
                ] = `Lesson ${
                    lessonIndex + 1
                } Description is required in Section ${sectionIndex + 1}.`;
        });
    });

    return errors;
};
export default validateForm;

================
File: src/component/imgPreview/index.js
================
// import styles from "./ImgPreview.module.scss";
// import clsx from "clsx";

// function ImgPreview({img}) {
//     return (
//         <div className={clsx(styles.imgList)}>
//             <div className={clsx(styles.imgField)}>
//                 <img src="" alt="" />
//                 <button
//                     onClick={}
//                     className={clsx(styles.btnClose)}
//                 >
//                     {" "}
//                     <img src={btnClose} alt="" />{" "}
//                 </button>
//             </div>
//         </div>
//     );
// }

// export default ImgPreview;

================
File: src/component/ladingComponent/CourseCard.js
================
import React, { useState, memo, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import * as dataApi from "../../api/apiService/dataService.js";
import { useSelector } from "react-redux";
import * as userApi from "../../api/apiService/authService.js";
import { toast } from "sonner";
import clsx from "clsx";

function Badge({ keyData, children }) {
    return (
        <div
            key={keyData}
            className="px-2 py-1 bg-orange-100 text-orange-700 rounded-md text-xs font-semibold uppercase inline-block"
        >
            {children}
        </div>
    );
}

export const CourseCard = memo(({ course, textBtn = "Get It Now", courseId = -1 }) => {
    const user = useSelector((state) => state.login.user);
    const navigate = useNavigate();

    const handleGoToCourse = async () => {
        // Check if user is logged in
        if (!user) {
            toast.info("Please login to enroll in this course");
            sessionStorage.setItem("prevPath", window.location.pathname);
            navigate("/login");
            return;
          }
        
          try {
            const email = user.email;
            if (!email) {
              toast.error("Please login to access this course.");
              sessionStorage.setItem("prevPath", window.location.pathname);
              navigate("/login");
              return;
            }
        
            // Check enrollment status
            const isEnrolledResponse = await userApi.checkUserEnrollment(courseId, user.id);
            console.log(isEnrolledResponse)
            const isEnrolled = isEnrolledResponse.data; // Assuming the backend returns a boolean
        
            console.log("Enrollment status:", isEnrolled);
        
            // Navigate based on enrollment status
            if (isEnrolled) {
              toast.success("You are already enrolled in this course. Redirecting...");
              navigate(`/course/detail/${courseId}`);
            } else {
              navigate(`/course/${courseId}`);
            }
          } catch (error) {
            toast.error("Failed to check enrollment status. Please try again.");
            console.error("Error checking enrollment:", error);
          }
    };
    

    return (
        <div className="course-card w-full h-full  px-4 mb-8">
        <div className="bg-white rounded-lg border border-gray-100 overflow-hidden shadow-md">
            {/* Phần chứa hình ảnh */}
            <div className="relative">
                <img
                    src={course.thumbnail}
                    alt={course.title}
                    className="w-full h-40 object-cover"
                />
            </div>
    
            {/* Phần chứa Badge (chuyển xuống dưới) */}
            <div className="px-4 mt-2 h-2">
                {course.categories.length > 0 && (
                    <Badge keyData={course.categories[0].id}>
                        {course.categories[0].name}
                    </Badge>
                )}
            </div>
    
            {/* Nội dung khóa học */}
            <div className="p-4">
                <h3 className="text-md sm:text-lg font-semibold text-neutral-800 mb-2 line-clamp-2">
                    {course.title}
                </h3>
                <div className="flex items-center mb-2 text-yellow-500 text-sm">
                    <span className="mr-1">5.0★</span>
                    <span>{course.rating}</span>
                    <span className="ml-2 text-gray-500 ml-20">{course.students}30000 students</span>
                </div>
                <button
                    type="button"
                    onClick={handleGoToCourse}
                    className="mt-4 w-full px-4 py-2 text-sm font-medium text-white rounded-md bg-orange-500 hover:bg-orange-600 transition"
                >
                    {textBtn}
                </button>
            </div>
        </div>
    </div>
    
    );
});

const CoursesComponent = () => {
    const [courses, setCourses] = useState([]);
    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllCourse(0, 100);
                console.log(result.content.content)
                setCourses(result.content.content);
            } catch (error) {
                console.log("error: " + error);
            }
        };
        fetchApi();
    }, []);
    return (
        <section className="p-4 sm:px-5 sm:py-10 mx-auto max-w-[1200px]">
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 gap-6">
                {courses &&
                    courses.map((course, index) => (
                        <CourseCard key={index} course={course} courseId={course.id} />
                    ))}
            </div>
        </section>
    );
};

export default CoursesComponent;

================
File: src/component/ladingComponent/CourseSection.js
================
import * as React from "react";

function CourseSection() {
    return (
        <section className="flex flex-wrap gap-5 mx-auto max-w-screen-xl text-start mt-10">
            <div className="flex flex-col flex-1">
                <h2 className="text-2xl md:text-4xl font-semibold leading-tight md:leading-snug text-neutral-800">
                    Our Courses
                </h2>
                <p className="mt-1 text-sm md:text-base leading-snug md:leading-normal text-zinc-600">
                   There will be more investment in terms of
                    in-depth knowledge, the quality of teaching, and many
                    valuable things.
                </p>
            </div>
        </section>
    );
}

export default CourseSection;

================
File: src/component/ladingComponent/ImageLandingPage.js
================
import * as React from "react";

export default function Imagelandingpage() {
    return (
        <main className="flex justify-center items-center px-16 py-20 mt-40 w-full max-w-screen-xl rounded-xl border-solid border-[16px] border-neutral-100 max-md:px-5 max-md:mt-10 max-md:max-w-full">
            <div className="flex justify-center items-center px-2.5 mt-56 mb-40 border-4 border-solid bg-white bg-opacity-20 border-white border-opacity-30 h-[54px] rounded-[68px] w-[54px] max-md:my-10">
                <img
                    loading="lazy"
                    src="https://cdn.builder.io/api/v1/image/assets/TEMP/261804cbee74c42a8269a4b836f398757e9f80c68f22d0b3e89abb48f0cadc48?apiKey=9349475655ee4a448868f824f5feb11d&"
                    alt="Decorative image"
                    className="w-full aspect-square"
                />
            </div>
        </main>
    );
}

================
File: src/component/ladingComponent/Slideshow.css
================
.swiper-button-next,
.swiper-button-prev {
    background-color: rgba(255, 255, 255);
    border-radius: 50%;
    width: 30px;
    height: 30px;
    top: 50%;
    transform: translateY(-20%);
    color: #000;
    z-index: 101;
}

.swiper-button-next {
    right: 0;
    margin-right: 10px;
}

.swiper-button-prev {
    margin-left: 10px;
    left: 0; /* Half outside the swiper container */
}

.swiper-button-next:hover,
.swiper-button-prev:hover {
    background-color: rgba(255, 255, 255, 0.8);
}
.swiper-button-next:after,
.swiper-button-prev:after {
    font-size: 15px;
}
.SwiperBulletcustom {
    width: 32px;
    height: 8px;
    background-color: white;
    border-radius: 4px;
    margin-right: 8px;
    opacity: 1;
}

.swiper-pagination-bullet-active.SwiperBulletcustom {
    width: 50px;
    background-color: #a855f7;
}

================
File: src/component/ladingComponent/SlideShow.js
================
import React, { memo } from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";
import "./Slideshow.css";
import { Pagination, Navigation, Autoplay } from "swiper/modules";
import background from "../../assets/images/Banner_01_2.png";

const PromoSlideshow = () => {
    const slides = [
        {
            img: background,
            title: "Lorem ipsum dolor",
            description:
                "Lorem ipsum dolor, sit amet consectetur adipisicing elit. Eos, natus fugiat quod unde aliquid eius facere dignissimos aut quidem. Temporibus sapiente eligendi reiciendis dolorem rerum nobis fugit magnam, dolore corrupti!",
            buttonText: "Register Now",
        },
        {
            img: background,
            title: "Lorem ipsum dolor",
            description:
                "Lorem ipsum dolor, sit amet consectetur adipisicing elit. Eos, natus fugiat quod unde aliquid eius facere dignissimos aut quidem. Temporibus sapiente eligendi reiciendis dolorem rerum nobis fugit magnam, dolore corrupti!",
            buttonText: "Register Now",
        },
    ];

    return (
        <div className="max-w-screen-xl mx-auto">
            <Swiper
                modules={[Pagination, Navigation, Autoplay]}
                spaceBetween={50}
                slidesPerView={1}
                loop={true}
                autoplay={{
                    delay: 3500,
                    disableOnInteraction: false,
                }}
                pagination={{
                    clickable: true,
                    renderBullet: (index, className) => {
                        return (
                            '<span class="' +
                            className +
                            ' SwiperBulletcustom"></span>'
                        );
                    },
                }}
                navigation={true}
                className="relative rounded-xl"
                style={{ height: "300px" }}
            >
                {slides.map((slide, index) => (
                    <SwiperSlide
                        key={index}
                        className="flex items-center justify-between bg-pink-300"
                    >
                        <div className="row">
                        <div className="flex z-10 p-10 text-left text-white w-full md:w-1/2 col-lg-6">
                            <div>
                                <h2 className="pl-20 text-2xl md:text-4xl font-bold">
                                    {slide.title}
                                </h2>
                                <p className="pl-20 my-4 text-sm md:text-base">
                                    {slide.description}
                                </p>
                                <button className="ml-20 px-4 py-2 mb-2 text-white bg-purple-500 rounded-full font-medium shadow-lg text-sm md:text-base">
                                    {slide.buttonText}
                                </button>
                            </div>
                        </div>
                        <div className="md:w-1/2 col-lg-6">
                            <img
                                src={slide.img}
                                alt="Slide image"
                                className="object-contain h-full m-auto pb-5"
                            />
                        </div>
                        </div>
                    </SwiperSlide>
                ))}
            </Swiper>
        </div>
    );
};

export default PromoSlideshow;

================
File: src/component/LearningComponent/CourseInfo.js
================
// import React from 'react';
// import CourseInfoHeader from './CourseInfoHeader';
// import CourseInfoDetail from './CourseInfoDetail';

// const CourseInfo = ({ course }) => {
    
//   return (
//     <div className="flex flex-wrap gap-10 items-center px-8 py-5 w-full bg-slate-100">
//       <CourseInfoHeader />
//       <CourseInfoDetail
//         title={course.title}
//         sectionsCount={course.sectionsCount}
//         lecturesCount={course.lecturesCount}
//         duration={course.duration}
//       />
//       {/* Add CourseInfoButtons here if needed */}
//     </div>
//   );
// };

// export default CourseInfo;

================
File: src/component/LearningComponent/CourseInfoButtons.js
================
import React from 'react';

const CourseInfoDetails = () => {
  return (
    <div data-layername="heading" className="flex flex-col self-stretch my-auto min-w-[240px] w-[1155px] max-md:max-w-full">
      <h2 data-layername="completeWebsiteResponsiveDesignFromFigmaToWebflowToWebsiteDesign" className="text-lg font-medium leading-none text-neutral-800 max-md:max-w-full">
        Complete Website Responsive Design: from Figma to Webflow to Website Design
      </h2>
      <div data-layername="funfact" className="flex gap-4 items-start self-start mt-3 text-sm tracking-normal leading-loose text-gray-600">
        <div data-layername="sections" className="flex gap-1.5 items-center">
          <img loading="lazy" src="https://cdn.builder.io/api/v1/image/assets/TEMP/8cf366cd34ab8b5d4cd45ab7c71c60bd034877bbf0693e2ee39d9ecb522c053a?placeholderIfAbsent=true&apiKey=9349475655ee4a448868f824f5feb11d" alt="" className="object-contain shrink-0 self-stretch my-auto w-5 aspect-square" />
          <div data-layername="6Sections" className="self-stretch my-auto">6 Sections</div>
        </div>
        <div data-layername="lectures" className="flex gap-1.5 items-center">
          <img loading="lazy" src="https://cdn.builder.io/api/v1/image/assets/TEMP/338e830eec014330ce2a92be373e18dacb23bde78a6e898be522e28771877bcc?placeholderIfAbsent=true&apiKey=9349475655ee4a448868f824f5feb11d" alt="" className="object-contain shrink-0 self-stretch my-auto w-5 aspect-square" />
          <div data-layername="202Lectures" className="self-stretch my-auto">202 lectures</div>
        </div>
        <div data-layername="duration" className="flex gap-1.5 items-center">
          <img loading="lazy" src="https://cdn.builder.io/api/v1/image/assets/TEMP/e741bbd4b7dc70c93c9b761f4b9c581051feedaf16bfd30c61ff7268f6580b05?placeholderIfAbsent=true&apiKey=9349475655ee4a448868f824f5feb11d" alt="" className="object-contain shrink-0 self-stretch my-auto w-5 aspect-square" />
          <div data-layername="19H37M" className="self-stretch my-auto">19h 37m</div>
        </div>
      </div>
    </div>
  );
};

export default CourseInfoDetails;

================
File: src/component/LearningComponent/CourseInfoDetail.js
================
import React from 'react';

const CourseInfoDetails = ({ title, sectionsCount, lecturesCount, duration }) => {
  return (
    <div className="flex flex-col w-full">
      <h2 className="text-xl font-semibold text-neutral-800">
        {title}
      </h2>
      <div className="flex gap-4 items-center mt-2 text-sm text-gray-600">
        <div className="flex items-center gap-1.5">
          {/* Sections Icon */}
          <img src="path/to/sections-icon.svg" alt="" className="w-5 h-5" />
          <span>{sectionsCount} Sections</span>
        </div>
        <div className="flex items-center gap-1.5">
          {/* Lectures Icon */}
          <img src="path/to/lectures-icon.svg" alt="" className="w-5 h-5" />
          <span>{lecturesCount} Lectures</span>
        </div>
        <div className="flex items-center gap-1.5">
          {/* Duration Icon */}
          <img src="path/to/duration-icon.svg" alt="" className="w-5 h-5" />
          <span>{duration}</span>
        </div>
      </div>
    </div>
  );
};

export default CourseInfoDetails;

================
File: src/component/LearningComponent/CourseInfoHeader.js
================
import React from 'react';
import { useNavigate } from 'react-router-dom';

const CourseInfoHeader = () => {
  const navigate = useNavigate();

  const handleBackClick = () => {
    navigate(-1); // Navigate back to the previous page
  };

  return (
    <div className="flex items-center">
      <button
        onClick={handleBackClick}
        className="flex items-center p-4 bg-white h-14 w-14 rounded-full cursor-pointer"
      >
        <img
          src="path/to/back-icon.svg" // Replace with your back icon
          alt="Back"
          className="w-6 h-6"
        />
      </button>
    </div>
  );
};

export default CourseInfoHeader;

================
File: src/component/LearningComponent/Header.js
================
// Header.jsx
import React from 'react';
import { Link } from 'react-router-dom';

export default function Header({ courseTitle }) {
  return (
    <header className="fixed top-0 left-0 right-0 bg-white shadow-md z-50">
      <div className="flex items-center justify-between h-16 px-8">
        <Link to="/">
          <img src={logoPage} alt="Logo" className="h-8 w-auto" />
        </Link>
        <h1 className="text-lg font-semibold">{courseTitle}</h1>
        <div>
          <button className="text-gray-600 hover:text-gray-800">Progress</button>
        </div>
      </div>
    </header>
  );
}

================
File: src/component/modal/index.js
================
import { Dialog, Transition } from "@headlessui/react";
import styles from "./Model.module.scss";
import { Fragment } from "react";
import clsx from "clsx";

function Modal({
    icon,
    isOpen,
    closeModal,
    handleRemove,
    children,
    title = "Delete",
    description = "Are you sure want to delete?",
}) {
    if (!isOpen) return null;

    return (
        <Transition appear show={isOpen} as={Fragment}>
            <Dialog as="div" className="relative z-10" onClose={closeModal}>
                <Transition.Child
                    as={Fragment}
                    enter="ease-out duration-300"
                    enterFrom="opacity-0"
                    enterTo="opacity-100"
                    leave="ease-in duration-200"
                    leaveFrom="opacity-100"
                    leaveTo="opacity-0"
                >
                    <div className="fixed inset-0 bg-black bg-opacity-25" />
                </Transition.Child>

                <div className="fixed inset-0 overflow-y-auto overlay">
                    <div className="flex min-h-full items-center justify-center p-4 text-center">
                        <Transition.Child
                            as={Fragment}
                            enter="ease-out duration-300"
                            enterFrom="opacity-0 scale-95"
                            enterTo="opacity-100 scale-100"
                            leave="ease-in duration-200"
                            leaveFrom="opacity-100 scale-100"
                            leaveTo="opacity-0 scale-95"
                        >
                            <Dialog.Panel className="z-50 w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                                <h2 className={styles.titleModal}>{title}</h2>
                                <div className={clsx(styles.descModal, "mt-3")}>
                                    {description}
                                </div>
                                <div className={clsx("flex justify-end mt-4")}>
                                    <button
                                        onClick={handleRemove}
                                        className={clsx("btnModal delete")}
                                    >
                                        {title}
                                    </button>
                                    <button
                                        onClick={closeModal}
                                        className={clsx("btnModal cancel")}
                                    >
                                        Cancel
                                    </button>
                                </div>
                            </Dialog.Panel>
                        </Transition.Child>
                    </div>
                </div>
            </Dialog>
        </Transition>
    );
}
export default Modal;

================
File: src/component/modal/Model.module.scss
================
.titleModal {
    font-weight: 700;
    font-size: 16px;
}

.descModal {
    font-weight: 400;
    font-size: 14px;
}

================
File: src/component/notificationItem/index.js
================
import styles from "./NotificationItem.module.scss";
import clsx from "clsx";
import { Popover, Transition } from "@headlessui/react";
import { Fragment, useEffect, useState } from "react";
import avatar from "../../assets/images/avatar_25.jpg";
import { useDispatch, useSelector } from "react-redux";
import moment from "moment/moment";
import { useNavigate } from "react-router-dom";
import * as userApi from "../../api/apiService/authService";
import notificationSlice from "../../redux/reducers/notificationSlice";
export default function NotificationItem({ iconBtn }) {
    const user = useSelector((state) => state.login.user);

    const notifications = useSelector(
        (state) => state.notification.notifications
    );
    const [totalUnRead, setTotalUnRead] = useState(0);
    const navigate = useNavigate();
    const dispatch = useDispatch();

    useEffect(() => {
        let total = 0;
        notifications.forEach((noti) => {
            if (!noti.read) {
                console.log(noti.read);
                total += 1;
            }
        });
        setTotalUnRead((prev) => total);
    }, [notifications]);

    const handleRead = (notification) => {
        const fetchApi = async () => {
            try {
                console.log("read");
                const result = await userApi.readNotification(
                    user.email,
                    notification.id
                );
                dispatch(notificationSlice.actions.update(result.content));
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
        navigate(notification.path);
    };

    const handleReadAll = () => {
        if (totalUnRead === 0) {
            return;
        }

        const fetchApi = async () => {
            try {
                const result = await userApi.readAllNotifications(user.email);
                dispatch(notificationSlice.actions.init(result.content));
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };

    const handleRemoveAllNotification = () => {
        const fetchApi = async () => {
            try {
                const result = await userApi.removeAllNotifications(user.email);
                dispatch(notificationSlice.actions.removeAll(result.content));
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };

    return (
        <div className="w-full max-w-sm px-1">
            <Popover className="relative">
                {({ open }) => (
                    <>
                        <Popover.Button
                            className={`
              text-black  items-center group inline-flex x-3 text-base font-medium hover:text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-white/75`}
                        >
                            <span className="relative">
                                <div className={clsx(styles.button)}>
                                    {iconBtn}
                                </div>
                                {totalUnRead > 0 && (
                                    <div className={styles.neo}>
                                        {totalUnRead}
                                    </div>
                                )}
                            </span>
                        </Popover.Button>
                        <Transition
                            as={Fragment}
                            enter="transition ease-out duration-200"
                            enterFrom="opacity-0 translate-y-1"
                            enterTo="opacity-100 translate-y-0"
                            leave="transition ease-in duration-150"
                            leaveFrom="opacity-100 translate-y-0"
                            leaveTo="opacity-0 translate-y-1"
                        >
                            <Popover.Panel
                                className={clsx(
                                    styles.wrap,
                                    "absolute -left-1/3 z-10 mt-3 -translate-x-1/2 transform px-4 sm:px-0 "
                                )}
                            >
                                <div className="overflow-hidden rounded-lg shadow-lg ring-1 ring-black/5">
                                    <div className="relative bg-white ">
                                        <div
                                            className={clsx(
                                                styles.header,
                                                "font-semibold text-lg flex justify-between items-center"
                                            )}
                                        >
                                            <span> Notifications</span>
                                            <span
                                                onClick={handleReadAll}
                                                className=" mr-1 p-1 hover:opacity-80 text-xs font-medium"
                                            >
                                                Mark all as read
                                            </span>
                                        </div>
                                        <hr className="cssHr" />
                                        <div
                                            className={clsx(
                                                styles.header,
                                                "flex py-1.5  text-xs font-medium gap-4 justify-between"
                                            )}
                                        >
                                            <div className="flex gap-2">
                                                <div className="flex items-center gap-2">
                                                    All
                                                    <div className="boxReaded">
                                                        {notifications.length}
                                                    </div>
                                                </div>
                                                <div className="flex items-center gap-2">
                                                    Unread
                                                    <div className="boxNew">
                                                        {totalUnRead}
                                                    </div>
                                                </div>
                                            </div>
                                            <div className="flex items-center mr-2">
                                                <div
                                                    className="btnCss"
                                                    onClick={
                                                        handleRemoveAllNotification
                                                    }
                                                >
                                                    Remove All
                                                </div>
                                            </div>
                                        </div>
                                        <hr className="cssHr" />
                                        <div
                                            className={clsx(styles.boxContent)}
                                        >
                                            {notifications &&
                                                notifications.map(
                                                    (noti, ind) => {
                                                        const time = moment(
                                                            noti.date
                                                        ).fromNow();
                                                        return (
                                                            <div key={ind}>
                                                                <div
                                                                    className={clsx(
                                                                        styles.item,
                                                                        "flex gap-3",
                                                                        {
                                                                            [styles.unRead]:
                                                                                !noti.read,
                                                                        }
                                                                    )}
                                                                    onClick={() =>
                                                                        handleRead(
                                                                            noti
                                                                        )
                                                                    }
                                                                >
                                                                    <img
                                                                        src={
                                                                            avatar
                                                                        }
                                                                        alt="avatar"
                                                                    />
                                                                    <div className="text-xs flex-1">
                                                                        <strong>
                                                                            {
                                                                                noti.fromUser
                                                                            }
                                                                        </strong>{" "}
                                                                        {
                                                                            noti.content
                                                                        }
                                                                        <div className="time font-medium mt-1">
                                                                            {
                                                                                time
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                    {/* {noti.read ? (
                                                                        <div className="dotReaded"></div>
                                                                    ) : (
                                                                        <div className="dotNew"></div>
                                                                    )} */}
                                                                    {!noti.read && (
                                                                        <div className="dotNew"></div>
                                                                    )}
                                                                </div>
                                                                <hr className="cssHr" />
                                                            </div>
                                                        );
                                                    }
                                                )}
                                        </div>
                                    </div>
                                </div>
                            </Popover.Panel>
                        </Transition>
                    </>
                )}
            </Popover>
        </div>
    );
}

================
File: src/component/notificationItem/NotificationItem.module.scss
================
.wrap {
    width: 400px;
    cursor: default;
}
@media(max-width:768px){
    .wrap{
        width: 320px;
    }
}
.item {
    padding: 14px 18px;
    transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    img {
        width: 40px;
        height: 40px;
        border-radius: 100rem;
    }
    &:hover {
        background-color: rgba(145, 158, 171, 0.15);
    }
}

.header {
    padding: 12px 8px 30px 20px;
}

.boxContent {
    overflow-y: scroll !important;
    max-height: 405px;
}

.neo {
    width: 18px;
    height: 18px;
    background: red;
    color: white;
    position: absolute;
    font-size: 12px;
    top: -4px;
    right: -4px;
    font-weight: 600;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 100rem;
}

.unRead {
    background-color: rgba(145, 158, 171, 0.15);
}

.button {
    width: 36px;
    height: 36px;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    cursor: pointer;
    transition-duration: 0.3s;
    // box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.13);
    border: none;
    svg {
        fill: black;
        width: 18px;
    }
}

.button:hover {
    background-color: black;
    opacity: 1 !important;
}

.button:hover svg {
    animation: bellRing 0.6s both;
    fill: white;
}

/* bell ringing animation keyframes*/
@keyframes bellRing {
    0%,
    100% {
        transform-origin: top;
    }

    15% {
        transform: rotateZ(10deg);
    }

    30% {
        transform: rotateZ(-10deg);
    }

    45% {
        transform: rotateZ(5deg);
    }

    60% {
        transform: rotateZ(-5deg);
    }

    75% {
        transform: rotateZ(2deg);
    }
}

.button:active {
    transform: scale(0.8);
}

================
File: src/component/profileComponent/Messages.js
================
import React, { useEffect, useState, useRef } from "react";
import { over } from "stompjs";
import SockJS from "sockjs-client";
import moment from "moment";
import avatarPlaceholder from "../../assets/images/Avatar.png";
import { useSelector } from "react-redux";
import * as userApi from "../../api/apiService/authService";

let stompClient = null;

const Messages = () => {
  const currentUser = useSelector((state) => state.login.user);
  const [receiver, setReceiver] = useState(null);
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState("");
  const [contacts, setContacts] = useState([]);

  const chatWindowRef = useRef(null);
  console.log(currentUser)
  useEffect(() => {
    connect();
    return () => {
      if (stompClient) {
        stompClient.disconnect();
        console.log("Disconnected from WebSocket.");
      }
    };
  }, []); // Empty dependency array to run once on mount
  
  useEffect(() => {
    if (currentUser && currentUser.id) {
      const getContacts = async () => {
        try {
          console.log("Current User ID:", currentUser.id);
          let data;
          if (currentUser.role === 'USER') {
            data = await userApi.fetchInstructors(currentUser.id);
          } else if (currentUser.role === 'INSTRUCTOR' || currentUser.role === 'ADMIN') {
            const response = await fetch(
              `http://localhost:8080/students/${currentUser.id}`,
              {
                headers: {
                  'Authorization': `Bearer ${sessionStorage.getItem("token")}`,
                  'Content-Type': 'application/json',
                },
              }
            );
            if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`);
            }
            data = await response.json();
            console.log("Test data:", data);
          }
          console.log(data);
          setContacts(data);
        } catch (error) {
          console.error("Error fetching contacts:", error);
        }
      };

      getContacts();
    } else {
      console.log("currentUser or currentUser.id is undefined");
    }
  }, [currentUser]);

  useEffect(() => {
    if (chatWindowRef.current) {
      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;
    }
  }, [messages]);

  const fetchMessages = async (contactId) => {
    try {
      const response = await fetch(
        `http://localhost:8080/messages/${currentUser.id}/${contactId}`,
        {
          headers: {
            'Authorization': `Bearer ${sessionStorage.getItem("token")}`,
            'Content-Type': 'application/json',
          },
        }
      );
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! Status: ${response.status}\n${errorText}`);
      }
      const data = await response.json();
      setMessages(data);
    } catch (error) {
      console.error("Error fetching messages:", error);
    }
  };
  

  const connect = () => {
    const Sock = new SockJS("http://localhost:8080/ws");
    stompClient = over(Sock);
    stompClient.connect(
      {
        userId: currentUser.id.toString(),
        'Authorization': `Bearer ${sessionStorage.getItem("token")}`, // If you need to pass authentication
      },
      onConnected,
      onError
    );
  };
  

  const onConnected = () => {
    console.log("Connected to WebSocket");
    stompClient.subscribe(
      `/user/${currentUser.id}/queue/messages`,
      onMessageReceived
    );
  };

  const onError = (err) => {
    console.error("WebSocket connection error:", err);
    setTimeout(() => {
      connect();
    }, 5000); // Retry connection after 5 seconds
  };

  const onMessageReceived = (payload) => {
    const payloadData = JSON.parse(payload.body);
    console.log("WebSocket message received:", payloadData);
  
    // Check if the message is related to the current conversation
    if (receiver && (
        (payloadData.senderId === receiver.id && payloadData.receiverId === currentUser.id) ||
        (payloadData.senderId === currentUser.id && payloadData.receiverId === receiver.id)
      )) {
      setMessages((prev) => [...prev, payloadData]);
    }
  };
  

  const sendMessage = () => {
    if (stompClient && message.trim() !== "") {
      const chatMessage = {
        senderId: currentUser.id,
        receiverId: receiver.id,
        content: message,
        timestamp: new Date(),
      };
  
      stompClient.send("/app/chat", {}, JSON.stringify(chatMessage));
      setMessage("");
  
      setMessages((prev) => [...prev, chatMessage]);
    }
  };
  
  useEffect(() => {
    if (receiver) {
      fetchMessages(receiver.id);
    }
  }, [receiver]);
  
  return (
    <div className="grid grid-cols-12 gap-4 h-full">
      {/* Sidebar */}
      <aside className="col-span-3 bg-gray-50 border rounded-lg p-4">
        <h2 className="font-bold text-lg mb-4">Messages</h2>
        <ul className="space-y-4">
          {contacts.map((contact) => (
            <li
              key={contact.id}
              className="flex items-center space-x-3 p-2 hover:bg-gray-100 rounded-lg cursor-pointer"
              onClick={() => {
                setReceiver(contact);
                fetchMessages(contact.id);
              }}
            >
              <img
                src={contact.avatar || avatarPlaceholder}
                alt="Contact Avatar"
                className="h-10 w-10 rounded-full"
              />
              <div className="flex-1">
                <h3 className="text-sm font-bold">
                  {contact.firstName} {contact.lastName}
                </h3>
                <p className="text-xs text-gray-500">Tap to chat</p>
              </div>
            </li>
          ))}
        </ul>
      </aside>

      {/* Chat Section or Placeholder */}
      {receiver ? (
        // Chat Section
        <section className="col-span-9 bg-white border rounded-lg flex flex-col">
          {/* Messages Display */}
          <div
            id="chatWindow"
            ref={chatWindowRef}
            className="p-4 overflow-y-auto h-96"
          >
            {messages.map((msg, idx) => {
              const isCurrentUser = msg.senderId === currentUser.id;
              return (
                <div
                  key={idx}
                  className={`flex mb-2 ${
                    isCurrentUser ? "justify-end" : "justify-start"
                  }`}
                >
                  {!isCurrentUser && (
                    <img
                      src={receiver.avatar || avatarPlaceholder}
                      alt="Receiver Avatar"
                      className="w-8 h-8 rounded-full mr-2"
                    />
                  )}
                  <div
                    className={`rounded-lg p-2 max-w-xs ${
                      isCurrentUser
                        ? "bg-orange-100 text-right"
                        : "bg-gray-100"
                    }`}
                  >
                    <p className="text-sm">{msg.content}</p>
                    <span className="text-xs text-gray-500">
                      {moment(msg.timestamp).format("h:mm A")}
                    </span>
                  </div>
                  {isCurrentUser && (
                    <img
                      src={currentUser.avatar || avatarPlaceholder}
                      alt="Your Avatar"
                      className="w-8 h-8 rounded-full ml-2"
                    />
                  )}
                </div>
              );
            })}
          </div>

          {/* Message Input */}
          <footer className="p-4 border-t flex items-center space-x-4">
            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              placeholder="Type your message..."
              className="flex-1 border rounded-lg p-2 focus:outline-none focus:ring-1 focus:ring-orange-500"
              onKeyDown={(e) => {
                if (e.key === "Enter") sendMessage();
              }}
            />
            <button
              onClick={sendMessage}
              className="bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600"
            >
              Send
            </button>
          </footer>
        </section>
      ) : (
        // Placeholder when no contact is selected
        <div className="col-span-9 flex items-center justify-center">
          <p>Select a contact to start chatting.</p>
        </div>
      )}
    </div>
  );
};

export default Messages;

================
File: src/component/profileComponent/Setting.js
================
// src/pages/Settings.js
import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import * as userApi  from "../../api/apiService/authService";
import { toast } from "sonner";
import { isValidEmail, isPasswordStrong } from "../../utils/validation";

const Settings = () => {
  const userInfo = useSelector((state) => state.login.user);
  const [user, setUser] = useState({ ...userInfo });
  const [errors, setErrors] = useState({});
  const [passwords, setPasswords] = useState({
    email: userInfo?.email || "",
    oldPassword: "",
    newPassword: "",
    confirmPassword: "",
  });
  const [selectedForm, setSelectedForm] = useState("details");
  const [avatarFile, setAvatarFile] = useState(null);

  // Fetch user data on component mount
  useEffect(() => {
    const fetchApi = async () => {
      try {
        const result = await userApi.getUserByEmail(userInfo.email);
        setUser(result.content);
        setPasswords((prevPasswords) => ({
          ...prevPasswords,
          email: result.content.email,
        }));
      } catch (error) {
        console.log(error);
      }
    };
    fetchApi();
  }, [userInfo?.email]);

  // Handle input changes for user details
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUser((prevUser) => ({
      ...prevUser,
      [name]: value,
    }));
    setErrors((prevErrors) => ({
      ...prevErrors,
      [name]: "",
    }));
  };

  // Handle input changes for password fields
  const handleInputPasswordChange = (e) => {
    const { name, value } = e.target;
    setPasswords((prevPasswords) => ({
      ...prevPasswords,
      [name]: value,
    }));
    setErrors((prevErrors) => ({
      ...prevErrors,
      [name]: "",
    }));
  };

  // Handle file change for avatar upload
  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      // Check file size (optional)
      if (file.size > 1 * 1024 * 1024) {
        setErrors((prevErrors) => ({
          ...prevErrors,
          avatar: "Image size should be under 1MB",
        }));
        return;
      }
  
      // Update avatar file state
      setAvatarFile(file);
  
      // Update avatar preview
      const reader = new FileReader();
      reader.onloadend = () => {
        setUser((prevUser) => ({
          ...prevUser,
          avatar: reader.result,
        }));
      };
      reader.readAsDataURL(file);
  
      // Clear any previous avatar errors
      setErrors((prevErrors) => ({
        ...prevErrors,
        avatar: "",
      }));
    }
  };
  

  // Handle form switching between 'details' and 'password'
  const handleSwitchForm = (formName) => {
    setSelectedForm(formName);
    // Reset errors when switching forms
    setErrors({});
  };

  // Form validation logic
  const validateForm = () => {
    let valid = true;
    const newErrors = {};

    if (selectedForm === "details") {
      if (!user.firstName || !user.firstName.trim()) {
        newErrors.firstName = "First name cannot be empty";
        valid = false;
      }
      if (!user.lastName || !user.lastName.trim()) {
        newErrors.lastName = "Last name cannot be empty";
        valid = false;
      }
      if (!isValidEmail(user.email)) {
        newErrors.email = "Please enter a valid email";
        valid = false;
      }
    } else if (selectedForm === "password") {
      if (!passwords.oldPassword) {
        newErrors.oldPassword = "Old password is required.";
        valid = false;
      }
      if (!isPasswordStrong(passwords.newPassword)) {
        newErrors.newPassword =
          "Password must have at least 8 characters, including uppercase, lowercase, and special characters.";
        valid = false;
      }
      if (passwords.newPassword !== passwords.confirmPassword) {
        newErrors.confirmPassword = "Passwords do not match.";
        valid = false;
      }
    }

    setErrors(newErrors);
    return valid;
  };

  // Handle form submission for profile details
  const handleSubmitDetails = (event) => {
    event.preventDefault();
    if (!validateForm()) {
      return;
    }
  
    const userData = {
      ...user,
    };
  
    // Create FormData object
    const formData = new FormData();
    // Append user data as JSON string
    formData.append('user', new Blob([JSON.stringify(userData)], { type: 'application/json' }));
    // Append avatar file if it exists
    if (avatarFile) {
      formData.append('avatar', avatarFile);
    }
  
    toast.promise(userApi.updateProfile(formData), {
      loading: "Updating profile...",
      success: (data) => {
        console.log(data);
        toast.success("Profile updated successfully");
        return "Profile updated successfully";
      },
      error: (err) => {
        console.error(err);
        return err.response?.data?.message || "Update Failed";
      },
    });
  };

  // Handle form submission for password change
  const handleSubmitChangePassword = (e) => {
    e.preventDefault();
    if (!validateForm()) {
      console.error("Invalid password input");
      return;
    }

    toast.promise(userApi.updatePassword(passwords), {
      loading: "Updating password...",
      success: (data) => {
        return data.mess || "Password updated successfully";
      },
      error: (err) => {
        return err.mess || "Update Failed";
      },
    });
  };

  return (
    <div className="bg-white border rounded-lg p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-8">Account Settings</h1>
      <div className="flex mb-8">
        <button
          onClick={() => handleSwitchForm("details")}
          className={`px-4 py-2 rounded-t-lg ${
            selectedForm === "details"
              ? "bg-orange-500 text-white"
              : "bg-gray-200 text-gray-700"
          }`}
        >
          Profile Details
        </button>
        <button
          onClick={() => handleSwitchForm("password")}
          className={`px-4 py-2 rounded-t-lg ml-2 ${
            selectedForm === "password"
              ? "bg-orange-500 text-white"
              : "bg-gray-200 text-gray-700"
          }`}
        >
          Change Password
        </button>
      </div>
      <div className="grid grid-cols-3 gap-6">
        {/* Left: Profile Upload Section */}
        {selectedForm === "details" && (
          <div className="col-span-1 flex flex-col items-center">
            <div className="relative w-32 h-32">
              <img
                src={user.avatar || "/default-avatar.jpg"}
                alt="Profile"
                className="w-full h-full rounded-full object-cover border"
              />
              <label
                htmlFor="avatar-upload"
                className="absolute inset-0 bg-black bg-opacity-50 text-white flex items-center justify-center rounded-full opacity-0 hover:opacity-100 transition cursor-pointer"
              >
                Upload Photo
              </label>
              <input
                type="file"
                id="avatar-upload"
                accept="image/*"
                onChange={handleFileChange}
                className="hidden"
              />
            </div>
            <p className="text-sm text-gray-500 mt-4 text-center">
              Image size should be under 1MB and ratio needs to be 1:1
            </p>
          </div>
        )}

        {/* Right: Form Section */}
        <div
          className={`${
            selectedForm === "details" ? "col-span-2" : "col-span-3"
          }`}
        >
          {selectedForm === "details" ? (
            <form
              className="grid grid-cols-2 gap-6"
              onSubmit={handleSubmitDetails}
            >
              {/* First Name */}
              <div>
                <label className="block text-sm text-gray-700">First Name</label>
                <input
                  type="text"
                  name="firstName"
                  value={user.firstName || ""}
                  onChange={handleInputChange}
                  placeholder="First name"
                  className="w-full border rounded-lg p-2 mt-1"
                />
                {errors.firstName && (
                  <p className="text-sm text-red-500">{errors.firstName}</p>
                )}
              </div>
              {/* Last Name */}
              <div>
                <label className="block text-sm text-gray-700">Last Name</label>
                <input
                  type="text"
                  name="lastName"
                  value={user.lastName || ""}
                  onChange={handleInputChange}
                  placeholder="Last name"
                  className="w-full border rounded-lg p-2 mt-1"
                />
                {errors.lastName && (
                  <p className="text-sm text-red-500">{errors.lastName}</p>
                )}
              </div>

              {/* Username */}
              <div className="col-span-2">
                <label className="block text-sm text-gray-700">Username</label>
                <input
                  type="text"
                  name="username"
                  value={user.username || ""}
                  onChange={handleInputChange}
                  placeholder="Enter your username"
                  className="w-full border rounded-lg p-2 mt-1"
                />
                {errors.username && (
                  <p className="text-sm text-red-500">{errors.username}</p>
                )}
              </div>

              {/* Email */}
              <div className="col-span-2">
                <label className="block text-sm text-gray-700">Email</label>
                <input
                  type="email"
                  name="email"
                  value={user.email || ""}
                  onChange={handleInputChange}
                  placeholder="Email address"
                  className="w-full border rounded-lg p-2 mt-1"
                />
                {errors.email && (
                  <p className="text-sm text-red-500">{errors.email}</p>
                )}
              </div>

              {/* Title */}
              <div className="col-span-2">
                <label className="block text-sm text-gray-700">Title</label>
                <input
                  type="text"
                  name="title"
                  value={user.title || ""}
                  onChange={handleInputChange}
                  placeholder="Your title, profession or small biography"
                  className="w-full border rounded-lg p-2 mt-1"
                />
                <p className="text-xs text-gray-400 mt-1 text-right">
                  {user.title ? user.title.length : 0}/50
                </p>
              </div>

              {/* Save Changes Button */}
              <div className="col-span-2">
                <button
                  type="submit"
                  className="w-full bg-orange-500 text-white rounded-lg p-2 mt-4"
                >
                  Save Changes
                </button>
              </div>
            </form>
          ) : (
            <form
              className="grid grid-cols-2 gap-6"
              onSubmit={handleSubmitChangePassword}
            >
              {/* Old Password */}
              <div className="col-span-2">
                <label className="block text-sm text-gray-700">
                  Old Password
                </label>
                <input
                  type="password"
                  name="oldPassword"
                  value={passwords.oldPassword}
                  onChange={handleInputPasswordChange}
                  placeholder="Enter your old password"
                  className="w-full border rounded-lg p-2 mt-1"
                />
                {errors.oldPassword && (
                  <p className="text-sm text-red-500">{errors.oldPassword}</p>
                )}
              </div>

              {/* New Password */}
              <div className="col-span-2">
                <label className="block text-sm text-gray-700">
                  New Password
                </label>
                <input
                  type="password"
                  name="newPassword"
                  value={passwords.newPassword}
                  onChange={handleInputPasswordChange}
                  placeholder="Enter your new password"
                  className="w-full border rounded-lg p-2 mt-1"
                />
                {errors.newPassword && (
                  <p className="text-sm text-red-500">{errors.newPassword}</p>
                )}
              </div>

              {/* Confirm Password */}
              <div className="col-span-2">
                <label className="block text-sm text-gray-700">
                  Confirm New Password
                </label>
                <input
                  type="password"
                  name="confirmPassword"
                  value={passwords.confirmPassword}
                  onChange={handleInputPasswordChange}
                  placeholder="Confirm your new password"
                  className="w-full border rounded-lg p-2 mt-1"
                />
                {errors.confirmPassword && (
                  <p className="text-sm text-red-500">{errors.confirmPassword}</p>
                )}
              </div>

              {/* Save Changes Button */}
              <div className="col-span-2">
                <button
                  type="submit"
                  className="w-full bg-orange-500 text-white rounded-lg p-2 mt-4"
                >
                  Update Password
                </button>
              </div>
            </form>
          )}
        </div>
      </div>
    </div>
  );
};

export default Settings;

================
File: src/component/Quiz/Flashcard/index.js
================
import React, { useState } from "react";

const Flashcard = ({ word, definition, example }) => {
    const [flipped, setFlipped] = useState(false);

    return (
        <div 
            className={`w-64 h-40 border rounded-md shadow-md p-4 cursor-pointer ${flipped ? "bg-blue-100" : "bg-white"}`} 
            onClick={() => setFlipped(!flipped)}
        >
            {flipped ? (
                <div>
                    <h3 className="text-lg font-semibold">{word}</h3>
                    <p className="mt-2 text-sm text-gray-700">{definition}</p>
                    {example && <p className="mt-2 text-xs text-gray-500">Example: {example}</p>}
                </div>
            ) : (
                <h3 className="text-lg font-semibold text-center">Click to flip</h3>
            )}
        </div>
    );
};

export default Flashcard;

================
File: src/component/Quiz/FlashcardSet/index.js
================
import React, { useEffect, useState } from "react";
import Flashcard from "./Flashcard";
import { getFlashcardSetsByUser, getVocabulary } from "../../../api/apiService/dataService";

const FlashcardSetComponent = ({ userId }) => {
    const [flashcardSets, setFlashcardSets] = useState([]);
    const [selectedSet, setSelectedSet] = useState(null);
    const [vocabularies, setVocabularies] = useState([]);

    useEffect(() => {
        const fetchSets = async () => {
            try {
                const sets = await getFlashcardSetsByUser(userId);
                setFlashcardSets(sets);
                if (sets.length > 0) {
                    setSelectedSet(sets[0]);
                    setVocabularies(sets[0].flashcards.map(flashcard => flashcard.vocabulary));
                }
            } catch (error) {
                console.error("Error fetching flashcard sets:", error);
            }
        };
        fetchSets();
    }, [userId]);

    const handleSetChange = (set) => {
        setSelectedSet(set);
        setVocabularies(set.flashcards.map(flashcard => flashcard.vocabulary));
    };

    return (
        <div>
            <h2 className="text-xl font-bold mb-4">Your Flashcard Sets</h2>
            <div className="mb-6">
                {flashcardSets.map(set => (
                    <button 
                        key={set.id} 
                        onClick={() => handleSetChange(set)}
                        className={`px-4 py-2 mr-2 mb-2 rounded ${selectedSet && selectedSet.id === set.id ? "bg-indigo-600 text-white" : "bg-gray-200 text-gray-700"}`}
                    >
                        {set.title}
                    </button>
                ))}
            </div>
            <div className="grid grid-cols-2 gap-4">
                {vocabularies.map(vocab => (
                    <Flashcard 
                        key={vocab.id} 
                        word={vocab.word} 
                        definition={vocab.definition} 
                        example={vocab.example} 
                    />
                ))}
            </div>
        </div>
    );
};

export default FlashcardSetComponent;

================
File: src/component/Quiz/VocabularyManager/index.js
================
import React, { useEffect, useState } from "react";
import { getAllVocabulary, addVocabulary, createFlashcardSet } from "../../../api/apiService/dataService";

const VocabularyManager = ({ userId }) => {
    const [vocabularies, setVocabularies] = useState([]);
    const [newWord, setNewWord] = useState("");
    const [newDefinition, setNewDefinition] = useState("");
    const [newExample, setNewExample] = useState("");
    const [selectedVocabIds, setSelectedVocabIds] = useState([]);
    const [setTitle, setSetTitle] = useState("");
    const [setDescription, setSetDescription] = useState("");

    useEffect(() => {
        const fetchVocabulary = async () => {
            try {
                const vocab = await getAllVocabulary();
                setVocabularies(vocab);
            } catch (error) {
                console.error("Error fetching vocabulary:", error);
            }
        };
        fetchVocabulary();
    }, []);

    const handleAddVocabulary = async () => {
        if (!newWord.trim() || !newDefinition.trim()) {
            alert("Please enter both word and definition.");
            return;
        }
        try {
            const addedVocab = await addVocabulary({
                word: newWord,
                definition: newDefinition,
                example: newExample,
            });
            setVocabularies([...vocabularies, addedVocab]);
            setNewWord("");
            setNewDefinition("");
            setNewExample("");
        } catch (error) {
            console.error("Error adding vocabulary:", error);
            alert("Failed to add vocabulary.");
        }
    };

    const handleCreateSet = async () => {
        if (!setTitle.trim()) {
            alert("Please enter a title for the flashcard set.");
            return;
        }
        try {
            const flashcardSet = await createFlashcardSet(userId, setTitle, setDescription, selectedVocabIds);
            alert("Flashcard set created successfully!");
            // Reset fields or update UI as needed
            setSetTitle("");
            setSetDescription("");
            setSelectedVocabIds([]);
        } catch (error) {
            console.error("Error creating flashcard set:", error);
            alert("Failed to create flashcard set.");
        }
    };

    const toggleSelectVocab = (id) => {
        if (selectedVocabIds.includes(id)) {
            setSelectedVocabIds(selectedVocabIds.filter(vocabId => vocabId !== id));
        } else {
            setSelectedVocabIds([...selectedVocabIds, id]);
        }
    };

    return (
        <div className="mt-8">
            <h2 className="text-xl font-bold mb-4">Manage Vocabulary</h2>
            <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Add New Vocabulary</h3>
                <input 
                    type="text" 
                    value={newWord} 
                    onChange={(e) => setNewWord(e.target.value)} 
                    placeholder="Word" 
                    className="border p-2 mr-2 rounded"
                />
                <input 
                    type="text" 
                    value={newDefinition} 
                    onChange={(e) => setNewDefinition(e.target.value)} 
                    placeholder="Definition" 
                    className="border p-2 mr-2 rounded"
                />
                <input 
                    type="text" 
                    value={newExample} 
                    onChange={(e) => setNewExample(e.target.value)} 
                    placeholder="Example (optional)" 
                    className="border p-2 mr-2 rounded"
                />
                <button 
                    onClick={handleAddVocabulary}
                    className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
                >
                    Add
                </button>
            </div>
            <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Select Vocabulary for New Flashcard Set</h3>
                <div className="max-h-64 overflow-y-auto border p-4 rounded">
                    {vocabularies.map(vocab => (
                        <div key={vocab.id} className="flex items-center mb-2">
                            <input 
                                type="checkbox" 
                                checked={selectedVocabIds.includes(vocab.id)} 
                                onChange={() => toggleSelectVocab(vocab.id)}
                                className="mr-2"
                            />
                            <span>{vocab.word} - {vocab.definition}</span>
                        </div>
                    ))}
                </div>
                <div className="mt-4">
                    <input 
                        type="text" 
                        value={setTitle} 
                        onChange={(e) => setSetTitle(e.target.value)} 
                        placeholder="Flashcard Set Title" 
                        className="border p-2 mr-2 rounded"
                    />
                    <input 
                        type="text" 
                        value={setDescription} 
                        onChange={(e) => setSetDescription(e.target.value)} 
                        placeholder="Description (optional)" 
                        className="border p-2 mr-2 rounded"
                    />
                    <button 
                        onClick={handleCreateSet}
                        className="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
                    >
                        Create Flashcard Set
                    </button>
                </div>
            </div>
        </div>
    );
};

export default VocabularyManager;

================
File: src/component/search/index.js
================
import React, { useState, useEffect, useRef } from "react";
import searchIcon from "../../assets/images/search.png";
import loadingIcon from "../../assets/images/loading.png";
import * as dataApi from "../../api/apiService/dataService";
import clsx from "clsx";
import styles from "./Search.module.scss";
let timerId = null;

const SearchBar = () => {
    const [searchTerm, setSearchTerm] = useState("");
    const [searchResult, setSearchResult] = useState([]);
    const [showResult, setShowResult] = useState(false);
    const searchBarRef = useRef(null);
    const [loading, setLoading] = useState(false);
    const inputRef = useRef();

    // API fetch function
    const fetchApi = async (title) => {
        try {
            const result = await dataApi.getCourseByName(title);
            setLoading(false);
            setShowResult(true);
            setSearchResult(result.content.content);
        } catch (error) {
            console.log(error);
        }
    };

    // Debounce function
    const debounce = (func, delay = 800) => {
        return (title) => {
            clearTimeout(timerId);
            timerId = setTimeout(() => {
                func(title);
            }, delay);
        };
    };

    const fetchApiRequest = debounce(fetchApi, 500);

    const handleSearch = (event) => {
        const title = event.target.value;

        setSearchTerm(title);
        setLoading(true);
        if (title.trim() === "") {
            setSearchResult([]);
            setShowResult(false);
            clearTimeout(timerId);
            return;
        }
        fetchApiRequest(title);
    };

    // Handle clicking outside of search bar to close results
    const handleClickOutside = (event) => {
        if (searchBarRef.current && !searchBarRef.current.contains(event.target)) {
            setShowResult(false);
        }
    };

    // Clear the search input
    const clearSearch = () => {
        setSearchTerm("");
        inputRef.current.focus();
        setSearchResult([]);
        setShowResult(false);
    };

    useEffect(() => {
        document.addEventListener("mousedown", handleClickOutside);
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, []);

    return (
        <div
            className={clsx(
                styles.searchWrap,
                "relative flex items-center bg-white border border-gray-300 w-72 hover:border-black transition-all duration-200"
            )}
            ref={searchBarRef}
        >
            <div className="flex w-full items-center pl-4 pr-2 py-2">
                <input
                    ref={inputRef}
                    type="text"
                    value={searchTerm}
                    onChange={handleSearch}
                    className="flex-grow text-sm pl-2 pr-4 text-gray-700 leading-tight focus:outline-none"
                    placeholder="What do you want learn..."
                    onClick={() => searchResult.length > 0 && setShowResult(true)}
                    style={{ borderRadius: "0px" }} // Loại bỏ bo tròn
                />
                <div className="flex items-center">
                    {loading && searchTerm !== "" && (
                        <img
                            src={loadingIcon}
                            alt="Loading"
                            className="w-4 h-4 animate-spin mr-2"
                        />
                    )}
                    {searchTerm.length > 0 && !loading && (
                        <button onClick={clearSearch} className="mr-2">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 20 20"
                                fill="#a6a7ac"
                                className="w-5 h-5 hover:opacity-80"
                            >
                                <path
                                    fillRule="evenodd"
                                    d="M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16ZM8.28 7.22a.75.75 0 0 0-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 1 0 1.06 1.06L10 11.06l1.72 1.72a.75.75 0 1 0 1.06-1.06L11.06 10l1.72-1.72a.75.75 0 0 0-1.06-1.06L10 8.94 8.28 7.22Z"
                                    clipRule="evenodd"
                                />
                            </svg>
                        </button>
                    )}
                    <button className="px-2">
                        <img
                            src={searchIcon}
                            alt="Search"
                            className="w-4 h-4"
                        />
                    </button>
                </div>
            </div>

            {showResult && (
                <div className="absolute top-full mt-2 w-full bg-white border border-gray-300 shadow-lg z-20">
                    {searchResult.length > 0 ? (
                        <div>
                            {searchResult.map((course, index) => (
                                <div
                                    key={index}
                                    className="flex font-semibold text-sm p-3 hover:bg-gray-100 cursor-pointer"
                                >
                                    <div className="w-10 h-10 mr-3">
                                        <img
                                            src={course.thumbnail ? course.thumbnail : ""}
                                            alt="thumbnail"
                                            className="w-10 h-10 object-cover"
                                        />
                                    </div>
                                    <div>
                                        {course.title}
                                        <div className="font-normal text-xs text-gray-500 mt-1">
                                            Tags:
                                            {course.categories.map((cate, ind) => (
                                                <span className="ml-1" key={ind}>
                                                    {cate.name}
                                                </span>
                                            ))}
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <div className="p-4 text-center text-sm">
                            <p className="text-base font-bold">No Results Found</p>
                            <p className="text-gray-500 mt-1">Try checking for typos or using complete words.</p>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export default SearchBar;

================
File: src/component/search/Search.module.scss
================
.searchWrap {
    transition: all 0.2s ease-in-out;
    &:focus-within {
        border-color: black;
    }
}

================
File: src/component/useNotificationWebSocket/index.js
================
import { Stomp } from "@stomp/stompjs";
import { Socket } from "net";
import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import notificationSlice from "../../redux/reducers/notificationSlice";
import SockJS from "sockjs-client";
import { client } from "stompjs";
import { toast } from "sonner";

export default function useNotificationWebSocket() {
    const userInfo = useSelector((state) => state.login.user);
    const dispatch = useDispatch();

    const onDisconnected = () => {
        console.log("Disconnect Websocket");
    };

    useEffect(() => {
        let stompClient = null;
        if (userInfo) {
            const alias = userInfo.email.split("@")[0];
            const sockjs = new SockJS("http://localhost:8080/ws");
            stompClient = Stomp.over(sockjs);
            stompClient.connect({}, () => {
                stompClient.subscribe(
                    `/user/${alias}/notification`,
                    (message) => {
                        const data = JSON.parse(message.body);
                        console.log(data);
                        toast.info("You have a new notification");
                        dispatch(notificationSlice.actions.add(data));
                    }
                );
            });
        }
        return () => {
            if (stompClient) {
                stompClient.disconnect(onDisconnected, {});
            }
        };
    }, [userInfo, dispatch]);
}

================
File: src/component/validation/index.js
================
const validateForm = (formData) => {
    const errors = {};
    if (!formData.title) errors.title = "Course Name is required.";
    if (!formData.description) errors.description = "Description is required.";
    if (!formData.price) errors.price = "Price is required.";
    if (!formData.thumbnail) errors.thumbnail = "Thumbnail is required.";
    if (formData.categories.length === 0)
        errors.categories = "At least one category is required.";

    formData.sections.forEach((section, sectionIndex) => {
        if (!section.title)
            errors[`section-${sectionIndex}`] = `Section ${
                sectionIndex + 1
            } Name is required.`;
        section.lessons?.forEach((lesson, lessonIndex) => {
            if (!lesson.title)
                errors[`lesson-${sectionIndex}-${lessonIndex}`] = `Lesson ${
                    lessonIndex + 1
                } Name is required in Section ${sectionIndex + 1}.`;
            if (!lesson.description)
                errors[
                    `lesson-desc-${sectionIndex}-${lessonIndex}`
                ] = `Lesson ${
                    lessonIndex + 1
                } Description is required in Section ${sectionIndex + 1}.`;
        });
    });

    return errors;
};
export default validateForm;

================
File: src/context/sidebarContext.js
================
import { createContext, useReducer } from "react";
import reducer from "../redux/reducers/sidebarReducer";
import PropTypes from 'prop-types';

const initialState = {
    isSidebarOpen: false
}

export const SidebarContext = createContext({});
export const SidebarProvider = ({ children }) => {
    const [state, dispatch] = useReducer(reducer, initialState);
    const toggleSidebar = () => {
        dispatch({ type: "TOGGLE_SIDEBAR" })
    }
    return (
        <SidebarContext.Provider value = {{
            ...state,
            toggleSidebar
        }}>
            { children }
        </SidebarContext.Provider>
    )
}

SidebarProvider.propTypes = {
    children: PropTypes.node
}

================
File: src/index.css
================
@import url("https://fonts.googleapis.com/css2?family=Be+Vietnam+Pro:wght@400;500;600&display=swap");
/* @import url("https://fonts.googleapis.com/css2?family=Inter:wght@400&display=swap"); */
@tailwind base;
@tailwind components;
@tailwind utilities;
body {
    @apply leading-[normal] m-0;
    font-family: "Be Vietnam Pro";
}

*,
::before,
::after {
    border-width: 0;
}

html {
    /* font-size: 62.5%; */
}

w-1400 {
    width: 1400px !important;
}

================
File: src/index.js
================
import { BrowserRouter as Router } from "react-router-dom";
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";
import { Provider } from "react-redux";
import store from "./redux/store";
import GlobalStyles from "./component/globalStyles";
import { Toaster } from "sonner";
import { ThemeProvider } from "@material-tailwind/react";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
    // <React.StrictMode>
    <ThemeProvider>
    <Provider store={store}>
        <GlobalStyles>
            <Router>
                <App />
                <Toaster position="top-center" richColors />
            </Router>
        </GlobalStyles>
    </Provider>
    </ThemeProvider>

    // {/* </React.StrictMode> */}
);

================
File: src/Interceptor.js
================
import { useNavigate } from "react-router-dom";
import { injectNavigate } from "./api/instance";
import { useEffect } from "react";

function Interceptors() {
    const navigate = useNavigate();
    useEffect(() => {
        injectNavigate(navigate);
    }, []);

    return <></>;
}

export default Interceptors;

================
File: src/layout/footer/AppDownloadButton.js
================
import * as React from "react";

export default function AppDownloadButton({ icon, store }) {
  return (
    <div className="flex gap-3.5 justify-center items-center px-5 py-3 bg-zinc-700 bg-opacity-40">
      <img
        loading="lazy"
        src={icon}
        alt={`${store} icon`}
        className="object-contain shrink-0 self-stretch my-auto w-8 aspect-square"
      />
      <div className="flex flex-col self-stretch my-auto">
        <div className="text-xs leading-none text-neutral-300">
          Download now
        </div>
        <div className="text-base font-medium leading-none text-white">
          {store}
        </div>
      </div>
    </div>
  );
}

================
File: src/layout/footer/CategoryLink.js
================
import * as React from "react";

export default function CategoryLink({ text }) {
  return (
    <div className="gap-3 self-stretch py-1.5 whitespace-nowrap bg-neutral-800">
      {text}
    </div>
  );
}

================
File: src/layout/footer/FooterColumn.js
================
import * as React from "react";

export default function FooterColumn({ title, children }) {
  return (
    <div className="flex flex-col text-sm text-justify w-[200px]">
      <div className="font-medium leading-none text-white uppercase">
        {title}
      </div>
      <div className="flex flex-col items-start self-start mt-5 tracking-normal leading-loose text-gray-400">
        {children}
      </div>
    </div>
  );
}

================
File: src/layout/footer/index.js
================
import * as React from "react";
import SocialIcon from "./SocialIcon";
import CategoryLink from "./CategoryLink";
import FooterColumn from "./FooterColumn";
import AppDownloadButton from "./AppDownloadButton";

import { useState } from "react";
export default function Footer() {
    const [isAdminPage, setIsAdminPage] = useState(false);

    React.useEffect(() => {
        if (window.location.pathname === "/admin") {
            setIsAdminPage(true);
        }
    });
    
const socialIcons = [
    { icon: "https://cdn.builder.io/api/v1/image/assets/TEMP/86855e3413a2ca60ba5eaf9af4a526332f8a2f1dca396da8c98b7eab16743e8e?placeholderIfAbsent=true&apiKey=f5b4066cc5864741a5497a6883272285", alt: "Social media icon 1" },
    { icon: "https://cdn.builder.io/api/v1/image/assets/TEMP/09c929af987190c9943e8a168ee1f6ed8fb6810ce18363679b8fe1380e1980b7?placeholderIfAbsent=true&apiKey=f5b4066cc5864741a5497a6883272285", alt: "Social media icon 2" },
    { icon: "https://cdn.builder.io/api/v1/image/assets/TEMP/3bc0915462da2876e9047177a8aa92856faef9dbed74d017459132dd5bba9564?placeholderIfAbsent=true&apiKey=f5b4066cc5864741a5497a6883272285", alt: "Social media icon 3" },
    { icon: "https://cdn.builder.io/api/v1/image/assets/TEMP/8560ce00cb740287241c28521c513505fb1a2c8e99da162c942733b50eb0177a?placeholderIfAbsent=true&apiKey=f5b4066cc5864741a5497a6883272285", alt: "Social media icon 4" },
    { icon: "https://cdn.builder.io/api/v1/image/assets/TEMP/8d1d701ad138a75c7f6a1a15e0fffe01b095a3c24a99dfa6668274d31d3d7ac3?placeholderIfAbsent=true&apiKey=f5b4066cc5864741a5497a6883272285", alt: "Social media icon 5" }
  ];
  
  const categories = ["Development", "Finance & Accounting", "Design", "Business"];
  const quickLinks = ["About", "Become Instructor", "Contact", "Career"];
  const supportLinks = ["Help Center", "FAQs", "Terms & Condition", "Privacy Policy"];
    return (
        !isAdminPage && (
            <footer className="flex flex-col justify-center items-center bg-neutral-800 bg-black p-5 w-full">
            <div className="flex flex-wrap gap-6 items-start max-md:max-w-full">
              <div className="flex flex-col justify-center min-w-[240px] w-[424px] max-md:max-w-full">
                <div className="flex flex-col w-full text-justify max-w-[424px] max-md:max-w-full">
                  <div className="flex gap-2.5 items-start self-start text-4xl font-semibold tracking-tighter leading-none text-white whitespace-nowrap">
                    <img
                      loading="lazy"
                      src="https://cdn.builder.io/api/v1/image/assets/TEMP/400b7c79a483042a23f9f89c2309dc93eaed59d579cfd191779908816f4bb48d?placeholderIfAbsent=true&apiKey=f5b4066cc5864741a5497a6883272285"
                      alt="E-tutor logo"
                      className="object-contain shrink-0 aspect-square w-[46px]"
                    />
                    <div>Dream Catchers</div>
                  </div>
                  <div className="mt-5 text-sm tracking-normal leading-6 text-gray-400 max-md:max-w-full">
                    Aliquam rhoncus ligula est, non pulvinar elit
                    <br />
                    convallis nec. Donec mattis odio at.
                  </div>
                </div>
                <div className="flex gap-3 items-start self-start mt-7">
                  {socialIcons.map((icon, index) => (
                    <SocialIcon key={index} {...icon} />
                  ))}
                </div>
              </div>
      
              <FooterColumn title="Top 4 Category">
                {categories.map((category, index) => (
                  <CategoryLink key={index} text={category} />
                ))}
              </FooterColumn>
      
              <FooterColumn title="Quick Links">
                {quickLinks.map((link, index) => (
                  <CategoryLink key={index} text={link} />
                ))}
              </FooterColumn>
      
              <FooterColumn title="Support">
                {supportLinks.map((link, index) => (
                  <CategoryLink key={index} text={link} />
                ))}
              </FooterColumn>
      
             
            </div>
      
          
          </footer>
        )
    );
}

================
File: src/layout/footer/SocialIcon.js
================
import * as React from "react";

export default function SocialIcon({ icon, alt }) {
  return (
    <div className="flex gap-2.5 items-center p-3.5 bg-zinc-700 bg-opacity-40 h-[46px] w-[46px]">
      <img
        loading="lazy"
        src={icon}
        alt={alt}
        className="object-contain aspect-square w-[18px]"
      />
    </div>
  );
}

================
File: src/layout/header/Header.module.scss
================
.boxShadow {
    box-shadow: rgba(145, 158, 171, 0.2) 0px 0px 2px 0px,
        rgba(145, 158, 171, 0.12) 0px 12px 24px -4px;
    // border-radius: 20%;
}

a {
    color: rgb(38 38 38 / var(--tw-text-opacity));
}
.header {
    @apply flex items-center justify-between p-4 bg-white shadow-md;
  }
  .menu-icon, .search-icon, .profile-info {
    @apply flex items-center;
  }
  .logo {
    @apply flex-1 flex justify-center;
  }
  .avatar {
    @apply w-10 h-10 rounded-full;
  }
  @media (max-width: 768px) {
    .header {
      @apply flex-wrap;
    }
  
    .logo {
      @apply order-2 w-full justify-center my-2;
    }
  
    .menu-icon, .search-icon {
      @apply order-1;
    }
  
    .profile-info {
      @apply order-3 w-full justify-center;
    }
    .notification{
        width: 50px;
        :hover {
            cursor: pointer;
        }
    }
  }    
  
.contentItem {
  display: inline-flex;
  flex-direction: column;
  position: relative;
  min-width: 0px;
  padding: 0px;
  margin: 0px;
  border: 0px;
  vertical-align: top;
  flex-shrink: 0;
  height: 40px;


  .formSelect {
      width: 200px;
      height: 20px;
      border-radius: 8px !important;
      cursor: pointer;
      box-sizing: content-box;
      background: none;
      margin: 10px;
      animation-name: mui-auto-fill-cancel;
      line-height: 1.57143;
      font-size: 0.875rem;
      font-weight: 400;
  }
  
  svg {
      user-select: none;
      display: inline-block;
      fill: currentcolor;
      flex-shrink: 0;
      transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      font-size: 1.5rem;
      position: absolute;
      pointer-events: none;
      right: 10px;
      width: 18px;
      height: 18px;
      top: calc(50% - 9px);
  }
}
.css-s2gg24-control {
  height: 20px !important;
  border-radius: 8px;
}
  .logo{
    display: flex;
    width: 30%;
  }
.dropdownList {
    display: none;
    position: absolute;
    top: 100%;
    right: 0;
    background-color: #f9f9f9;
    min-width: 120px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    padding-left: 0;
    cursor: pointer;
}

.open {
    width: 0;
    display: block;
}

.dropdownListItem {
    padding: 12px 16px;
    text-decoration: none;
    display: block;
    &:hover {
        background-color: #f1f1f1;
    }
}

.notification {
    // align-items: center;
    // display: flex;
    :hover {
        cursor: pointer;
    }
}

================
File: src/layout/header/index.js
================
import React, { useEffect,useState  } from "react";
import { Link } from "react-router-dom";
import logo from "../../assets/images/E-tutor_logo.png";
import avatar from "../../assets/images/Avatar.png";
import { useNavigate } from "react-router-dom";
import styles from "./Header.module.scss";
import clsx from "clsx";
import Dropdown from "../../component/dropDown";
import { useDispatch, useSelector } from "react-redux";
import NotificationItem from "../../component/notificationItem";
import useNotificationWebSocket from "../../component/useNotificationWebSocket";
import * as userApi from "../../api/apiService/authService";
import * as dataApi from "../../api/apiService/dataService";

import notificationSlice from "../../redux/reducers/notificationSlice";
import SearchBar from "../../component/search";
import Combobox from "../../component/combobox";
import Select ,{ StylesConfig }from 'react-select';
export default function Header() {
    const navigate = useNavigate();
    const [page, setPage] = React.useState("login");
    const [isAdmin, setIsAdmin] = React.useState(false);
    const [categories, setCategories] = useState([]); // State để lưu danh mục
    const { user } = useSelector((state) => state.login);
    const dispatch = useDispatch();

    React.useEffect(() => {
        if (window.location.pathname === "/admin") {
            setIsAdmin(true);
        }
    }, []);

    useNotificationWebSocket();

    useEffect(() => {
        if (!user) return;
        const fetchApi = async () => {
            try {
                const result = await userApi.getAllNotification(user.email);
                if (result.content.length > 0) {
                    dispatch(notificationSlice.actions.init(result.content));
                }
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, [user, dispatch]);

    const handleGoToSignUp = () => {
        if (window.location.pathname === "/sign-up") return;
        setPage("sign-up");
        navigate("/sign-up");
    };

    const handleGoToLogin = () => {
        if (window.location.pathname === "/login") return;
        setPage("login");
        navigate("/login");
    };
    const selectStyles = {
        control: (baseStyles, state) => ({
            ...baseStyles,
            borderColor: state.isFocused ? "black" : "#e9ecee",
            minHeight: "30px",
            height: "35px",
            padding: "0 8px",
        }),
        valueContainer: (baseStyles) => ({
            ...baseStyles,
            padding: "0 8px",
        }),
        input: (baseStyles) => ({
            ...baseStyles,
            margin: 0,
            padding: 0,
        }),
        singleValue: (baseStyles) => ({
            ...baseStyles,
            margin: 0,
            padding: 0,
        }),
    };
    useEffect(() => {
        const fetchCategories = async () => {
            try {
               let categories = [];
                categories = await dataApi.getAllCategories(0, 99999);
                categories.content.content.push({ id: "-1", name: "All" });
                setCategories(categories.content.content);
            } catch (error) {
                console.error("Error fetching categories:", error);
            }
        };
        fetchCategories();
    }, []);
    return (
        !isAdmin && (
            <div className="z-9999 relative w-1400px flex justify-center">
               {/* <div className="w-full fixed top-0 bg-black text-white z-50">
                    <nav className="flex justify-start py-2">
                        <Link
                            className={`nav-header ${
                                window.location.pathname === "/" ? "nav-header-active" : ""
                            } px-4 py-2 text-white text-sm`}
                            to="/"
                        >
                            Home
                        </Link>
                        <Link
                            className={`nav-header ${
                                window.location.pathname === "/courses" ? "nav-header-active" : ""
                            } px-4 py-2 text-white text-sm`}
                            to="/courses"
                        >
                            Courses
                        </Link>
                        <Link
                            className={`nav-header ${
                                window.location.pathname === "/about" ? "nav-header-active" : ""
                            } px-4 py-2 text-white text-sm`}
                            to="/about"
                        >
                            About
                        </Link>
                        <Link
                            className={`nav-header ${
                                window.location.pathname === "/contact" ? "nav-header-active" : ""
                            } px-4 py-2 text-white text-sm`}
                            to="/contact"
                        >
                            Contact
                        </Link>
                        <Link
                            className={`nav-header ${
                                window.location.pathname === "/instructor" ? "nav-header-active" : ""
                            } px-4 py-2 text-white text-sm`}
                            to="/instructor"
                        >
                            Become an Instructor
                        </Link>
                    </nav>
                </div> */}

                <header
                    className={clsx(
                        ` ${styles.boxShadow} rounded-full z-header h-[50px] w-1400 bg-white mt-1 fixed flex items-center justify-between px-5 text-sm leading-5 border-b border-gray-100 mx-auto max-md:flex-wrap max-md:px-5 max-md:max-w-full`
                    )}
                >
                    <div className="flex gap-5 justify-between self-start pt-2 text-neutral-800">
                        <Link to="/">
                        <div className="flex items-center gap-2">
                            <img
                                loading="lazy"
                                src={logo}
                                alt="Logo"
                                className="shrink-0 h-8 w-8 aspect-square"
                            />
                            <p className="text-base font-semibold m-0">Dream-Catcher</p>
                        </div>
                        </Link>
                    </div>
                    
                    <nav className="flex justify-start py-2">
                        <Link
                            className={`nav-header ${
                                window.location.pathname === "/" ? "nav-header-active" : ""
                            } px-4 py-2 text-black text-sm`}
                            to="/"
                        >
                            Home
                        </Link>
                        <Link
                            className={`nav-header ${
                                window.location.pathname === "/" ? "nav-header-active" : ""
                            } px-4 py-2 text-black text-sm`}
                            to="IELTS/Writing/Test"
                        >
                            Writing
                        </Link>
                        <Link
                            className={`nav-header ${
                                window.location.pathname === "/courses" ? "nav-header-active" : ""
                            } px-4 py-2 text-black text-sm`}
                            to="/courses"
                        >
                            Courses
                        </Link>
                    
                       
                        <Link
                            className={`nav-header ${
                                window.location.pathname === "/instructor" ? "nav-header-active" : ""
                            } px-4 py-2 text-black text-sm`}
                            to="/instructor"
                        >
                            Become an Instructor
                        </Link>
                    </nav>
                    <div className="flex gap-3 justify-between">
                        {!user ? (
                            <>
                                <button
                                    type="button"
                                    onClick={handleGoToSignUp}
                                    id="signUp"
                                    className={`"cursor-pointer" ${
                                        page === "sign-up"
                                            ? "px-4 py-1 rounded-md bg-black text-white"
                                            : "px-4 py-1 text-neutral-800 rounded-md"
                                    }`}
                                >
                                    Sign Up
                                </button>
                                <button
                                    type="button"
                                    onClick={handleGoToLogin}
                                    id="login"
                                    className={`"cursor-pointer" ${
                                        page === "login"
                                            ? "px-4 py-2 rounded-full bg-black text-white"
                                            : "px-4 py-2 text-neutral-800 rounded-md"
                                    }`}
                                >
                                    Login
                                </button>
                            </>
                        ) : (
                            <>
                            <div className="flex items-center">
                            {/* <div className="w-35 mr-2">
                                <Select
                                    // onChange={handleSelectChange}
                                    getOptionLabel={(x) => x.name}
                                    getOptionValue={(x) => x.id}
                                    options={categories}
                                    styles={selectStyles}
                                    placeholder="Categories"
                                />
                            </div> */}
                            <SearchBar></SearchBar>
                        </div>
                            <div className={clsx(styles.notification, "flex items-center gap-5")}>
                                {/* Notification Icon */}
                                <div className="relative cursor-pointer">
                                    <NotificationItem
                                        iconBtn={
                                            <svg
                                                viewBox="0 0 448 512"
                                                className="bell w-6 h-6 text-gray-700"
                                            >
                                                <path d="M224 0c-17.7 0-32 14.3-32 32V49.9C119.5 61.4 64 124.2 64 200v33.4c0 45.4-15.5 89.5-43.8 124.9L5.3 377c-5.8 7.2-6.9 17.1-2.9 25.4S14.8 416 24 416H424c9.2 0 17.6-5.3 21.6-13.6s2.9-18.2-2.9-25.4l-14.9-18.6C399.5 322.9 384 278.8 384 233.4V200c0-75.8-55.5-138.6-128-150.1V32c0-17.7-14.3-32-32-32zm0 96h8c57.4 0 104 46.6 104 104v33.4c0 47.9 13.9 94.6 39.7 134.6H72.3C98.1 328 112 281.3 112 233.4V200c0-57.4 46.6-104 104-104h8zm64 352H224 160c0 17 6.7 33.3 18.7 45.3s28.3 18.7 45.3 18.7s33.3-6.7 45.3-18.7s18.7-28.3 18.7-45.3z"></path>
                                            </svg>
                                        }
                                    />
                                    <span className="absolute top-0 right-0 w-2 h-2 bg-red-600 rounded-full border-2 border-white"></span>
                                </div>
                        
                                {/* Favorite Icon */}
                                <div className="relative cursor-pointer">
                                    <svg
                                        viewBox="0 0 24 24"
                                        fill="none"
                                        stroke="currentColor"
                                        strokeWidth="2"
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        className="w-7 h-7 text-gray-700"
                                    >
                                        <path d="M18.2 6.6c-1.5-1.7-4-1.8-5.6 0l-.7.7-.7-.7c-1.5-1.7-4-1.8-5.6 0-1.7 1.5-1.8 4 0 5.6l6.3 6.3 6.3-6.3c1.7-1.5 1.8-4.1 0-5.6z"></path>
                                    </svg>
                                </div>
                        
                                {/* Cart Icon */}
                                <div className="relative cursor-pointer">
                                    <svg
                                        viewBox="0 0 24 24"
                                        fill="none"
                                        stroke="currentColor"
                                        strokeWidth="2"
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        className="w-6 h-6 text-gray-700"
                                    >
                                        <circle cx="9" cy="21" r="1"></circle>
                                        <circle cx="20" cy="21" r="1"></circle>
                                        <path d="M1 1h4l2.7 13.4a1 1 0 0 0 1 0.8h12.2a1 1 0 0 0 1-.8l1.5-7.5h-17"></path>
                                    </svg>
                                    {/* <span className="absolute -top-1 -right-2 bg-red-600 text-white text-xs font-bold w-5 h-5 rounded-full flex items-center justify-center"></span> */}
                                </div>
                        
                                <Dropdown
                                    elementClick={
                                        <img
                                            className="border rounded-full object-cover w-10 h-10 border-gray-200 cursor-pointer"
                                            src={user && user.avatar ? user.avatar : avatar}
                                            alt="User Avatar"
                                        />
                                    }
                                />
                            </div>
                        </>
                        
                        )}
                    </div>
                </header>
            </div>
        )
    );
}

================
File: src/layout/headerAdmin/HeaderAdmin.module.scss
================
@import url("https://fonts.googleapis.com/css2?family=Be+Vietnam+Pro:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");

div,
input {
    font-family: "Be Vietnam Pro" !important;
}

.mainBg {
    align-self: stretch;
    flex: 1;
    position: relative;
    background-color: var(--color-ghostwhite);
    max-width: 100%;
}
.mainBgColor {
    width: 100%;
    height: 100%;
    margin: 0 !important;
    position: absolute;
    top: 0;
    right: -1px;
    bottom: 0;
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    justify-content: flex-start;
}
.products {
    margin: 0;
    height: 44px;
    position: relative;
    font-size: inherit;
    letter-spacing: -0.11px;
    font-weight: 700;
    display: inline-block;
    white-space: nowrap;
    z-index: 1;
}
.productsWrapper {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    justify-content: flex-start;
    padding: 0 var(--padding-12xs);
}
.bitmapCopy2,
.mask {
    position: relative;
    display: none;
    max-width: 100%;
}
.mask {
    width: 1141px;
    height: 346px;
    border-radius: var(--br-sm);
    background-color: var(--color-royalblue-100);
    box-shadow: 6px 6px 54px rgba(0, 0, 0, 0.05);
    z-index: 0;
}
.bitmapCopy2 {
    width: 642px;
    height: 642px;
    object-fit: contain;
    z-index: 1;
}
.bitmapCopyIcon,
.bitmapIcon,
.patternIcon {
    position: absolute;
    top: 0;
    left: 1100px;
    width: 642px;
    height: 642px;
    object-fit: contain;
    z-index: 2;
}
.bitmapCopyIcon,
.patternIcon {
    top: 167px;
    left: 0;
    width: 1100px;
    height: 1100px;
}
.patternIcon {
    top: 35px;
    left: 574px;
    width: 1168px;
    height: 1167px;
    mix-blend-mode: normal;
    z-index: 3;
}
.leftIcon,
.leftIcon1 {
    position: absolute;
    top: 320px;
    width: 41px;
    height: 41px;
    z-index: 4;
}
.leftIcon {
    left: 625px;
    object-fit: contain;
}
.leftIcon1 {
    left: 1677px;
}
.imageLayers {
    width: 1742px;
    height: 1267px;
    position: absolute;
    margin: 0 !important;
    bottom: -754px;
    left: -601px;
}
.september1222 {
    position: relative;
    line-height: 30px;
    font-weight: 600;
    white-space: nowrap;
    z-index: 5;
}
.deliveryInThis,
.enjoyFreeHome {
    margin: 0;
}
.designerDresses,
.enjoyFreeHomeContainer {
    position: relative;
    display: inline-block;
    z-index: 5;
}
.enjoyFreeHomeContainer {
    margin: 0;
    height: 96px;
    font-size: 37px;
    line-height: 48px;
    font-weight: 900;
}
.designerDresses {
    line-height: 30px;
    font-weight: 600;
    color: rgba(255, 255, 255, 0.8);
    mix-blend-mode: normal;
    max-width: 100%;
    white-space: nowrap;
}
.promoDetails {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    gap: var(--gap-5xs);
    max-width: 100%;
}
.rectangle {
    height: 44px;
    width: 156px;
    position: relative;
    border-radius: var(--br-2xs);
    background-color: var(--color-coral);
    display: none;
}
.btn,
.getStarted {
    white-space: nowrap;
}
.getStarted {
    position: relative;
    font-size: var(--font-size-sm);
    letter-spacing: 1px;
    line-height: 28px;
    color: var(--theme-colors-white);
    text-align: left;
    z-index: 1;
}
.btn {
    cursor: pointer;
    border: 0;
    padding: var(--padding-5xs) 33px;
    background-color: var(--color-coral);
    width: 156px;
    border-radius: var(--br-2xs);
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    justify-content: flex-start;
    box-sizing: border-box;
    z-index: 5;
}
.btn:hover {
    background-color: #cc540f;
}
.box,
.image {
    border-radius: var(--br-sm);
    box-shadow: 6px 6px 54px rgba(0, 0, 0, 0.05);
}
.image {
    align-self: stretch;
    background-color: var(--color-royalblue-100);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    padding: 50px 130px;
    box-sizing: border-box;
    position: relative;
    gap: var(--gap-11xl);
    max-width: 100%;
    z-index: 1;
}
.box {
    width: 100%;
    height: 100%;
    position: absolute;
    margin: 0 !important;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-color: var(--theme-colors-white);
}
.imageIcon {
    height: 317px;
    flex: 1;
    position: relative;
    max-width: 100%;
    overflow: hidden;
    object-fit: cover;
    z-index: 1;
}
.leftIcon2 {
    object-fit: contain;
}
.leftIcon2,
.rightArrowIcon {
    height: 41px;
    width: 41px;
    position: relative;
    min-height: 41px;
    z-index: 2;
}
.imageParent,
.leftParent {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
}
.leftParent {
    width: 333px;
    margin: 0 !important;
    position: absolute;
    top: 134px;
    left: calc(50% - 166.5px);
    justify-content: space-between;
    gap: var(--gap-xl);
}
.imageParent {
    align-self: stretch;
    justify-content: flex-start;
    position: relative;
    max-width: 100%;
}
.title,
.title1 {
    position: relative;
    line-height: 20px;
    white-space: nowrap;
}
.title1 {
    font-size: var(--font-size-base);
    color: var(--color-royalblue-100);
}
.starIcon {
    width: 16px;
    height: 16px;
    position: relative;
}
.starWrapper {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    padding: var(--padding-11xs) 0 0;
}
.starIcon1 {
    width: 16px;
    height: 16px;
    position: relative;
}
.starContainer {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    padding: var(--padding-11xs) 0 0;
}
.starIcon2 {
    width: 16px;
    height: 16px;
    position: relative;
}
.starFrame {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    padding: var(--padding-11xs) 0 0;
}
.starIcon3 {
    width: 16px;
    height: 16px;
    position: relative;
}
.frameDiv {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    padding: var(--padding-11xs) 0 0;
}
.grayStarIcon {
    width: 16px;
    height: 16px;
    position: relative;
    mix-blend-mode: normal;
}
.grayStarWrapper {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    padding: var(--padding-11xs) 0 0;
}
.number {
    position: relative;
    letter-spacing: -0.17px;
    font-weight: 600;
    mix-blend-mode: normal;
    white-space: nowrap;
}
.stars,
.titleParent {
    display: flex;
    align-items: flex-start;
    justify-content: flex-start;
}
.stars {
    flex-direction: row;
    gap: var(--gap-10xs-4);
    font-size: var(--font-size-sm);
    color: var(--color-gray-300);
}
.titleParent {
    align-self: stretch;
    flex-direction: column;
    gap: var(--gap-5xs);
}
.rectangle1 {
    height: 100%;
    width: 100%;
    position: absolute;
    margin: 0 !important;
    top: 0;
    right: 1px;
    bottom: 0;
    left: 0;
    border-radius: var(--br-xs);
    background-color: var(--color-lavender);
    mix-blend-mode: normal;
}
.addToCart {
    position: relative;
    font-size: var(--font-size-sm);
    line-height: 28px;
    color: var(--color-gray-100);
    text-align: left;
    white-space: nowrap;
    z-index: 1;
}
.btn1,
.frameParent {
    display: flex;
    align-items: flex-start;
    justify-content: flex-start;
}
.btn1 {
    cursor: pointer;
    border: 0;
    padding: var(--padding-8xs) var(--padding-4xl);
    background-color: transparent;
    flex-direction: row;
    position: relative;
    white-space: nowrap;
}
.frameParent {
    width: 182px;
    flex-direction: column;
    gap: var(--gap-xl);
}
.favouriteIcon {
    height: 44px;
    width: 44px;
    position: relative;
    object-fit: contain;
}
.details {
    flex: 1;
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    justify-content: space-between;
    max-width: 100%;
    gap: var(--gap-xl);
    z-index: 1;
}
.detailsWrapper,
.productCard1 {
    display: flex;
    box-sizing: border-box;
    max-width: 100%;
}
.detailsWrapper {
    align-self: stretch;
    flex-direction: row;
    align-items: flex-start;
    justify-content: flex-end;
    padding: 0 var(--padding-base) 0 var(--padding-5xl);
}
.productCard1 {
    flex: 1;
    flex-direction: column;
    align-items: flex-end;
    justify-content: flex-start;
    padding: 0 0 var(--padding-4xl);
    position: relative;
    gap: var(--gap-5xl);
}
.productCard,
.productDisplay {
    flex-direction: row;
    align-items: flex-start;
    justify-content: flex-start;
    max-width: 100%;
}
.productCard {
    display: flex;
    z-index: 1;
}
.productDisplay {
    align-self: stretch;
    display: grid;
    gap: 28.5px;
    grid-template-columns: repeat(3, minmax(271px, 1fr));
    font-size: var(--font-size-lg);
    color: var(--color-gray-100);
}
.productPromo,
.promoBanner {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    max-width: 100%;
}
.productPromo {
    align-self: stretch;
    align-items: flex-end;
    gap: var(--gap-11xl);
    font-size: var(--font-size-base);
    color: var(--theme-colors-white);
}
.promoBanner {
    flex: 1;
    align-items: flex-start;
    gap: 23px;
}
.mainContent {
    align-self: stretch;
    flex-direction: row;
    justify-content: flex-start;
    padding: 0 29px;
    box-sizing: border-box;
}
.contentArea,
.homePage,
.mainContent {
    display: flex;
    align-items: flex-start;
    max-width: 100%;
}
.contentArea {
    width: 1201px;
    flex-direction: column;
    justify-content: flex-start;
    // padding: 0 var(--padding-12xs) var(--padding-11xl);
    box-sizing: border-box;
    position: relative;
    gap: var(--gap-11xl);
    text-align: left;
    font-size: 32px;
    color: var(--color-gray-100);
}
.homePage {
    align-self: stretch;
    flex-direction: row;
    justify-content: flex-end;
}
.sideBarBg {
    align-self: stretch;
    height: 1070px;
    position: relative;
    background-color: var(--theme-colors-white);
    display: none;
}
.stack {
    color: var(--color-gray-100);
}
.brightWeb {
    margin: 0;
    height: 27px;
    flex: 1;
    position: relative;
    font-size: inherit;
    font-weight: 800;
    display: inline-block;
    white-space: nowrap;
}
.logo,
.logoContainer {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
}

.logo {
    width: 140px;
    text-align: center;
    align-items: center;
    justify-content: flex-start;
    padding: 0 var(--padding-5xs) 0 0;
    box-sizing: border-box;
    z-index: 1;
    img {
        width: 60px;
        height: 60px;
        margin-right: 6px;
    }
}
.logoContainer {
    padding: 8px;
    margin-left: 56px;
    align-self: stretch;
}
.dividerIcon,
.pages {
    position: relative;
    z-index: 1;
}
.dividerIcon {
    align-self: stretch;
    height: 1px;
    max-width: 100%;
    overflow: hidden;
    flex-shrink: 0;
}
.pages {
    letter-spacing: 0.26px;
    mix-blend-mode: normal;
    white-space: nowrap;
}
.pageHeader {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    justify-content: flex-start;
    padding: 0 var(--padding-21xl);
    font-size: var(--font-size-xs);
    color: rgba(32, 34, 36, 0.6);
}
.dividerIcon1 {
    align-self: stretch;
    height: 1px;
    position: relative;
    max-width: 100%;
    overflow: hidden;
    flex-shrink: 0;
    z-index: 1;
}
.hideBg {
    height: 50px;
    width: 240px;
    position: relative;
    background-color: var(--theme-colors-white);
    display: none;
    opacity: 0;
    mix-blend-mode: normal;
}
.h3,
.products2 {
    position: relative;
    white-space: nowrap;
    z-index: 1;
}
.h3 {
    margin: 0;
    width: 22px;
    font-size: inherit;
    font-weight: 500;
    display: inline-block;
}
.products2 {
    letter-spacing: 0.3px;
    font-weight: 600;
}
.navigationSidebarItemLi,
.products1,
.settingsName {
    display: flex;
    align-items: flex-start;
    justify-content: flex-start;
}
.settingsName {
    flex-direction: column;
    padding: var(--padding-10xs) 0 0;
    text-align: left;
    font-size: var(--font-size-sm);
}
.navigationSidebarItemLi,
.products1 {
    flex-direction: row;
}
.products1 {
    flex: 1;
    padding: var(--padding-smi) var(--padding-21xl) var(--padding-xs);
    gap: var(--gap-base);
}
.navigationSidebarItemLi {
    align-self: stretch;
    z-index: 1;
}
.hideBg1 {
    height: 50px;
    width: 240px;
    position: relative;
    background-color: var(--theme-colors-white);
    display: none;
    opacity: 0;
    mix-blend-mode: normal;
}
.h31,
.products4 {
    position: relative;
    white-space: nowrap;
    z-index: 1;
}
.h31 {
    margin: 0;
    width: 22px;
    font-size: inherit;
    font-weight: 500;
    display: inline-block;
}
.products4 {
    letter-spacing: 0.3px;
    font-weight: 600;
}
.navigationSidebarItemLi1,
.products3,
.productsContainer {
    display: flex;
    align-items: flex-start;
    justify-content: flex-start;
}
.productsContainer {
    flex-direction: column;
    padding: var(--padding-10xs) 0 0;
    text-align: left;
    font-size: var(--font-size-sm);
}
.navigationSidebarItemLi1,
.products3 {
    flex-direction: row;
}
.products3 {
    flex: 1;
    padding: var(--padding-smi) var(--padding-21xl) var(--padding-xs);
    gap: var(--gap-base);
}
.navigationSidebarItemLi1 {
    align-self: stretch;
    z-index: 1;
}
.dividerParent,
.navigationSidebarMenuLi,
.settingsNavigation {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
}
.settingsNavigation {
    align-self: stretch;
}
.dividerParent,
.navigationSidebarMenuLi {
    gap: var(--gap-base);
}
.dividerParent {
    align-self: stretch;
    text-align: center;
    font-size: var(--font-size-3xl);
    color: var(--color-gray-100);
}
.navigationSidebarMenuLi {
    width: 260px;
    padding: var(--padding-5xl) var(--padding-xl) 91px 0;
    box-sizing: border-box;
    z-index: 2;
    margin-top: -1070px;
}
.hideBg2,
.sideBarBg1 {
    height: 100%;
    width: 100%;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}
.sideBarBg1 {
    position: absolute;
    background-color: #3749a7;
}
.hideBg2 {
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.div,
.hideBg2,
.products6 {
    position: absolute;
}
.products6 {
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div {
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.hideBg3,
.products5 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 91.5%;
    right: 0;
    bottom: 3.83%;
    left: 0;
}
.hideBg3 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products8 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div1 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.products7 {
    height: 4.67%;
    top: 86.82%;
    bottom: 8.5%;
}
.dividerIcon2,
.hideBg4,
.products7 {
    position: absolute;
    width: 100%;
    right: 0;
    left: 0;
}
.dividerIcon2 {
    height: 0.09%;
    top: 85.23%;
    bottom: 14.67%;
    max-width: 100%;
    overflow: hidden;
    max-height: 100%;
    mix-blend-mode: normal;
}
.hideBg4 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products10 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div2 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.hideBg5,
.products9 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 79.07%;
    right: 0;
    bottom: 16.26%;
    left: 0;
}
.hideBg5 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products12 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div3 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.hideBg6,
.products11 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 74.39%;
    right: 0;
    bottom: 20.93%;
    left: 0;
}
.hideBg6 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products14 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div4 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.hideBg7,
.products13 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 69.72%;
    right: 0;
    bottom: 25.61%;
    left: 0;
}
.hideBg7 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products16 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div5 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.hideBg8,
.products15 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 65.05%;
    right: 0;
    bottom: 30.28%;
    left: 0;
}
.hideBg8 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products18 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div6 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.hideBg9,
.products17 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 60.37%;
    right: 0;
    bottom: 34.95%;
    left: 0;
}
.hideBg9 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products20 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div7 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.hideBg10,
.products19 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 55.7%;
    right: 0;
    bottom: 39.63%;
    left: 0;
}
.hideBg10 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products22 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div8 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.hideBg11,
.products21 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 51.03%;
    right: 0;
    bottom: 44.3%;
    left: 0;
}
.hideBg11 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products24 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div9 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.hideBg12,
.products23 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 46.36%;
    right: 0;
    bottom: 48.97%;
    left: 0;
}
.hideBg12 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products26 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div10 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.products25 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 41.68%;
    right: 0;
    bottom: 53.64%;
    left: 0;
}
.pages1 {
    position: absolute;
    top: calc(50% - 121px);
    left: 16.67%;
    font-size: var(--font-size-xs);
    letter-spacing: 0.26px;
    opacity: 0.6;
    mix-blend-mode: normal;
}
.dividerIcon3,
.hideBg13 {
    position: absolute;
    width: 100%;
    right: 0;
    left: 0;
}
.dividerIcon3 {
    height: 0.09%;
    top: 37.1%;
    bottom: 62.8%;
    max-width: 100%;
    overflow: hidden;
    max-height: 100%;
    mix-blend-mode: normal;
}
.hideBg13 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products28 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div11 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.hideBg14,
.products27 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 30.93%;
    right: 0;
    bottom: 64.39%;
    left: 0;
}
.hideBg14 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products30 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div12 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.hideBg15,
.products29 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 26.26%;
    right: 0;
    bottom: 69.07%;
    left: 0;
}
.hideBg15 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products32 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div13 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    font-family: var(--font-linewesome);
    text-align: center;
}
.hideBg16,
.products31 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 21.59%;
    right: 0;
    bottom: 73.74%;
    left: 0;
}
.hideBg16 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products34 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div14 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.mask1,
.products33 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 16.92%;
    right: 0;
    bottom: 78.41%;
    left: 0;
}
.mask1 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
}
.hideBg17 {
    width: 80%;
    right: 10%;
    left: 10%;
    border-radius: var(--br-7xs);
    background-color: var(--color-royalblue-200);
}
.hideBg17,
.hideBgCopy,
.hideBgHideBgCopyMask {
    position: absolute;
    height: 100%;
    top: 0;
    bottom: 0;
}
.hideBgCopy {
    width: 3.75%;
    right: 98.33%;
    left: -2.08%;
    border-radius: 3px;
    background-color: var(--color-royalblue-200);
}
.hideBgHideBgCopyMask {
    width: 100%;
    right: 0;
    left: 0;
}
.products36 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div15 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.hideBg18,
.navigationSidebarItemLi2,
.products35 {
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}
.hideBg18,
.navigationSidebarItemLi2 {
    height: 4.67%;
    top: 12.24%;
    bottom: 83.08%;
}
.hideBg18 {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: var(--color-darkslateblue-100);
    box-shadow: -1px 0 0#313d4f inset;
}
.products38 {
    position: absolute;
    top: calc(50% - 9px);
    left: 32.5%;
    letter-spacing: 0.3px;
    font-weight: 600;
}
.div16 {
    position: absolute;
    top: calc(50% - 12px);
    left: 16.67%;
    font-size: var(--font-size-3xl);
    font-weight: 500;
    text-align: center;
}
.bg,
.products37 {
    position: absolute;
    height: 4.67%;
    width: 100%;
    top: 7.57%;
    right: 0;
    bottom: 87.76%;
    left: 0;
}
.bg {
    height: 100%;
    top: 0;
    bottom: 0;
    background-color: #273142;
    box-shadow: -1px 0 0#313d4f inset;
    opacity: 0;
    mix-blend-mode: normal;
}
.stack1 {
    color: var(--theme-colors-white);
}
.brightWeb1 {
    position: absolute;
    width: 93.49%;
    top: calc(50% - 13.5px);
    left: 0;
    font-weight: 800;
    display: inline-block;
}
.logo1 {
    position: absolute;
    width: 53.75%;
    top: calc(50% - 511px);
    right: 18.75%;
    left: 27.5%;
    height: 27px;
    font-size: var(--font-size-xl);
    color: var(--color-royalblue-100);
}
.navigationSidebarMenuLi1 {
    width: 240px;
    height: 1070px;
    position: relative;
    display: none;
    z-index: 3;
    font-size: var(--font-size-sm);
    color: var(--theme-colors-white);
}
.dashboard3 {
    width: 100%;
    position: relative;
    background-color: var(--theme-colors-white);
    // overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    line-height: normal;
    letter-spacing: normal;
    text-align: left;
    font-size: var(--font-size-xl);
    color: var(--color-royalblue-100);
}
@media screen and (max-width: 900px) {
    .products {
        font-size: 26px;
    }
    .enjoyFreeHomeContainer {
        font-size: 30px;
        line-height: 38px;
    }
    .productDisplay {
        justify-content: center;
        grid-template-columns: repeat(2, minmax(271px, 469px));
    }
    .navigationSidebarMenuLi {
        padding-bottom: 59px;
        box-sizing: border-box;
    }
}
@media screen and (max-width: 700px) {
    .image {
        gap: 15px;
        padding-left: var(--padding-46xl);
        padding-right: var(--padding-46xl);
        box-sizing: border-box;
    }
    .productDisplay {
        grid-template-columns: minmax(271px, 1fr);
    }
}
@media screen and (max-width: 450px) {
    .products {
        font-size: 19px;
    }
    .enjoyFreeHomeContainer {
        font-size: var(--font-size-3xl);
        line-height: 29px;
    }
    .image {
        padding-left: var(--padding-xl);
        padding-right: var(--padding-xl);
        box-sizing: border-box;
    }
    .details {
        flex-wrap: wrap;
    }
    .brightWeb {
        font-size: var(--font-size-base);
    }
    .h3,
    .h31 {
        font-size: var(--font-size-lg);
    }
    .navigationSidebarMenuLi {
        padding-bottom: 38px;
        box-sizing: border-box;
    }
    .div,
    .div1,
    .div10,
    .div11,
    .div12,
    .div13,
    .div14,
    .div15,
    .div16,
    .div2,
    .div3,
    .div4,
    .div5,
    .div6,
    .div7,
    .div8,
    .div9 {
        font-size: var(--font-size-lg);
    }
    .brightWeb1 {
        font-size: var(--font-size-base);
    }
}

.dashContainer {
    position: fixed;
    background-color: #fff;
    width: 100%;
    flex-direction: row-reverse;
    font-family: "Be Vietnam Pro" !important;
    justify-content: space-between;
}

.contentNav {
    width: 280px;
}

================
File: src/layout/headerAdmin/index.js
================
import NavigationTopBar from "../../component/dashboard/NavigationTopBar";
import styles from "./HeaderAdmin.module.scss";
import logo from "../../assets/images/E-tutor_logo.png";
import clsx from "clsx";
import { Link } from "react-router-dom";
import { useSelector } from "react-redux";

function AdminHeader() {

    return (
        <div
            className={clsx("z-header d-flex fixed", styles.dashContainer, {
                [styles.dashboard3]: true,
            })}
        >
            <main className={styles.homePage}>
                <section className={styles.contentArea}>
                    {/* <NavigationTopBar /> */}
                </section>
            </main>
            <div
                className={clsx(styles.content, {
                    [styles.navigationSidebarMenuLi]: false,
                })}
            >
                <div className={styles.logoContainer}>
                    <Link to="/">
                        <div className={styles.logo}>
                            <img src={logo} alt="Logo Dream Chasers" />
                            <h3 className={styles.brightWeb}>
                                {/* <span>Dream</span> */}

                                <span className={styles.stack}>Dream Catchers</span>
                            </h3>
                        </div>
                    </Link>
                </div>

                {/* <ProductNavigation /> */}
                <img
                    className={styles.dividerIcon}
                    loading="lazy"
                    alt=""
                    src="/divider.svg"
                />
                {/* <div className={styles.pageHeader}>
                    <b className={styles.pages}>PAGES</b>
                </div>
                <div className={styles.dividerParent}>
                    <img
                        className={styles.dividerIcon1}
                        alt=""
                        src="/divider.svg"
                    />
                    <div className={styles.settingsNavigation}>
                        <div className={styles.navigationSidebarItemLi}>
                            <div className={styles.products1}>
                                <div className={styles.hideBg} />
                                <h3 className={styles.h3}></h3>
                                <div className={styles.settingsName}>
                                    <div className={styles.products2}>
                                        Settings
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div className={styles.navigationSidebarItemLi1}>
                            <div className={styles.products3}>
                                <div className={styles.hideBg1} />
                                <h3 className={styles.h31}></h3>
                                <div className={styles.productsContainer}>
                                    <div className={styles.products4}>
                                        Logout
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div> */}
                {/* </div> */}
                {/* <div className={styles.navigationSidebarMenuLi1}>
                <div className={styles.sideBarBg1} />
                <div className={styles.products5}>
                    <div className={styles.hideBg2} />
                    <div className={styles.products6}>Logout</div>
                    <div className={styles.div}></div>
                </div>
                <div className={styles.products7}>
                    <div className={styles.hideBg3} />
                    <div className={styles.products8}>Settings</div>
                    <div className={styles.div1}></div>
                </div>
                <img
                    className={styles.dividerIcon2}
                    alt=""
                    src="/divider-2.svg"
                />
                <div className={styles.products9}>
                    <div className={styles.hideBg4} />
                    <div className={styles.products10}>Table</div>
                    <div className={styles.div2}></div>
                </div>
                <div className={styles.products11}>
                    <div className={styles.hideBg5} />
                    <div className={styles.products12}>Profile</div>
                    <div className={styles.div3}></div>
                </div>
                <div className={styles.products13}>
                    <div className={styles.hideBg6} />
                    <div className={styles.products14}>UI Elements</div>
                    <div className={styles.div4}></div>
                </div>
                <div className={styles.products15}>
                    <div className={styles.hideBg7} />
                    <div className={styles.products16}>Invoice</div>
                    <div className={styles.div5}></div>
                </div>
                <div className={styles.products17}>
                    <div className={styles.hideBg8} />
                    <div className={styles.products18}>Contact</div>
                    <div className={styles.div6}></div>
                </div>
                <div className={styles.products19}>
                    <div className={styles.hideBg9} />
                    <div className={styles.products20}>To-Do</div>
                    <div className={styles.div7}></div>
                </div>
                <div className={styles.products21}>
                    <div className={styles.hideBg10} />
                    <div className={styles.products22}>Feed</div>
                    <div className={styles.div8}></div>
                </div>
                <div className={styles.products23}>
                    <div className={styles.hideBg11} />
                    <div className={styles.products24}>Calendar</div>
                    <div className={styles.div9}></div>
                </div>
                <div className={styles.products25}>
                    <div className={styles.hideBg12} />
                    <div className={styles.products26}>File Manager</div>
                    <div className={styles.div10}></div>
                </div> */}
                {/* <b className={styles.pages1}>PAGES</b>
                <img
                    className={styles.dividerIcon3}
                    alt=""
                    src="/divider-3.svg"
                />
                <div className={styles.products27}>
                    <div className={styles.hideBg13} />
                    <div className={styles.products28}>E-commerce</div>
                    <div className={styles.div11}></div>
                </div>
                <div className={styles.products29}>
                    <div className={styles.hideBg14} />
                    <div className={styles.products30}>Order Lists</div>
                    <div className={styles.div12}></div>
                </div>
                <div className={styles.products31}>
                    <div className={styles.hideBg15} />
                    <div className={styles.products32}>Messenger</div>
                    <div className={styles.div13}></div>
                </div>
                <div className={styles.products33}>
                    <div className={styles.hideBg16} />
                    <div className={styles.products34}>Favourites</div>
                    <div className={styles.div14}></div>
                </div>
                <div className={styles.navigationSidebarItemLi2}>
                    <div className={styles.products35}>
                        <div className={styles.hideBgHideBgCopyMask}>
                            <div className={styles.mask1} />
                            <div className={styles.hideBg17} />
                            <div className={styles.hideBgCopy} />
                        </div>
                        <div className={styles.products36}>Products</div>
                        <div className={styles.div15}></div>
                    </div>
                </div>
                <div className={styles.products37}>
                    <div className={styles.hideBg18} />
                    <div className={styles.products38}>Dashboard</div>
                    <div className={styles.div16}></div>
                </div>
                <div className={styles.logo1}>
                    <div className={styles.bg} />
                    <div className={styles.brightWeb1}>
                        <span>Dash</span>
                        <span className={styles.stack1}>Stack</span>
                    </div>
                </div> */}
            </div>
        </div>
    );
}

export default AdminHeader;

================
File: src/pages/admin/Category/create/index.js
================
import styles from "../../Course/create/CreateCourse.module.scss";
import clsx from "clsx";
import { useEffect, useState } from "react";
import { toast } from "sonner";
import * as dataApi from "../../../../api/apiService/dataService";
import { Navigate, redirect, useParams } from "react-router-dom";

function CreateCategory() {
    const [category, setCateogry] = useState();
    const handleInputChange = (e) => {
        setCateogry(e.target.value);
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        toast.promise(dataApi.createCategory(category), {
            loading: "Loading...",
            success: (data) => {
                setCateogry("");
                return data.mess;
            },
            error: (error) => {
                return error.mess;
            },
        });
    };

    return (
        <div>
            <div className="container flex flex-col">
                <div className="wrapMainDash mr-auto w-3/4 ">
                    <h3 className="titleMainDash">Create a new category</h3>
                    <div
                        className={clsx(
                            styles.formGroup,
                            "flex gap-6 flex-col rounded-lg"
                        )}
                    >
                        <div className={clsx(styles.formField)}>
                            <input
                                required
                                onChange={handleInputChange}
                                value={category}
                                name="name"
                                data-validate
                                className={clsx(styles.formInput)}
                                type="text"
                            />
                            <label className={clsx(styles.formLabel)}>
                                Name
                            </label>
                        </div>

                        <button
                            type="submit"
                            className="justify-center px-5 py-3.5 mt-5 text-sm font-medium text-center text-white bg-black rounded-lg max-md:max-w-full w-full"
                            onClick={handleSubmit}
                        >
                            Create
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default CreateCategory;

================
File: src/pages/admin/Category/edit/index.js
================
import styles from "../../Course/create/CreateCourse.module.scss";
import clsx from "clsx";
import { useEffect, useState } from "react";
import { toast } from "sonner";
import * as dataApi from "../../../../api/apiService/dataService";
import { Navigate, redirect, useParams } from "react-router-dom";

function CategoryEdit() {
    const { id } = useParams();
    const [category, setCateogry] = useState({});
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setCateogry({
            ...category,
            [name]: value,
        });
    };

    useEffect(() => {
        toast.promise(dataApi.getCategoryById(id), {
            loading: "Loading...",
            success: (data) => {
                console.log(data);
                setCateogry(data);
                return data.mess;
            },
            error: (error) => {
                console.log(error);
                return error.mess;
            },
        });
    }, []);
    const handleSubmit = (e) => {
        e.preventDefault();
        toast.promise(dataApi.editCategory(id, category), {
            loading: "Loading...",
            success: (data) => {
                return data.mess;
            },
            error: (error) => {
                return error;
            },
        });
    };

    return (
        <div>
            <div className="container flex flex-col">
                <div className="wrapMainDash mr-auto w-3/4 ">
                    <h3 className="titleMainDash">Edit a category</h3>
                    <div
                        className={clsx(
                            styles.formGroup,
                            "flex gap-6 flex-col rounded-lg"
                        )}
                    >
                        <div
                            className={clsx(styles.formField, "field-disable")}
                        >
                            <input
                                value={category.id}
                                onChange={handleInputChange}
                                name="id"
                                data-validate
                                className={clsx(styles.formInput)}
                                type="text"
                                disabled
                            />
                            <label className={clsx(styles.formLabel)}>Id</label>
                        </div>
                        <div className={clsx(styles.formField)}>
                            <input
                                required
                                onChange={handleInputChange}
                                value={category.name}
                                name="name"
                                data-validate
                                className={clsx(styles.formInput)}
                                type="text"
                            />
                            <label className={clsx(styles.formLabel)}>
                                Name
                            </label>
                        </div>

                        <button
                            type="submit"
                            className="justify-center px-5 py-3.5 mt-5 text-sm font-medium text-center text-white bg-black rounded-lg max-md:max-w-full w-full"
                            onClick={handleSubmit}
                        >
                            Edit
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default CategoryEdit;

================
File: src/pages/admin/Category/historyDeleted/index.js
================
import { useEffect, useRef, useState } from "react";
import styles from "../../Course/list/List.module.scss";
import clsx from "clsx";
import { toast } from "sonner";
import * as dataApi from "../../../../api/apiService/dataService";
import noDataIcon from "../../../../assets/images/ic_noData.svg";
import restoreIcon from "../../../../assets/images/restore.svg";
import Modal from "../../../../component/modal";
import FooterDataAdmin from "../../../../component/footerDataAdmin";

const selectes = [5, 10, 25];

function HistoryDeletedCategory() {
    const [categories, setCategories] = useState([]);
    const [totalData, setTotalData] = useState(0);
    const [selected, setSelected] = useState(selectes[0]);
    const [page, setPage] = useState(0);
    const [render, setRender] = useState();
    const firstRender = useRef(true);

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllCategoryDeleted(
                    page,
                    selected
                );
                console.log(result);
                setCategories(result.content.content);
                setTotalData(result.content.totalElements);
            } catch (error) {
                console.log(error.mess);
            }
        };
        fetchApi();
    }, [render]);

    const handleSelectPageSizeChange = (size) => {
        setSelected(size);
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllCategoryDeleted(page, size);
                setCategories(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };

    const handleSearchInputChange = (e) => {
        const fetchApi = () => {
            toast.promise(
                dataApi.getCategoryByTitle(e.target.value, page, selected),
                {
                    loading: "loading...",
                    success: (data) => {
                        setCategories(data.content);
                        return "Get data successfully";
                    },
                    error: (error) => {
                        console.log(error);
                        return error;
                    },
                }
            );
        };
        const debounceApi = debounce(fetchApi, 1000);
        debounceApi();
    };

    let timerId;

    const debounce = (func, delay = 600) => {
        return () => {
            clearTimeout(timerId);
            timerId = setTimeout(() => {
                func();
            }, delay);
        };
    };

    const handleRestoreCategory = (id) => {
        toast.promise(dataApi.restoreCategoryById(id), {
            loading: "loading...",
            success: (data) => {
                setRender(!render);
                return data.mess;
            },
            error: (error) => {
                console.log(error);
                return error.mess;
            },
        });
    };

    useEffect(() => {
        if (firstRender.current) {
            firstRender.current = false;
            return;
        }
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllCategoryDeleted(
                    page,
                    selected
                );
                console.log(result);
                setCategories(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, [page]);

    return (
        <div className="flex justify-center w-full ">
            <div className="container mt-5 mx-14">
                <div className="wrapMainDash">
                    <div className={clsx(styles.topMain)}>
                        <div className={clsx(styles.itemTopMain)}>
                            <h4>HISTORY DELETE</h4>
                        </div>
                        <div className={clsx(styles.itemTopMain)}></div>
                    </div>

                    <div className="formGroup flex flex-col gap-3">
                        <div
                            className={clsx(
                                styles.contentMain,
                                "flex justify-between"
                            )}
                        >
                            <div className={clsx(styles.contentItem)}></div>
                            <div className={clsx(styles.contentItem, "flex-1")}>
                                <div
                                    id="seachWrap"
                                    className={clsx(styles.search, " mr-4")}
                                >
                                    <input
                                        onChange={handleSearchInputChange}
                                        id="searchInput"
                                        type="search"
                                        placeholder="Search.."
                                    />
                                </div>
                            </div>
                        </div>
                        <div className={clsx(styles.mid)}>
                            <div
                                className={clsx(
                                    styles.titleMid,
                                    "row rounded-lg"
                                )}
                            >
                                <div className="col-lg-2">Id</div>
                                <div className="col-lg-5">Category</div>
                                <div className="col-lg-3">Create at</div>
                                <div className="col-lg-2">Action</div>
                            </div>
                            <div className={clsx(styles.containerData)}>
                                {categories &&
                                    categories.map((category, index) => {
                                        const dateTime = new Date(
                                            category.date
                                        );

                                        const date =
                                            dateTime.toLocaleDateString(); // Lấy ngày tháng năm
                                        const time =
                                            dateTime.toLocaleTimeString();

                                        return (
                                            <div
                                                key={index}
                                                className={clsx(
                                                    styles.item,
                                                    "row rounded-lg"
                                                )}
                                            >
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {category.id}
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-5 flex "
                                                    )}
                                                >
                                                    <div className="overflow-hidden">
                                                        <div
                                                            className={clsx(
                                                                styles.name
                                                            )}
                                                        >
                                                            {category.name}
                                                        </div>
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-3"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {date}
                                                        <br />
                                                        {time}
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name,
                                                            "flex gap-4"
                                                        )}
                                                    >
                                                        <button
                                                            type="button"
                                                            onClick={() =>
                                                                handleRestoreCategory(
                                                                    category.id
                                                                )
                                                            }
                                                        >
                                                            <img
                                                                src={
                                                                    restoreIcon
                                                                }
                                                                alt=""
                                                            />
                                                        </button>

                                                        {/* <button
                                                            data-micromodal-trigger="modal-1"
                                                            type="button"
                                                            onClick={() =>
                                                                openDeleteModal(
                                                                    category.id
                                                                )
                                                            }
                                                        >
                                                            <img
                                                                src={deleteIcon}
                                                                alt=""
                                                                className="cursor-pointer"
                                                            />
                                                        </button> */}
                                                    </div>
                                                </div>
                                            </div>
                                        );
                                    })}
                                {!categories.length && (
                                    <div
                                        className={clsx(
                                            styles.noData,
                                            "flex flex-col justify-center text-center"
                                        )}
                                    >
                                        <img
                                            src={noDataIcon}
                                            alt=""
                                            className={clsx(
                                                styles.noDataImg,
                                                "m-auto w-32"
                                            )}
                                        />
                                        <span>No Data</span>
                                    </div>
                                )}
                            </div>
                            <FooterDataAdmin
                                handleSelectPageSizeChange={
                                    handleSelectPageSizeChange
                                }
                                totalData={totalData}
                                size={selected}
                                page={page}
                                setPage={setPage}
                            ></FooterDataAdmin>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default HistoryDeletedCategory;

================
File: src/pages/admin/Category/list/index.js
================
import { useEffect, useState } from "react";
import styles from "../../Course/list/List.module.scss";
import clsx from "clsx";
import { toast } from "sonner";
import * as dataApi from "../../../../api/apiService/dataService";
import { Link } from "react-router-dom";
import deleteIcon from "../../../../assets/images/delete.svg";
import viewIcon from "../../../../assets/images/view.svg";
import editIcon from "../../../../assets/images/edit.svg";
import noDataIcon from "../../../../assets/images/ic_noData.svg";
import Modal from "../../../../component/modal";

import FooterDataAdmin from "../../../../component/footerDataAdmin";

const selectes = [5, 10, 25];

function ListCategory() {
    const [categories, setCategories] = useState([]);
    const [deletedModalOpen, setDeletedModalOpen] = useState(false);
    const [deleteId, setDeleteId] = useState(null);
    const [totalData, setTotalData] = useState(0);
    const [selected, setSelected] = useState(selectes[0]);
    const [page, setPage] = useState(0);
    const [render, setRender] = useState();

    const handleRemoveCategory = () => {
        const fetchApi = async () => {
            toast.promise(dataApi.softDeleteCategoryById(deleteId), {
                loading: "Removing...",
                success: () => {
                    setDeletedModalOpen(false);
                    setRender(!render);
                    return "Remove successfully";
                },
                error: (error) => {
                    return error.content;
                },
            });
        };

        fetchApi();
    };

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllCategories(page, selected);
                setTotalData(result.content.totalElements);
                setCategories(result.content.content);
            } catch (error) {
                console.log(error.mess);
            }
        };
        fetchApi();
    }, [render]);

    const handleSelectPageSizeChange = (size) => {
        setSelected(size);
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllCategories(page, size);
                setCategories(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };

    const handleSearchInputChange = (e) => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getCategoryByTitle(
                    e.target.value,
                    page,
                    selected
                );
                setCategories(result.content.content);
                setTotalData(result.content.totalElements);
            } catch (error) {
                console.log(error);
            }
        };
        const debounceApi = debounce(fetchApi, 300);
        debounceApi();
    };

    const handlePageData = async (action) => {
        const currentTotalData = page * selected + selected;
        if (action === "next" && currentTotalData < totalData) {
            setPage((prev) => prev + 1);
        }
        if (action === "previous" && page > 0) {
            setPage((prev) => prev - 1);
        }
    };

    let timerId;

    const debounce = (func, delay = 600) => {
        return () => {
            clearTimeout(timerId);
            timerId = setTimeout(() => {
                func();
            }, delay);
        };
    };

    const handleCloseModal = () => {
        setDeletedModalOpen(false);
    };

    const openDeleteModal = (id) => {
        setDeleteId(id);
        setDeletedModalOpen(true);
    };

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllCategories(page, selected);
                setCategories(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, [page]);

    return (
        <div className="flex justify-center w-full ">
            <div className="container mt-5 mx-14">
                <div className="wrapMainDash">
                    <div className={clsx(styles.topMain)}>
                        <div className={clsx(styles.itemTopMain)}>
                            <h4>List</h4>
                        </div>
                        <div className={clsx(styles.itemTopMain)}>
                            <Link
                                to={"/admin/category/create"}
                                className={styles.btnCreate}
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    aria-hidden="true"
                                    role="img"
                                    className="component-iconify MuiBox-root css-1t9pz9x iconify iconify--mingcute"
                                    width="20px"
                                    height="20px"
                                    viewBox="0 0 24 24"
                                >
                                    <g fill="none">
                                        <path d="M24 0v24H0V0zM12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427c-.002-.01-.009-.017-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093c.012.004.023 0 .029-.008l.004-.014l-.034-.614c-.003-.012-.01-.02-.02-.022m-.715.002a.023.023 0 0 0-.027.006l-.006.014l-.034.614c0 .012.007.02.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z"></path>
                                        <path
                                            fill="currentColor"
                                            d="M11 20a1 1 0 1 0 2 0v-7h7a1 1 0 1 0 0-2h-7V4a1 1 0 1 0-2 0v7H4a1 1 0 1 0 0 2h7z"
                                        ></path>
                                    </g>
                                </svg>
                                New Category
                            </Link>
                        </div>
                    </div>

                    <div className="formGroup flex flex-col gap-3">
                        <div
                            className={clsx(
                                styles.contentMain,
                                "flex justify-between"
                            )}
                        >
                            <div className={clsx(styles.contentItem)}></div>
                            <div
                                className={clsx(styles.contentItem, "flex-1 ")}
                            >
                                <div
                                    id="seachWrap"
                                    className={clsx(styles.search, "mr-4")}
                                >
                                    {/* <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        aria-hidden="true"
                                        role="img"
                                        className="component-iconify MuiBox-root css-1kj4kj3 iconify iconify--eva"
                                        width="1em"
                                        height="1em"
                                        viewBox="0 0 24 24"
                                    >
                                        <path
                                            fill="currentColor"
                                            d="m20.71 19.29l-3.4-3.39A7.92 7.92 0 0 0 19 11a8 8 0 1 0-8 8a7.92 7.92 0 0 0 4.9-1.69l3.39 3.4a1 1 0 0 0 1.42 0a1 1 0 0 0 0-1.42M5 11a6 6 0 1 1 6 6a6 6 0 0 1-6-6"
                                        ></path>
                                    </svg> */}
                                    <input
                                        onChange={handleSearchInputChange}
                                        id="searchInput"
                                        type="search"
                                        placeholder="Search.."
                                    />
                                </div>
                            </div>
                        </div>
                        <div className={clsx(styles.mid)}>
                            <div
                                className={clsx(
                                    styles.titleMid,
                                    "row rounded-lg"
                                )}
                            >
                                <div className="col-lg-2">Id</div>
                                <div className="col-lg-5">Category</div>
                                <div className="col-lg-3">Create at</div>
                                <div className="col-lg-2">Action</div>
                            </div>
                            <div className={clsx(styles.containerData)}>
                                {categories &&
                                    categories.map((category, index) => {
                                        const dateTime = new Date(
                                            category.date
                                        );

                                        const date =
                                            dateTime.toLocaleDateString(); // Lấy ngày tháng năm
                                        const time =
                                            dateTime.toLocaleTimeString();

                                        return (
                                            <div
                                                key={index}
                                                className={clsx(
                                                    styles.item,
                                                    "row rounded-lg"
                                                )}
                                            >
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {category.id}
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-5 flex "
                                                    )}
                                                >
                                                    <div className="overflow-hidden">
                                                        <div
                                                            className={clsx(
                                                                styles.name
                                                            )}
                                                        >
                                                            {category.name}
                                                        </div>
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-3"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {date}
                                                        <br />
                                                        {time}
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name,
                                                            "flex gap-4"
                                                        )}
                                                    >
                                                        <Link
                                                            to={`/admin/category/detail/${category.id}`}
                                                        >
                                                            <img
                                                                src={viewIcon}
                                                                alt=""
                                                            />
                                                        </Link>
                                                        <Link
                                                            to={`/admin/category/edit/${category.id}`}
                                                        >
                                                            <img
                                                                src={editIcon}
                                                                alt=""
                                                            />
                                                        </Link>
                                                        <button
                                                            data-micromodal-trigger="modal-1"
                                                            type="button"
                                                            onClick={() =>
                                                                openDeleteModal(
                                                                    category.id
                                                                )
                                                            }
                                                        >
                                                            <img
                                                                src={deleteIcon}
                                                                alt=""
                                                                className="cursor-pointer"
                                                            />
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        );
                                    })}

                                {!categories.length && (
                                    <div
                                        className={clsx(
                                            styles.noData,
                                            "flex flex-col justify-center text-center"
                                        )}
                                    >
                                        <img
                                            src={noDataIcon}
                                            alt=""
                                            className={clsx(
                                                styles.noDataImg,
                                                "m-auto w-32"
                                            )}
                                        />
                                        <span>No Data</span>
                                    </div>
                                )}
                            </div>
                            <FooterDataAdmin
                                handleSelectPageSizeChange={
                                    handleSelectPageSizeChange
                                }
                                totalData={totalData}
                                size={selected}
                                page={page}
                                setPage={setPage}
                            ></FooterDataAdmin>
                        </div>
                    </div>
                </div>
            </div>
            <Modal
                isOpen={deletedModalOpen}
                closeModal={handleCloseModal}
                title={"Delete"}
                description={"Are you sure want to delete?"}
                handleRemove={handleRemoveCategory}
            ></Modal>
        </div>
    );
}

export default ListCategory;

================
File: src/pages/admin/Course/create/CreateCourse.module.scss
================
@import "../../../../component/globalStyles/GlobalStyles.scss";
.formInput {
    border: 0px;
    background: none;
    margin: 0px;
    -webkit-tap-highlight-color: transparent;
    display: block;
    min-width: 0px;
    width: 100%;

    animation-duration: 10ms;
    line-height: 23px;
    font-weight: 400;
    border-radius: 8px;
    padding: 16.5px 14px;
    border: 1px solid $border-color;

    &:focus + .formLabel {
        top: 0;
        font-weight: 600;
        font-size: 14px;
        background-color: white;
        color: rgb(33, 43, 54);
    }

    &:focus + .formLabel.descInput {
        top: 0;
        transform: translateY(-50%);
        font-weight: 600;
        font-size: 14px;
        background-color: white;
        color: rgb(33, 43, 54);
    }
}

.formGroup {
    border-radius: 8px;
    padding: 24px;
    box-shadow: rgba(145, 158, 171, 0.2) 0px 0px 2px 0px,
        rgba(145, 158, 171, 0.12) 0px 12px 24px -4px;
}

.formField {
    position: relative;
    border-radius: 8px;
}

.formLabel {
    position: absolute;
    transform: translateY(-50%);
    left: 14px;
    font-size: 15px;
    background-color: rgb(255, 255, 255);
    user-select: none;
    color: $label-gray;
    // transition: 200ms cubic-bezier(0, 0, 0.2, 1) 0ms,
    //     transform 200ms cubic-bezier(0, 0, 0.2, 1) 0ms,
    //     max-width 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;
    transition: 200ms ease-in-out;
    top: 0;
    font-weight: 600;
    font-size: 14px;
    background-color: white;
}

.formField {
    .formLabel.descInput {
        top: 0;
        font-weight: 600;
        font-size: 14px;
        background-color: white;
    }
}

.formLabel2 {
    margin: 0px;
    // height: 100%;
    font-weight: 600;
    line-height: 1.57143;
    font-size: 14px;
    margin-top: 10px;
}

.labelFile {
    justify-content: center;
    display: flex;
    padding: 40px;
    outline: none;
    border-radius: 8px;
    cursor: pointer;
    overflow: hidden;
    position: relative;
    background-color: rgba(145, 158, 171, 0.08);
    border: 1px dashed rgba(145, 158, 171, 0.2);
    transition: opacity 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
        padding 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;

    img {
        height: 150px;
        width: 250px;
    }
}

.outer {
    display: inline-flex;
    overflow: hidden;
    box-sizing: border-box;
    position: relative;
    flex-shrink: 0;
    z-index: 0;
    vertical-align: middle;
    width: 58px;
    height: 38px;
    padding: 9px 13px 9px 12px;
    opacity: 1;
    border-radius: 14px;
    background-color: rgba(145, 158, 171, 0.48);
}

.switch {
    display: inline-flex;
    -webkit-box-align: center;
    align-items: center;
    -webkit-box-pack: center;
    justify-content: center;
    box-sizing: border-box;
    -webkit-tap-highlight-color: transparent;
    background-color: transparent;
    outline: 0px;
    border: 0px;
    margin: 0px;
    cursor: pointer;
    user-select: none;
    vertical-align: middle;
    appearance: none;
    text-decoration: none;
    padding: 9px;
    border-radius: 50%;
    position: absolute;
    top: 0px;
    left: 0px;
    z-index: 1;
    background-color: rgb(255, 255, 255);
    transition: left 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
        transform 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
}

.imgList {
    margin-top: 24px;
    margin-bottom: 24px;
    .imgField {
        flex-direction: column;
        -webkit-box-align: center;
        align-items: center;
        display: inline-flex;
        -webkit-box-pack: center;
        justify-content: center;
        margin: 4px;
        width: 80px;
        height: 80px;
        border-radius: 10px;
        overflow: hidden;
        position: relative;
        border: 1px solid rgba(145, 158, 171, 0.16);
    }
    img {
        width: 100%;
        height: 100%;
        flex-shrink: 0;
        object-fit: cover;
        position: absolute;
    }
    button {
        width: 18px;
        height: 18px;
        border-radius: 100rem;
        display: inline-flex;
        -webkit-box-align: center;
        align-items: center;
        -webkit-box-pack: center;
        justify-content: center;
        box-sizing: border-box;
        -webkit-tap-highlight-color: transparent;
        outline: 0px;
        border: 0px;
        margin: 0px;
        cursor: pointer;
        user-select: none;
        text-align: center;
        flex: 0 0 auto;
        border-radius: 50%;
        overflow: visible;
        transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
        font-size: 1.125rem;
        padding: 4px;
        top: 4px;
        right: 4px;
        position: absolute;
        color: rgb(255, 255, 255);
        background-color: rgba(22, 28, 36, 0.48);
    }
}

.btnClosePreview {
    width: 18px;
    height: 18px;
    border-radius: 100rem;
    display: inline-flex;
    -webkit-box-align: center;
    align-items: center;
    -webkit-box-pack: center;
    justify-content: center;
    box-sizing: border-box;
    -webkit-tap-highlight-color: transparent;
    outline: 0px;
    border: 0px;
    margin: 0px;
    cursor: pointer;
    user-select: none;
    text-align: center;
    flex: 0 0 auto;
    border-radius: 50%;
    overflow: visible;
    transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    font-size: 1.125rem;
    padding: 4px;
    top: 4px;
    right: 4px;
    position: absolute;
    color: rgb(255, 255, 255);
    background-color: rgba(22, 28, 36, 0.48);
}

.videoField {
    height: 100%;
    video {
        height: 100%;
    }
}

.thumbnailImg {
    height: 231px;
    margin: auto;
}

.sectionName {
    font-size: 22px;
}

================
File: src/pages/admin/Course/create/index.js
================
import "bootstrap/dist/css/bootstrap.min.css";
import styles from "./CreateCourse.module.scss";
import clsx from "clsx";
import fileSelect from "../../../../assets/images/fileSelect.svg";
import { useEffect, useState } from "react";
import Select from "react-select";
import * as DataApi from "../../../../api/apiService/dataService";
import { toast } from "sonner";
import btnClose from "../../../../assets/images/btnClose.svg";

const initFormData = {
    id: "",
    title: "",
    description: "",
    price: "",
    discount: "",
    thumbnail: "",
    video: "",
    categories: [],
    sections: [],
    date: "",
    instructor: "", // Add this if BE requires it
};

function CreateCourse() {
    const [formData, setFormData] = useState(initFormData);
    const [options, setOptions] = useState([]);
    const [errors, setErrors] = useState({});
    const [isUploading, setIsUploading] = useState(false);
    const [currentUser, setCurrentUser] = useState(null); // Store current user info

    let timerId;

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        errors[name] = "";
        setErrors(errors);
        setFormData({
            ...formData,
            [name]: value,
        });
    };
    const fetchInstructorEmail = () => {
        const user = sessionStorage.getItem("user");
        if (user) {
            const parsedUser = JSON.parse(user);
            return parsedUser.email || ""; // Default to an empty string if email is not found
        }
        return "";
    };

    useEffect(() => {
        // Set instructor email on component mount
        const instructorEmail = fetchInstructorEmail();
        if (instructorEmail) {
            setFormData((prev) => ({ ...prev, instructor: instructorEmail }));
        } else {
            toast.error("Failed to fetch instructor email from sessionStorage.");
        }
    }, []);

    const handleFileChange = (e, index, indexSection) => {
        const file = e.target.files[0];
        setIsUploading(true);
        toast.promise(DataApi.uploadImg(file), {
            loading: "Loading file...",
            success: (result) => {
                setIsUploading(false);
                if (file.type === "video/mp4") {
                    const updateSection = {
                        ...formData.sections[indexSection],
                    };
                    updateSection.lessons[index] = {
                        ...updateSection.lessons[index],
                        video: result.content,
                    };
                    const updateSections = [...formData.sections];
                    updateSections[indexSection] = updateSection;

                    setFormData({
                        ...formData,
                        sections: [...updateSections],
                    });
                } else {
                    setFormData({
                        ...formData,
                        thumbnail: result.content,
                    });
                }
                return "Uploading successfully...";
            },
            error: (error) => {
                console.log(error);
                return "Upload thumbnail failed";
            },
        });
        e.target.value = "";
        errors[e.target.name] = "";
        setErrors(errors);
    };

    const handleSelectChange = (e) => {
        setFormData({
            ...formData,
            categories: [...e], // Ensure it maps to BE-required format
            isEditedCategories: true, // For BE validation
        });
    };

    const handleUpdateVideoCourse = (e) => {
        setIsUploading((prev) => true);
        toast.promise(DataApi.uploadImg(e.target.files[0]), {
            loading: "Loading video...",
            success: (result) => {
                setIsUploading((prev) => false);
                setFormData((prev) => {
                    return { ...prev, video: result.content };
                });
                return "Upload video successfully";
            },
            error: (error) => {
                console.log(error);
                return "Upload video failed";
            },
        });
    };

    const handleRemoveItemPrevivew = (e, type, index, sectionIndex) => {
        if (type === "video") {
            const updateSection = { ...formData.sections[sectionIndex] };
            updateSection.lessons[index] = {
                ...updateSection.lessons[index],
                video: null,
                actionVideo: "NONE",
            };
            const updateSections = [...formData.sections];
            updateSections[sectionIndex] = { ...updateSection };
            setFormData({ ...formData, sections: [...updateSections] });
        } else setFormData({ ...formData, thumbnail: "" });
        e.target.value = "";
    };

    const handleInputLessonChange = (e, index, sectionIndex) => {
        const { name, value } = e.target;
        const updateSection = { ...formData.sections[sectionIndex] };
        const updateSections = [...formData.sections];
        updateSection.lessons[index] = {
            ...updateSection.lessons[index],
            [name]: value,
        };
        updateSections[sectionIndex] = { ...updateSection };

        errors[name] = "";
        setErrors(errors);

        setFormData({
            ...formData,
            sections: [...updateSections],
        });
    };

    const handleRemoveLesson = (index, sectionId) => {
        var newSection = { ...formData.sections[sectionId] };
        newSection.lessons.splice(index, 1);
        var newSections = [...formData.sections];

        newSections[sectionId] = newSections;
        setFormData({ ...formData, sections: newSections });
    };

    const handleAddLesson = (sectionIndex) => {
        let lesson = {
            title: "",
            description: "",
            video: "",
            linkVideo: "",
        };
        const updateSection = { ...formData.sections[sectionIndex] };
        updateSection.lessons.push(lesson);
        const updateSections = [...formData.sections];
        updateSections[sectionIndex] = updateSection;

        setFormData({
            ...formData,
            sections: [...updateSections],
        });
    };

    const handleInputSectionChange = (e, sectionIndex) => {
        const updatedSection = {
            ...formData.sections[sectionIndex],
            title: e.target.value,
            isEdited: true, // Ensure BE knows this is updated
        };
        const updatedSections = [...formData.sections];
        updatedSections[sectionIndex] = updatedSection;
    
        setFormData({ ...formData, sections: updatedSections });
    };

    const handleRemoveSection = (index) => {
        const updateSections = [...formData.sections];
        updateSections.splice(index, 1);
        setFormData({ ...formData, sections: [...updateSections] });
    };

    const debounce = (func, delay = 600) => {
        return () => {
            clearTimeout(timerId);

            timerId = setTimeout(() => {
                func();
            }, delay);
        };
    };

    const handleCreateSection = () => {
        const newSection = {
            title: "",
            lessons: [],
        };

        const newSections = [...formData.sections];
        newSections.push(newSection);
        setFormData({ ...formData, sections: [...newSections] });
    };

    const handleRemoveVideoCourse = (e) => {
        setFormData({ ...formData, video: null });
    };

    const validateForm = (formData) => {
        const errors = {};
        if (!formData.title) errors.title = "Course Name is required.";
        if (!formData.description)
            errors.description = "Description is required.";
        if (!formData.price) errors.price = "Price is required.";
        if (!formData.thumbnail) errors.thumbnail = "Thumbnail is required.";
        if (formData.categories.length === 0)
            errors.categories = "At least one category is required.";
        if (formData.section)
            formData.sections.forEach((section, sectionIndex) => {
                if (!section.title)
                    errors[`section-${sectionIndex}`] = `Section ${
                        sectionIndex + 1
                    } Name is required.`;
                section.lessons.forEach((lesson, lessonIndex) => {
                    if (!lesson.title)
                        errors[
                            `lesson-${sectionIndex}-${lessonIndex}`
                        ] = `Lesson ${
                            lessonIndex + 1
                        } Name is required in Section ${sectionIndex + 1}.`;
                    if (!lesson.description)
                        errors[
                            `lesson-desc-${sectionIndex}-${lessonIndex}`
                        ] = `Lesson ${
                            lessonIndex + 1
                        } Description is required in Section ${
                            sectionIndex + 1
                        }.`;
                });
            });

        return errors;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
    
        if (isUploading) {
            toast.error("Please wait for the file to finish uploading.");
            return;
        }
    
        const validationErrors = validateForm(formData);
        setErrors(validationErrors);
    
        if (Object.keys(validationErrors).length > 0) {
            toast.error("You need to fill in the empty fields.");
            return;
        }
    
        // Prepare and sanitize the payload
        const preparePayload = () => ({
            title: formData.title,
            description: formData.description,
            price: Number(formData.price) || 0, // Ensure price is a number
            discount: Number(formData.discount) || 0, // Ensure discount is a number
            thumbnail: formData.thumbnail,
            video: formData.video,
            categories: formData.categories.map((cate) => Number(cate.id)), // Ensure categories are numeric IDs
            instructor: formData.instructor, // Email of the instructor
            sections: formData.sections.map((section) => ({
                title: section.title,
                lessons: section.lessons.map((lesson) => ({
                    title: lesson.title,
                    description: lesson.description,
                    video: lesson.video || "", // Default to empty string
                    linkVideo: lesson.linkVideo || "", // Default to empty string
                })),
            })),
            date: formData.date || null, // Optional date field
        });
    
        const payload = preparePayload();
        console.log("Payload sent to API:", payload);
    
        try {
            await toast.promise(DataApi.createCourse(payload), {
                loading: "Creating course...",
                success: "Course created successfully!",
                error: "Failed to create course.",
            });
            setFormData(initFormData); // Reset form on success
        } catch (error) {
            console.error("Error creating course:", error);
            toast.error("Failed to create course. Please check your input.");
        }
    };
    
    
    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await DataApi.getAllCategories(0, 99999999);
                setOptions(result.content.content);
            } catch (error) {
                console.log(error.mess);
            }
        };
        fetchApi();
    }, []);

    console.log("render");
    return (
        <>
            <div className="container flex flex-col justify-center">
                <div className="wrapMainDash mr-auto">
                    <h3 className="titleMainDash">Create a new course</h3>
                    <div
                        className={clsx(
                            styles.formGroup,
                            "flex gap-6 flex-col rounded-lg"
                        )}
                    >
                        <div className={clsx(styles.formField)}>
                            <input
                                required
                                onChange={handleInputChange}
                                value={formData.title}
                                name="title"
                                data-validate
                                className={clsx(styles.formInput)}
                                type="text"
                            />
                            <label className={clsx(styles.formLabel)}>
                                Course Name
                            </label>
                            {errors.title && (
                                <div className="text-red-500 mt-1 text-sm ml-1">
                                    {errors.title}
                                </div>
                            )}
                        </div>
                        <div className={clsx(styles.formField)}>
                            <textarea
                                name="description"
                                value={formData.description}
                                onChange={handleInputChange}
                                className={clsx(styles.formInput, "h-22")}
                                type="text"
                            />
                            <label
                                className={clsx(
                                    styles.formLabel,
                                    styles.descInput
                                )}
                            >
                                Description
                            </label>
                            {errors.description && (
                                <div className="text-red-500 mt-1 text-sm ml-1">
                                    {errors.description}
                                </div>
                            )}
                        </div>
                        <div className={clsx("flex")}>
                            <div
                                className={clsx(styles.formField, "w-1/2 mr-9")}
                            >
                                <Select
                                    isMulti
                                    onChange={handleSelectChange}
                                    value={formData.categories}
                                    getOptionLabel={(x) => x.name}
                                    getOptionValue={(x) => x.id}
                                    options={options}
                                    name="categories"
                                    styles={{
                                        control: (baseStyles, state) => ({
                                            ...baseStyles,
                                            borderColor: state.isFocused
                                                ? "black"
                                                : "#e9ecee",
                                        }),
                                    }}
                                />
                                <label className={clsx(styles.formLabel)}>
                                    Category
                                </label>
                                {errors.categories && (
                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                        {errors.categories}
                                    </div>
                                )}
                            </div>
                            <div className={clsx(styles.formField, "w-1/2")}>
                                <input
                                    name="price"
                                    onChange={handleInputChange}
                                    value={formData.price}
                                    min="0"
                                    className={clsx(styles.formInput)}
                                    type="number"
                                />
                                <label className={clsx(styles.formLabel)}>
                                    Price
                                </label>
                                {errors.price && (
                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                        {errors.price}
                                    </div>
                                )}
                            </div>
                        </div>
                        <div className="flex overflow-hidden">
                            <div
                                className={clsx(
                                    styles.formField,
                                    "w-1/2 overflow-hidden"
                                )}
                            >
                                <span className={clsx(styles.formLabel2)}>
                                    Thumbnail
                                </span>
                                <label
                                    htmlFor="thumbnail"
                                    className={clsx(
                                        styles.formLabel2,
                                        styles.labelFile
                                    )}
                                >
                                    <div className={clsx(styles.iconFile)}>
                                        <img src={fileSelect} alt="" />
                                    </div>
                                </label>
                                {errors.thumbnail && (
                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                        {errors.thumbnail}
                                    </div>
                                )}
                                <input
                                    name="thumbnail"
                                    onChange={handleFileChange}
                                    id="thumbnail"
                                    type="file"
                                    hidden
                                    accept=".jpg, .jpeg, .png"
                                />
                            </div>
                            <div
                                className={clsx(
                                    styles.formField,
                                    "w-1/2 mt-8 ml-9"
                                )}
                            >
                                {formData.thumbnail && (
                                    <div className={clsx(styles.imgField)}>
                                        <img
                                            className={clsx(
                                                styles.thumbnailImg
                                            )}
                                            src={formData.thumbnail}
                                            alt=""
                                        />
                                        <button
                                            onClick={(e) =>
                                                handleRemoveItemPrevivew(e)
                                            }
                                            className={clsx(
                                                styles.btnClosePreview
                                            )}
                                        >
                                            <img src={btnClose} alt="" />
                                        </button>
                                    </div>
                                )}
                            </div>
                        </div>
                        <div className="flex  overflow-hidden">
                            <div
                                className={clsx(
                                    styles.formField,
                                    "w-1/2 overflow-hidden"
                                )}
                            >
                                <span className={clsx(styles.formLabel2)}>
                                    Video
                                </span>
                                <label
                                    htmlFor={`courseVideo`}
                                    className={clsx(
                                        styles.formLabel2,
                                        styles.labelFile,
                                        "h-full"
                                    )}
                                >
                                    <div className={clsx(styles.iconFile)}>
                                        <img src={fileSelect} alt="" />
                                    </div>
                                </label>
                                <input
                                    name="video"
                                    onChange={handleUpdateVideoCourse}
                                    id={`courseVideo`}
                                    type="file"
                                    hidden
                                    accept=".mp4"
                                />
                            </div>
                            <div
                                className={clsx(
                                    styles.formField,
                                    "w-1/2 mt-8 ml-9"
                                )}
                            >
                                {formData.video && (
                                    <div className={clsx(styles.videoField)}>
                                        <video
                                            id="video"
                                            controls
                                            className="rounded-lg"
                                        >
                                            <source
                                                src={formData.video}
                                                type="video/mp4"
                                            />
                                        </video>
                                        <button
                                            className={clsx(
                                                styles.btnClosePreview
                                            )}
                                            onClick={(e) =>
                                                handleRemoveVideoCourse(e)
                                            }
                                        >
                                            {" "}
                                            <img src={btnClose} alt="" />{" "}
                                        </button>
                                    </div>
                                )}
                            </div>
                        </div>
                        {/*NOTE Lesson */}
                        <h5 className="text-center font-semibold text-3xl mt-12">
                            Curriculum
                        </h5>

                        <div className={clsx(styles.lessonArea)}>
                            {formData.sections &&
                                formData.sections.map(
                                    (section, sectionIndex) => {
                                        const lessons = section.lessons;
                                        return (
                                            <div
                                                className={clsx(
                                                    "mt-1 flex flex-col"
                                                )}
                                                key={sectionIndex}
                                            >
                                                <div
                                                    className={clsx(
                                                        styles.sectionName,
                                                        "text-center  font-semibold"
                                                    )}
                                                >
                                                    Section {sectionIndex + 1}
                                                </div>
                                                <div
                                                    className="justify-end px-3 py-1.5 text-sm cursor-pointer font-medium text-center text-white bg-black rounded-lg max-md:max-w-1/5 w-1/5 self-end"
                                                    onClick={() => {
                                                        handleRemoveSection(
                                                            sectionIndex
                                                        );
                                                    }}
                                                >
                                                    {" "}
                                                    Remove section
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.formField,
                                                        "mt-4"
                                                    )}
                                                >
                                                    <input
                                                        data-section="1"
                                                        name={`title`}
                                                        onChange={(e) => {
                                                            handleInputSectionChange(
                                                                e,
                                                                sectionIndex
                                                            );
                                                        }}
                                                        value={section.title}
                                                        className={clsx(
                                                            styles.formInput
                                                        )}
                                                        type="text"
                                                    />
                                                    <label
                                                        className={clsx(
                                                            styles.formLabel
                                                        )}
                                                    >
                                                        Section Name
                                                    </label>
                                                </div>
                                                {lessons &&
                                                    lessons.map(
                                                        (lesson, index) => {
                                                            return (
                                                                <div
                                                                    key={index}
                                                                    className={clsx(
                                                                        styles.lessonField,
                                                                        "gap-6 flex flex-col mt-4"
                                                                    )}
                                                                >
                                                                    <div
                                                                        className={clsx(
                                                                            styles.formField,
                                                                            "flex justify-between"
                                                                        )}
                                                                    >
                                                                        <div className="self-center  font-semibold">
                                                                            Lesson{" "}
                                                                            {index +
                                                                                1}
                                                                        </div>

                                                                        <div
                                                                            className="justify-center px-3 py-1.5 text-sm cursor-pointer font-medium text-center text-white bg-black rounded-lg max-md:max-w-1/5 w-1/5 self-center"
                                                                            onClick={() => {
                                                                                handleRemoveLesson(
                                                                                    index,
                                                                                    sectionIndex
                                                                                );
                                                                            }}
                                                                        >
                                                                            {" "}
                                                                            Remove
                                                                            lesson
                                                                        </div>
                                                                    </div>
                                                                    <div
                                                                        className={clsx(
                                                                            styles.formField
                                                                        )}
                                                                    >
                                                                        <input
                                                                            data-section="1"
                                                                            name={`title`}
                                                                            onChange={(
                                                                                e
                                                                            ) => {
                                                                                handleInputLessonChange(
                                                                                    e,
                                                                                    index,
                                                                                    sectionIndex
                                                                                );
                                                                            }}
                                                                            value={
                                                                                lesson.title
                                                                            }
                                                                            className={clsx(
                                                                                styles.formInput
                                                                            )}
                                                                            type="text"
                                                                        />
                                                                        <label
                                                                            className={clsx(
                                                                                styles.formLabel
                                                                            )}
                                                                        >
                                                                            Lesson
                                                                            Name
                                                                        </label>
                                                                    </div>
                                                                    <div
                                                                        className={clsx(
                                                                            styles.formField
                                                                        )}
                                                                    >
                                                                        <textarea
                                                                            name="description"
                                                                            value={
                                                                                lesson.description
                                                                            }
                                                                            onChange={(
                                                                                e
                                                                            ) => {
                                                                                handleInputLessonChange(
                                                                                    e,
                                                                                    index,
                                                                                    sectionIndex
                                                                                );
                                                                            }}
                                                                            className={clsx(
                                                                                styles.formInput,
                                                                                "h-22"
                                                                            )}
                                                                            type="text"
                                                                        />
                                                                        <label
                                                                            className={clsx(
                                                                                styles.formLabel,
                                                                                styles.descInput
                                                                            )}
                                                                        >
                                                                            Description
                                                                        </label>
                                                                    </div>
                                                                    <div className="flex">
                                                                        <div
                                                                            className={clsx(
                                                                                styles.formField,
                                                                                "w-1/2"
                                                                            )}
                                                                        >
                                                                            <span
                                                                                className={clsx(
                                                                                    styles.formLabel2
                                                                                )}
                                                                            >
                                                                                Video
                                                                            </span>
                                                                            <label
                                                                                htmlFor={`video${section.title}${index}`}
                                                                                className={clsx(
                                                                                    styles.formLabel2,
                                                                                    styles.labelFile
                                                                                )}
                                                                            >
                                                                                <div
                                                                                    className={clsx(
                                                                                        styles.iconFile
                                                                                    )}
                                                                                >
                                                                                    <img
                                                                                        src={
                                                                                            fileSelect
                                                                                        }
                                                                                        alt=""
                                                                                    />
                                                                                </div>
                                                                            </label>
                                                                            <input
                                                                                name="video"
                                                                                onChange={(
                                                                                    e
                                                                                ) => {
                                                                                    handleFileChange(
                                                                                        e,
                                                                                        index,
                                                                                        sectionIndex
                                                                                    );
                                                                                }}
                                                                                id={`video${section.title}${index}`}
                                                                                type="file"
                                                                                hidden
                                                                                accept=".mp4"
                                                                            />
                                                                        </div>
                                                                        <div
                                                                            className={clsx(
                                                                                styles.formField,
                                                                                "w-1/2 mt-8 ml-9"
                                                                            )}
                                                                        >
                                                                            {lesson.video && (
                                                                                <div
                                                                                    className={clsx(
                                                                                        styles.videoField
                                                                                    )}
                                                                                >
                                                                                    <video
                                                                                        id="video"
                                                                                        controls
                                                                                        className="rounded-lg"
                                                                                    >
                                                                                        <source
                                                                                            src={
                                                                                                lesson.video
                                                                                            }
                                                                                            type="video/mp4"
                                                                                        />
                                                                                    </video>
                                                                                    <button
                                                                                        className={clsx(
                                                                                            styles.btnClosePreview
                                                                                        )}
                                                                                        onClick={(
                                                                                            e
                                                                                        ) =>
                                                                                            handleRemoveItemPrevivew(
                                                                                                e,
                                                                                                "video",
                                                                                                index,
                                                                                                sectionIndex
                                                                                            )
                                                                                        }
                                                                                    >
                                                                                        {" "}
                                                                                        <img
                                                                                            src={
                                                                                                btnClose
                                                                                            }
                                                                                            alt=""
                                                                                        />{" "}
                                                                                    </button>
                                                                                </div>
                                                                            )}
                                                                        </div>
                                                                    </div>
                                                                    <div
                                                                        className={clsx(
                                                                            styles.formField
                                                                        )}
                                                                    >
                                                                        <input
                                                                            name="linkVideo"
                                                                            value={
                                                                                lesson.linkVideo
                                                                            }
                                                                            onChange={(
                                                                                e
                                                                            ) => {
                                                                                handleInputLessonChange(
                                                                                    e,
                                                                                    index,
                                                                                    sectionIndex
                                                                                );
                                                                            }}
                                                                            className={clsx(
                                                                                styles.formInput
                                                                            )}
                                                                            type="text"
                                                                        />
                                                                        <label
                                                                            className={clsx(
                                                                                styles.formLabel
                                                                            )}
                                                                        >
                                                                            Link
                                                                            Video
                                                                        </label>
                                                                    </div>

                                                                    {/* <div
                                                                        className={clsx(
                                                                            styles.formField
                                                                        )}
                                                                    >
                                                                        <input
                                                                            name="duration"
                                                                            value={
                                                                                lesson.duration
                                                                            }
                                                                            onChange={(
                                                                                e
                                                                            ) => {
                                                                                handleInputLessonChange(
                                                                                    e,
                                                                                    index,
                                                                                    sectionIndex
                                                                                );
                                                                            }}
                                                                            className={clsx(
                                                                                styles.formInput
                                                                            )}
                                                                            type="time"
                                                                        />
                                                                        <label
                                                                            className={clsx(
                                                                                styles.formLabel
                                                                            )}
                                                                        >
                                                                            Duration
                                                                        </label>
                                                                    </div> */}
                                                                </div>
                                                            );
                                                        }
                                                    )}
                                                <button
                                                    type="submit"
                                                    className="justify-start px-1 py-2 mt-4 text-sm font-medium text-center text-white bg-black rounded-lg max-md:max-w-1/5 w-1/5 self-start"
                                                    onClick={() =>
                                                        handleAddLesson(
                                                            sectionIndex
                                                        )
                                                    }
                                                >
                                                    Add Lesson
                                                </button>
                                            </div>
                                        );
                                    }
                                )}
                        </div>
                        <button
                            type="submit"
                            className="justify-center px-5 py-2.5 mt-5 text-sm font-medium text-center text-white bg-black rounded-lg max-md:max-w-1/3 w-1/3 self-center"
                            onClick={handleCreateSection}
                        >
                            Create Section
                        </button>

                        <button
                            type="submit"
                            className="justify-center px-5 py-3.5 mt-5 text-sm font-medium text-center text-white bg-black rounded-lg max-md:max-w-full w-full"
                            onClick={handleSubmit}
                        >
                            Create Course
                        </button>
                    </div>
                </div>
            </div>
        </>
    );
}

export default CreateCourse;

================
File: src/pages/admin/Course/detail/index.js
================
import React, { useEffect, useState } from "react"; // This imports the useState hook
import styles from "../../../course/detail/DetailCourse.module.scss";
import { Link, useParams } from "react-router-dom";
import clsx from "clsx";
import * as dataApi from "../../../../api/apiService/dataService.js";
import logoPage from "../../../../assets/images/logo.png";
import { useSelector } from "react-redux";
import Comment from "../../../../component/comment/index.js";

const CourseHero = ({ video = "", thumbnail }) => {
    if (!video.startsWith("https://res.cloudinary.com")) {
        var parts = video.split("/");
        var videoId = parts[parts.length - 1].split("?")[0];
        videoId = `https://www.youtube.com/embed/${videoId}`;
    }

    return (
        <section className={clsx(styles.courseHero)}>
            {video.startsWith("https://res.cloudinary.com") && video !== "" && (
                <video
                    key={video}
                    controls
                    className={clsx(
                        styles.videoPlayer,
                        "cursor-pointer h-full w-full object-contain bg-black"
                    )}
                >
                    <source src={video} type="video/mp4" />
                </video>
            )}
            {!video.startsWith("https://res.cloudinary.com") &&
                video !== "" && (
                    <iframe
                        title="Video"
                        src={videoId}
                        frameBorder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowFullScreen
                        className={clsx(styles.videoPlayer, "rounded-lg")}
                    ></iframe>
                )}
            {video === "" ? <img src={thumbnail} alt="Course thumbnail" /> : ""}
        </section>
    );
};

const initFormData = {
    title: "",
    desc: "",
    price: "",
    thumbnail: "",
    date: "",
    categories: [],
    sections: [],
};
const CurriculumItem = ({
    active,
    section,
    aliasEmail,
    sectionId,
    courseId,
    isHighlighted,
    currentProgress,
    handleVideoSelect,
    setCurrentProgress,
}) => {
    const handleOpenSubLesson = (e) => {
        const sub = document.getElementById(`section${sectionId}`);
        sub.classList.toggle("disabled");
        e.currentTarget.classList.toggle(styles.active);
    };

    return (
        <div className={clsx(styles.curriculumItem, {})}>
            <div
                className={clsx(
                    styles.title,
                    "flex cursor-pointer p-2 w-full",
                    {
                        [styles.active]: active === 0,
                    }
                )}
                onClick={(e) => handleOpenSubLesson(e)}
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 16 16"
                    fill="currentColor"
                    className={clsx(styles.transfrom, "w-6 h-6 mt-1.5")}
                >
                    <path
                        fillRule="evenodd"
                        d="M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06Z"
                        clipRule="evenodd"
                    />
                </svg>
                <div
                    className={clsx(
                        styles.curriculumItemTitle,
                        "flex w-full justify-between"
                    )}
                >
                    <div className="w-3/4 line-clamp-2 flex-1">
                        {section.title}
                    </div>
                </div>
            </div>

            <div
                id={`section${sectionId}`}
                className={clsx(styles.wrapLesson, "w-full ", {
                    disabled: active !== 0,
                })}
            >
                {section.lessons &&
                    section.lessons.map((lesson, ind) => {
                        return (
                            <div
                                key={ind}
                                onClick={() => handleVideoSelect(lesson)}
                                className={clsx(
                                    styles.lessonItem,

                                    "flex items-center ml-6 gap-3.5",
                                    {
                                        [styles.highlighted]:
                                            lesson.id === isHighlighted,
                                    }
                                )}
                            >
                                <div className="checkbox-wrapper ml-3"></div>
                                <span>{lesson.title}</span>
                            </div>
                        );
                    })}
            </div>
        </div>
    );
};
function AdminDetailCourse() {
    const userInfo = useSelector((state) => state.login.user);
    const alias = userInfo.email.split("@")[0];
    const [currentVideoUrl, setCurrentVideoUrl] = useState("");
    const [lessonSelected, setLessonSelected] = useState({
        id: "",
    });
    const [currentProgress, setCurrentProgress] = useState([]);
    const [course, setCourse] = useState(initFormData);
    const [openModal, setOpenModal] = useState(false);
    const { id } = useParams();

    const handleCloseComment = () => {
        setOpenModal(false);
    };

    const handleOpenComment = () => {
        setOpenModal(true);
    };

    const handleVideoSelect = (lesson) => {
        if (lesson.video !== "" && lesson.linkVideo === "") {
            setCurrentVideoUrl(lesson.video);
        } else {
            setCurrentVideoUrl(lesson.linkVideo);
        }
        setLessonSelected(lesson);
    };

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const data = await dataApi.getCourseById(id);
                const course = data.content;
                const lessonFirst = course.sections[0]?.lessons[0];
                const video = lessonFirst?.video;
                const linkVideo = lessonFirst?.linkVideo;
                setLessonSelected(lessonFirst);
                setCourse(course);
                setCurrentVideoUrl(video ? video : linkVideo);
            } catch (error) {
                console.log(error);
            }
        };

        fetchApi();
        if (window.location.pathname.includes("openComment")) {
            setOpenModal(true);
        }
    }, [id, alias]);

    return (
        <div className={clsx(styles.wrapperPage)}>
            <div
                className={clsx(
                    styles.headerPage,
                    "flex items-center justify-between b-shadow"
                )}
            >
                <Link to={"/"} className={clsx(styles.logoPage)}>
                    <img src={logoPage} alt="" />
                </Link>
                <h5 className="mb-0 text-center">{course.title}</h5>
            </div>
            <main className={clsx(styles.uiUxCourse)}>
                <div className={clsx(styles.sectionVideo, "w-full")}>
                    <div className={clsx("row")}>
                        <div
                            className={clsx(styles.videoContainer, "col-lg-9")}
                        >
                            <CourseHero
                                video={currentVideoUrl}
                                thumbnail={course.thumbnail}
                            />

                            {/* //!------------ NOTE ----------------*/}
                            <button
                                className={clsx(
                                    styles.sectionComment,
                                    "btnLGBT"
                                )}
                                onClick={handleOpenComment}
                            >
                                <div className="flex gap-2">
                                    Discussion
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        strokeWidth={1.5}
                                        stroke="currentColor"
                                        className="w-5 h-5"
                                    >
                                        <path
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            d="M2.25 12.76c0 1.6 1.123 2.994 2.707 3.227 1.068.157 2.148.279 3.238.364.466.037.893.281 1.153.671L12 21l2.652-3.978c.26-.39.687-.634 1.153-.67 1.09-.086 2.17-.208 3.238-.365 1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z"
                                        />
                                    </svg>
                                </div>
                            </button>

                            <div
                                className={clsx(styles.sectionComment)}
                                onClick={handleOpenComment}
                            ></div>
                            {/* //!------------ NOTE ----------------*/}
                        </div>
                        <div
                            className={clsx(
                                styles.courseSectionsContainer,
                                "col-lg-3"
                            )}
                        >
                            <section className={styles.courseSection}>
                                <div className={clsx(styles.sectionHeader)}>
                                    <div className={styles.sectionNumber}>
                                        Curriculum
                                    </div>
                                </div>
                                <div className={styles.courseCurriculum}>
                                    {course.sections &&
                                        course.sections.map(
                                            (section, index) => (
                                                <CurriculumItem
                                                    active={index}
                                                    setCurrentProgress={
                                                        setCurrentProgress
                                                    }
                                                    courseId={id}
                                                    currentProgress={
                                                        currentProgress
                                                    }
                                                    aliasEmail={alias}
                                                    isHighlighted={
                                                        lessonSelected?.id
                                                    }
                                                    handleVideoSelect={
                                                        handleVideoSelect
                                                    }
                                                    sectionId={index}
                                                    key={index}
                                                    section={section}
                                                />
                                            )
                                        )}
                                </div>
                            </section>
                        </div>
                    </div>
                </div>
                {openModal && (
                    <Comment
                        courseId={id}
                        lessonId={lessonSelected.id}
                        openModal={openModal}
                        funcCloseModal={handleCloseComment}
                    ></Comment>
                )}
            </main>
        </div>
    );
}

export default AdminDetailCourse;

================
File: src/pages/admin/Course/edit/index.js
================
import "bootstrap/dist/css/bootstrap.min.css";
import clsx from "clsx";
import styles from "../create/CreateCourse.module.scss";
import fileSelect from "../../../../assets/images/fileSelect.svg";
import { useEffect, useState } from "react";
import Select from "react-select";
import * as DataApi from "../../../../api/apiService/dataService";
import { toast } from "sonner";
import btnClose from "../../../../assets/images/btnClose.svg";
import { useParams } from "react-router-dom";
import makeAnimated from "react-select/animated";
import validateForm from "../../../../component/validation";
const animatedComponents = makeAnimated();

const initFormData = {
    id: "",
    title: "",
    description: "",
    price: "",
    thumbnail: "",
    video: "",
    date: "",
    sections: [],
    categories: [],
};

function EditCourse() {
    const [formData, setFormData] = useState(initFormData);
    const [options, setOptions] = useState([]);
    const [errors, setErrors] = useState({});
    const [isLoading, setIsLoading] = useState(false);
    const { id } = useParams();

    let timerId;

    //!NOTE: ============================START HANDLE ===================================

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData({
            ...formData,
            [name]: value,
        });
        errors[name] = "";
        setErrors(errors);
    };

    const handleFileChange = (e, index, indexSection) => {
        const file = e.target.files[0];
        setIsLoading((prev) => true);
        toast.promise(DataApi.uploadImg(file), {
            loading: "Loading file...",
            success: (result) => {
                setIsLoading((prev) => false);
                if (file.type === "video/mp4") {
                    const updateSection = {
                        ...formData.sections[indexSection],
                    };
                    updateSection.lessons[index] = {
                        ...updateSection.lessons[index],
                        video: result.content,
                    };
                    const updateSections = [...formData.sections];
                    updateSections[indexSection] = updateSection;

                    setFormData({
                        ...formData,
                        sections: [...updateSections],
                    });
                } else {
                    setFormData({
                        ...formData,
                        thumbnail: result.content,
                    });
                }
                return "Uploading successfully...";
            },
            error: (error) => {
                console.log(error);
                return "Upload file failed";
            },
        });
        e.target.value = "";
        errors[e.target.name] = "";
        setErrors(errors);
    };

    const handleUpdateVideoCourse = (e) => {
        setIsLoading((prev) => true);
        toast.promise(DataApi.uploadImg(e.target.files[0]), {
            loading: "Loading video...",
            success: (result) => {
                setIsLoading((prev) => false);

                setFormData({ ...formData, video: result.content });
                return "Upload video successfully";
            },
            error: (error) => {
                console.log(error);
                return "Upload video failed";
            },
        });
    };

    const handleSelectChange = (e) => {
        setFormData({
            ...formData,
            categories: [...e],
            isEditedCategories: 1,
        });
    };

    const handleRemoveItemPrevivew = (e, type, index, sectionIndex) => {
        if (type === "video") {
            const updateSection = { ...formData.sections[sectionIndex] };
            updateSection.lessons[index] = {
                ...updateSection.lessons[index],
                video: null,
                actionVideo: "NONE",
            };
            const updateSections = [...formData.sections];
            updateSections[sectionIndex] = { ...updateSection };
            setFormData({ ...formData, sections: [...updateSections] });
        } else setFormData({ ...formData, thumbnail: "" });
        e.target.value = "";
    };

    const handleAddLesson = (sectionIndex) => {
        let lesson = {
            title: "",
            description: "",
            video: "",
            linkVideo: "",
        };
        const updateSection = { ...formData.sections[sectionIndex] };
        updateSection.lessons.push(lesson);
        const updateSections = [...formData.sections];
        updateSections[sectionIndex] = updateSection;

        setFormData({
            ...formData,
            sections: [...updateSections],
        });
    };

    const handleInputLessonChange = (e, index, sectionIndex) => {
        const { name, value } = e.target;
        let updateSection = {
            ...formData.sections[sectionIndex],
        };
        updateSection = {
            ...updateSection,
            isEdited: 1,
        };
        const updateSections = [...formData.sections];
        updateSection.lessons[index] = {
            ...updateSection.lessons[index],
            [name]: value,
        };
        updateSections[sectionIndex] = { ...updateSection };

        errors[name] = "";
        setErrors(errors);

        setFormData({
            ...formData,
            sections: [...updateSections],
        });
    };

    const handleCreateSection = () => {
        const newSection = {
            title: "",
            lessons: [],
        };

        const newSections = [...formData.sections];
        newSections.push(newSection);
        setFormData({ ...formData, sections: [...newSections] });
    };

    const handleInputSectionChange = (e, sectionIndex) => {
        let updateSection = formData.sections[sectionIndex];
        updateSection = {
            ...updateSection,
            title: e.target.value,
            isEdited: 1,
        };
        const updateSections = [...formData.sections];
        updateSections[sectionIndex] = updateSection;
        setFormData({ ...formData, sections: [...updateSections] });
    };

    const handleRemoveSection = (index) => {
        const updateSections = [...formData.sections];
        updateSections.splice(index, 1);
        setFormData({
            ...formData,
            sections: updateSections,
        });
    };

    const handleRemoveLesson = (index, sectionId) => {
        var newSection = { ...formData.sections[sectionId] };
        var newSections = [...formData.sections];

        newSections[sectionId].lesson = newSection.lessons.splice(index, 1);
        setFormData({ ...formData, sections: newSections });
    };
    const handleRemoveVideoCourse = (e) => {
        setFormData({ ...formData, video: "" });
    };

    //!NOTE: ========================END HANDLE ====================================

    function isURL(str) {
        const urlPattern = new RegExp(
            "^(https?:\\/\\/)?" + // protocol
                "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // domain name
                "((\\d{1,3}\\.){3}\\d{1,3}))" + // OR ip (v4) address
                "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + // port and path
                "(\\?[;&a-z\\d%_.~+=-]*)?" + // query string
                "(\\#[-a-z\\d_]*)?$",
            "i"
        ); // fragment locator
        return urlPattern.test(str);
    }

    //!======================================NOTE SUBMIT ========================
    const handleSubmit = (e) => {
        e.preventDefault();
        if (isLoading) return toast.error("Please wait for the file to upload");
        const validationErrors = validateForm(formData);
        setErrors(validationErrors);

        if (Object.keys(validationErrors).length > 0) {
            toast.error("You need to fill in the empty field");
            return;
        }

        const featchApi = async () => {
            let newCategories = [];
            formData.categories.forEach((cate) => newCategories.push(cate.id));
            const newCourse = {
                ...formData,
                categories: newCategories,
            };

            toast.promise(DataApi.updateCourse(id, newCourse), {
                loading: "Loading...",
                success: (result) => {
                    return "Update successfully";
                },
                error: (error) => {
                    console.log(error);
                    return error;
                },
            });
        };

        const debounceApi = debounce(featchApi);
        debounceApi();
    };

    const debounce = (func, delay = 600) => {
        return () => {
            clearTimeout(timerId);

            timerId = setTimeout(() => {
                func();
            }, delay);
        };
    };

    //!NOTE========================== USEFFECT ====================================
    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await DataApi.getAllCategories();
                setOptions(result.content.content);
                const data = await DataApi.getCourseById(id);
                setFormData(data.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, [id]);

    return (
        <div className="flex justify-center w-full ">
            <div className="wrapMainDash mr-auto w-3/4 ">
                <h3 className="titleMainDash">Edit</h3>
                <div
                    className={clsx(
                        styles.formGroup,
                        "flex gap-6 flex-col rounded-lg"
                    )}
                >
                    <div className={clsx(styles.formField)}>
                        <input
                            onChange={handleInputChange}
                            value={formData.title}
                            name="title"
                            className={clsx(styles.formInput)}
                            type="text"
                        />
                        <label className={clsx(styles.formLabel)}>
                            Course Name
                        </label>
                        {errors.title && (
                            <div className="text-red-500 mt-1 text-sm ml-1">
                                {errors.title}
                            </div>
                        )}
                    </div>
                    <div className={clsx(styles.formField)}>
                        <textarea
                            name="description"
                            value={formData.description}
                            onChange={handleInputChange}
                            className={clsx(styles.formInput, "h-22")}
                            type="text"
                        />
                        <label
                            className={clsx(styles.formLabel, styles.descInput)}
                        >
                            Description
                        </label>
                        {errors.description && (
                            <div className="text-red-500 mt-1 text-sm ml-1">
                                {errors.description}
                            </div>
                        )}
                    </div>
                    <div className={clsx("flex")}>
                        <div className={clsx(styles.formField, "w-1/2 mr-9")}>
                            <Select
                                isMulti
                                components={animatedComponents}
                                onChange={handleSelectChange}
                                getOptionLabel={(x) => x.name}
                                getOptionValue={(x) => x.id}
                                value={formData.categories}
                                options={options}
                                styles={{
                                    control: (baseStyles, state) => ({
                                        ...baseStyles,
                                        borderColor: state.isFocused
                                            ? "black"
                                            : "#e9ecee",
                                    }),
                                }}
                            />
                            <label className={clsx(styles.formLabel)}>
                                Category
                            </label>
                            {errors.categories && (
                                <div className="text-red-500 mt-1 text-sm ml-1">
                                    {errors.categories}
                                </div>
                            )}
                        </div>
                        <div className={clsx(styles.formField, "w-1/2")}>
                            <input
                                name="price"
                                onChange={handleInputChange}
                                value={formData.price}
                                min="0"
                                className={clsx(styles.formInput)}
                                type="number"
                            />
                            <label className={clsx(styles.formLabel)}>
                                Price
                            </label>
                            {errors.price && (
                                <div className="text-red-500 mt-1 text-sm ml-1">
                                    {errors.price}
                                </div>
                            )}
                        </div>
                    </div>

                    <div className="flex">
                        <div
                            className={clsx(
                                styles.formField,
                                "w-1/2 overflow-hidden"
                            )}
                        >
                            <span className={clsx(styles.formLabel2)}>
                                Thumbnail
                            </span>
                            <label
                                htmlFor="thumbnail"
                                className={clsx(
                                    styles.formLabel2,
                                    styles.labelFile
                                )}
                            >
                                <div className={clsx(styles.iconFile)}>
                                    <img
                                        loading="lazy"
                                        src={fileSelect}
                                        alt=""
                                    />
                                </div>
                            </label>

                            <input
                                name="thumbnail"
                                onChange={handleFileChange}
                                id="thumbnail"
                                type="file"
                                hidden
                            />
                        </div>
                        <div
                            className={clsx(
                                styles.formField,
                                "w-1/2 mt-8 ml-9"
                            )}
                        >
                            {formData.thumbnail && (
                                <div className={clsx(styles.imgField)}>
                                    <img
                                        loading="lazy"
                                        className={clsx(styles.thumbnailImg)}
                                        src={formData.thumbnail}
                                        alt=""
                                    />
                                    <button
                                        onClick={(e) =>
                                            handleRemoveItemPrevivew(e)
                                        }
                                        className={clsx(styles.btnClosePreview)}
                                    >
                                        {" "}
                                        <img
                                            loading="lazy"
                                            src={btnClose}
                                            alt=""
                                        />{" "}
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>

                    <div className="flex">
                        <div
                            className={clsx(
                                styles.formField,
                                "w-1/2 overflow-hidden"
                            )}
                        >
                            <span className={clsx(styles.formLabel2)}>
                                Video
                            </span>
                            <label
                                htmlFor={`courseVideo`}
                                className={clsx(
                                    styles.formLabel2,
                                    styles.labelFile,
                                    "h-full"
                                )}
                            >
                                <div className={clsx(styles.iconFile)}>
                                    <img
                                        loading="lazy"
                                        src={fileSelect}
                                        alt=""
                                    />
                                </div>
                            </label>
                            <input
                                name="video"
                                onChange={handleUpdateVideoCourse}
                                id={`courseVideo`}
                                type="file"
                                hidden
                                accept=".mp4"
                            />
                        </div>
                        <div
                            className={clsx(
                                styles.formField,
                                "w-1/2 mt-8 ml-9"
                            )}
                        >
                            {formData.video && (
                                <div className={clsx(styles.videoField)}>
                                    <video
                                        key={formData.video}
                                        controls
                                        className="rounded-lg"
                                    >
                                        <source
                                            src={formData.video}
                                            type="video/mp4"
                                        />
                                    </video>
                                    <button
                                        className={clsx(styles.btnClosePreview)}
                                        onClick={(e) =>
                                            handleRemoveVideoCourse(e)
                                        }
                                    >
                                        {" "}
                                        <img
                                            loading="lazy"
                                            src={btnClose}
                                            alt=""
                                        />{" "}
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>

                    {/*NOTE Lesson */}

                    <div className={clsx(styles.lessonArea)}>
                        {formData.sections &&
                            formData.sections.map((section, sectionIndex) => {
                                const lessons = section.lessons;
                                return (
                                    <div
                                        className={clsx("mt-1 flex flex-col")}
                                        key={sectionIndex}
                                    >
                                        <div
                                            className={clsx(
                                                styles.sectionName,
                                                "text-center  font-semibold"
                                            )}
                                        >
                                            Section {sectionIndex + 1}
                                        </div>
                                        <div
                                            className="justify-end px-3 py-1.5 text-sm cursor-pointer font-medium text-center text-white bg-black rounded-lg max-md:max-w-1/5 w-1/5 self-end"
                                            onClick={() => {
                                                handleRemoveSection(
                                                    sectionIndex
                                                );
                                            }}
                                        >
                                            {" "}
                                            Remove section
                                        </div>
                                        <div
                                            className={clsx(
                                                styles.formField,
                                                "mt-4"
                                            )}
                                        >
                                            <input
                                                data-section="1"
                                                name={`title`}
                                                onChange={(e) => {
                                                    handleInputSectionChange(
                                                        e,
                                                        sectionIndex
                                                    );
                                                }}
                                                value={section.title}
                                                className={clsx(
                                                    styles.formInput
                                                )}
                                                type="text"
                                            />
                                            <label
                                                className={clsx(
                                                    styles.formLabel
                                                )}
                                            >
                                                Section Name
                                            </label>
                                            {errors[
                                                `section-${sectionIndex}`
                                            ] && (
                                                <div className="text-red-500 mt-1 text-sm ml-1">
                                                    {
                                                        errors[
                                                            `section-${sectionIndex}`
                                                        ]
                                                    }
                                                </div>
                                            )}
                                        </div>
                                        {lessons &&
                                            lessons.map((lesson, index) => {
                                                return (
                                                    <div
                                                        key={index}
                                                        className={clsx(
                                                            styles.lessonField,
                                                            "gap-6 flex flex-col mt-4"
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                styles.formField,
                                                                "flex justify-between"
                                                            )}
                                                        >
                                                            <div className="self-center  font-semibold">
                                                                Lesson{" "}
                                                                {index + 1}
                                                            </div>

                                                            <div
                                                                className="justify-center px-3 py-1.5 text-sm cursor-pointer font-medium text-center text-white bg-black rounded-lg max-md:max-w-1/5 w-1/5 self-center"
                                                                onClick={() => {
                                                                    handleRemoveLesson(
                                                                        index,
                                                                        sectionIndex
                                                                    );
                                                                }}
                                                            >
                                                                {" "}
                                                                Remove lesson
                                                            </div>
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                styles.formField
                                                            )}
                                                        >
                                                            <input
                                                                data-section="1"
                                                                name={`title`}
                                                                onChange={(
                                                                    e
                                                                ) => {
                                                                    handleInputLessonChange(
                                                                        e,
                                                                        index,
                                                                        sectionIndex
                                                                    );
                                                                }}
                                                                value={
                                                                    lesson.title
                                                                }
                                                                className={clsx(
                                                                    styles.formInput
                                                                )}
                                                                type="text"
                                                            />
                                                            <label
                                                                className={clsx(
                                                                    styles.formLabel
                                                                )}
                                                            >
                                                                Lesson Name
                                                            </label>
                                                            {errors[
                                                                `lesson-${sectionIndex}-${index}`
                                                            ] && (
                                                                <div className="text-red-500 mt-1 text-sm ml-1">
                                                                    {
                                                                        errors[
                                                                            `lesson-${sectionIndex}-${index}`
                                                                        ]
                                                                    }
                                                                </div>
                                                            )}
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                styles.formField
                                                            )}
                                                        >
                                                            <textarea
                                                                name="description"
                                                                value={
                                                                    lesson.description
                                                                }
                                                                onChange={(
                                                                    e
                                                                ) => {
                                                                    handleInputLessonChange(
                                                                        e,
                                                                        index,
                                                                        sectionIndex
                                                                    );
                                                                }}
                                                                className={clsx(
                                                                    styles.formInput,
                                                                    "h-22"
                                                                )}
                                                                type="text"
                                                            />
                                                            <label
                                                                className={clsx(
                                                                    styles.formLabel,
                                                                    styles.descInput
                                                                )}
                                                            >
                                                                Description
                                                            </label>
                                                            {errors[
                                                                `lesson-desc-${sectionIndex}-${index}`
                                                            ] && (
                                                                <div className="text-red-500 mt-1 text-sm ml-1">
                                                                    {
                                                                        errors[
                                                                            `lesson-desc-${sectionIndex}-${index}`
                                                                        ]
                                                                    }
                                                                </div>
                                                            )}
                                                        </div>
                                                        <div className="flex">
                                                            <div
                                                                className={clsx(
                                                                    styles.formField,
                                                                    "w-1/2"
                                                                )}
                                                            >
                                                                <span
                                                                    className={clsx(
                                                                        styles.formLabel2
                                                                    )}
                                                                >
                                                                    Video
                                                                </span>
                                                                <label
                                                                    htmlFor={`video${section.title}${index}`}
                                                                    className={clsx(
                                                                        styles.formLabel2,
                                                                        styles.labelFile
                                                                    )}
                                                                >
                                                                    <div
                                                                        className={clsx(
                                                                            styles.iconFile
                                                                        )}
                                                                    >
                                                                        <img
                                                                            loading="lazy"
                                                                            src={
                                                                                fileSelect
                                                                            }
                                                                            alt=""
                                                                        />
                                                                    </div>
                                                                </label>
                                                                <input
                                                                    name="video"
                                                                    accept=".mp4"
                                                                    onChange={(
                                                                        e
                                                                    ) =>
                                                                        handleFileChange(
                                                                            e,
                                                                            index,
                                                                            sectionIndex
                                                                        )
                                                                    }
                                                                    id={`video${section.title}${index}`}
                                                                    type="file"
                                                                    hidden
                                                                />
                                                            </div>
                                                            <div
                                                                className={clsx(
                                                                    styles.formField,
                                                                    "w-1/2 mt-8 ml-9"
                                                                )}
                                                            >
                                                                {lesson.video && (
                                                                    <div
                                                                        className={clsx(
                                                                            styles.videoField
                                                                        )}
                                                                    >
                                                                        <video
                                                                            key={
                                                                                lesson.video
                                                                            }
                                                                            controls
                                                                            className="rounded-lg"
                                                                        >
                                                                            <source
                                                                                src={
                                                                                    lesson.video
                                                                                }
                                                                                type="video/mp4"
                                                                            />
                                                                        </video>
                                                                        <button
                                                                            className={clsx(
                                                                                styles.btnClosePreview
                                                                            )}
                                                                            onClick={(
                                                                                e
                                                                            ) =>
                                                                                handleRemoveItemPrevivew(
                                                                                    e,
                                                                                    "video",
                                                                                    index,
                                                                                    sectionIndex
                                                                                )
                                                                            }
                                                                        >
                                                                            {" "}
                                                                            <img
                                                                                loading="lazy"
                                                                                src={
                                                                                    btnClose
                                                                                }
                                                                                alt=""
                                                                            />{" "}
                                                                        </button>
                                                                    </div>
                                                                )}
                                                            </div>
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                styles.formField
                                                            )}
                                                        >
                                                            <input
                                                                name="linkVideo"
                                                                value={
                                                                    lesson.linkVideo
                                                                }
                                                                onChange={(
                                                                    e
                                                                ) => {
                                                                    handleInputLessonChange(
                                                                        e,
                                                                        index,
                                                                        sectionIndex
                                                                    );
                                                                }}
                                                                className={clsx(
                                                                    styles.formInput
                                                                )}
                                                                type="text"
                                                            />
                                                            <label
                                                                className={clsx(
                                                                    styles.formLabel
                                                                )}
                                                            >
                                                                Link Video
                                                            </label>
                                                        </div>
                                                    </div>
                                                );
                                            })}
                                        <button
                                            type="submit"
                                            className="justify-start px-1 py-2 mt-4 text-sm font-medium text-center text-white bg-black rounded-lg max-md:max-w-1/5 w-1/5 self-start"
                                            onClick={() =>
                                                handleAddLesson(sectionIndex)
                                            }
                                        >
                                            Add Lesson
                                        </button>
                                    </div>
                                );
                            })}
                    </div>
                    <button
                        type="submit"
                        className="justify-center px-5 py-2.5 mt-5 text-sm font-medium text-center text-white bg-black rounded-lg max-md:max-w-1/3 w-1/3 self-center"
                        onClick={handleCreateSection}
                    >
                        Create Section
                    </button>
                    <button
                        type="submit"
                        className="justify-center px-5 py-3.5 mt-5 text-sm font-medium text-center text-white bg-black rounded-lg max-md:max-w-full w-full"
                        onClick={handleSubmit}
                    >
                        Update Course
                    </button>
                </div>
            </div>
        </div>
    );
}

export default EditCourse;

================
File: src/pages/admin/Course/historyDeleted/index.js
================
import styles from "../list/List.module.scss";
import clsx from "clsx";
import restoreIcon from "../../../../assets/images/restore.svg";
import noDataIcon from "../../../../assets/images/ic_noData.svg";
import { Fragment, useEffect, useState } from "react";
import * as dataApi from "../../../../api/apiService/dataService";
import Select from "react-select";
import { toast } from "sonner";
import { Listbox, Transition } from "@headlessui/react";
import {
    CheckIcon,
    ChevronLeftIcon,
    ChevronRightIcon,
    ChevronUpDownIcon,
} from "@heroicons/react/20/solid";
import { useNavigate } from "react-router-dom";

const selectes = [5, 10, 25];

function HistoryDeleted() {
    const [courses, setCourses] = useState([]);
    const [options, setOptions] = useState([]);
    const [totalData, setTotalData] = useState(0);
    const [selected, setSelected] = useState(selectes[0]);
    const [page, setPage] = useState(0);

    const handleSelectChange = (e) => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getCoursesDeletedByCategory(
                    e.id,
                    page,
                    selected
                );
                setCourses(result.content.content);
                setTotalData(result.content.totalElements);
            } catch (error) {
                console.log(error);
            }
        };

        const debounceApi = debounce(fetchApi);
        debounceApi();
    };

    const handleRestoreCourse = (id) => {
        toast.promise(dataApi.restoreCourseById(id), {
            loading: "loading...",
            success: (data) => {
                console.log(data);
                setCourses(data.content.content);
                return data.mess;
            },
            error: (error) => {
                console.log(error);
                return error.mess;
            },
        });
    };

    const handleSearchInputChange = (e) => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getCourseByName(
                    e.target.value,
                    page,
                    selected,
                    true
                );
                setCourses(result.content.content);
                setTotalData(result.content.totalElements);
            } catch (error) {
                console.log(error);
            }
        };
        const debounceApi = debounce(fetchApi, 300);
        debounceApi();
    };

    let timerId;

    const debounce = (func, delay = 600) => {
        return () => {
            clearTimeout(timerId);
            timerId = setTimeout(() => {
                func();
            }, delay);
        };
    };

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllCourseDeleted(
                    page,
                    selected
                );
                let categories = [];
                categories = await dataApi.getAllCategories(0, 99999);
                categories.content.content.push({ id: "-1", name: "All" });
                setCourses(result.content.content);
                setTotalData(result.content.totalElements);
                setOptions(categories.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, []);

    const handlePageData = async (action) => {
        const currentTotalData = page * selected + selected;
        if (action === "next" && currentTotalData < totalData) {
            console.log("a");
            setPage((prev) => prev + 1);
        }
        if (action === "previous" && page > 0) {
            setPage((prev) => prev - 1);
        }
    };

    const handleSelectPageSizeChange = (size) => {
        setSelected(size);
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllCourse(page, size);
                setCourses(result.content.content);
                setTotalData(result.content.totalElements);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };
    return (
        <div className="flex justify-center w-full ">
            <div className="container mt-5 mx-14">
                <div className="wrapMainDash">
                    <div className={clsx(styles.topMain)}>
                        <div className={clsx(styles.itemTopMain)}>
                            <h4 className="uppercase">History Deleted</h4>
                        </div>
                    </div>

                    <div className="formGroup flex flex-col gap-3">
                        <div
                            className={clsx(
                                styles.contentMain,
                                "flex justify-between"
                            )}
                        >
                            <div className={clsx(styles.contentItem)}>
                                <div
                                    // className={clsx(styles.cbb)
                                    className={clsx(styles.formSelect)}
                                >
                                    <label htmlFor="">Category</label>
                                    <Select
                                        onChange={handleSelectChange}
                                        getOptionLabel={(x) => x.name}
                                        getOptionValue={(x) => x.id}
                                        options={options}
                                        styles={{
                                            control: (baseStyles, state) => ({
                                                ...baseStyles,
                                                borderColor: state.isFocused
                                                    ? "black"
                                                    : "#e9ecee",
                                            }),
                                        }}
                                    />
                                </div>
                            </div>
                            <div className={clsx(styles.contentItem, "flex-1")}>
                                <div
                                    id="seachWrap"
                                    className={clsx(styles.search)}
                                >
                                    <input
                                        onChange={handleSearchInputChange}
                                        id="searchInput"
                                        type="search"
                                        placeholder="Search.."
                                    />
                                </div>
                            </div>
                        </div>
                        <div className={clsx(styles.mid)}>
                            <div
                                className={clsx(
                                    styles.titleMid,
                                    "row rounded-lg"
                                )}
                            >
                                <div className="col-lg-1">Id</div>
                                <div className="col-lg-5">Course</div>
                                <div className="col-lg-2">Create at</div>
                                <div className="col-lg-2">Price</div>
                                <div className="col-lg-2">Action</div>
                            </div>
                            <div className={clsx(styles.containerData)}>
                                {courses &&
                                    courses.map((course, index) => {
                                        const dateTime = new Date(course.date);

                                        const date =
                                            dateTime.toLocaleDateString();
                                        const time =
                                            dateTime.toLocaleTimeString();

                                        return (
                                            <div
                                                key={index}
                                                className={clsx(
                                                    styles.item,
                                                    "row rounded-lg"
                                                )}
                                            >
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-1"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {course.id}
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-5 flex "
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.cssImg
                                                        )}
                                                    >
                                                        <img
                                                            src={
                                                                course.thumbnail
                                                            }
                                                            alt=""
                                                        />
                                                    </div>
                                                    <div className="overflow-hidden">
                                                        <div
                                                            className={clsx(
                                                                styles.name
                                                            )}
                                                        >
                                                            {course.title}
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                styles.categories
                                                            )}
                                                        >
                                                            {course.category &&
                                                                course.category.join(
                                                                    ", "
                                                                )}
                                                        </div>
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {date}
                                                        <br />
                                                        {time}
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {course.price === 0
                                                            ? "Free"
                                                            : `${course.price} VND`}
                                                    </div>
                                                </div>

                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name,
                                                            "flex gap-4"
                                                        )}
                                                    >
                                                        <button
                                                            type="button"
                                                            onClick={() =>
                                                                handleRestoreCourse(
                                                                    course.id
                                                                )
                                                            }
                                                        >
                                                            <img
                                                                src={
                                                                    restoreIcon
                                                                }
                                                                alt=""
                                                            />
                                                        </button>
                                                        {/* <button
                                                                onClick={() =>
                                                                    openDeleteModal(
                                                                        course.id
                                                                    )
                                                                }
                                                            >
                                                                <img
                                                                    src={
                                                                        deleteIcon
                                                                    }
                                                                    alt=""
                                                                    className="cursor-pointer"
                                                                />
                                                            </button> */}
                                                    </div>
                                                </div>
                                            </div>
                                        );
                                    })}

                                {!courses.length && (
                                    <div
                                        className={clsx(
                                            styles.noData,
                                            "flex flex-col justify-center text-center"
                                        )}
                                    >
                                        <img
                                            src={noDataIcon}
                                            alt=""
                                            className={clsx(
                                                styles.noDataImg,
                                                "m-auto w-32"
                                            )}
                                        />
                                        <span>No Data</span>
                                    </div>
                                )}
                            </div>
                            <div className={clsx(styles.footer)}>
                                <div className={styles.footerItem}>
                                    Rows per page:
                                    <div className="b-shadow-light rounded-lg ml-2 w-24">
                                        <Listbox
                                            value={selected}
                                            onChange={
                                                handleSelectPageSizeChange
                                            }
                                        >
                                            <div className="relative mt-1">
                                                <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white/75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
                                                    <span className="block truncate">
                                                        {selected}
                                                    </span>
                                                    <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                                                        <ChevronUpDownIcon
                                                            className="h-5 w-5 text-gray-400"
                                                            aria-hidden="true"
                                                        />
                                                    </span>
                                                </Listbox.Button>
                                                <Transition
                                                    as={Fragment}
                                                    leave="transition ease-in duration-100"
                                                    leaveFrom="opacity-100"
                                                    leaveTo="opacity-0"
                                                >
                                                    <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm">
                                                        {selectes.map(
                                                            (
                                                                element,
                                                                index
                                                            ) => (
                                                                <Listbox.Option
                                                                    key={index}
                                                                    className={({
                                                                        active,
                                                                    }) =>
                                                                        `relative cursor-default select-none py-2 pl-10 pr-4 ${
                                                                            active
                                                                                ? "bg-amber-100 text-amber-900"
                                                                                : "text-gray-900"
                                                                        }`
                                                                    }
                                                                    value={
                                                                        element
                                                                    }
                                                                >
                                                                    {({
                                                                        selected,
                                                                    }) => (
                                                                        <>
                                                                            <span
                                                                                className={`block truncate ${
                                                                                    selected
                                                                                        ? "font-medium"
                                                                                        : "font-normal"
                                                                                }`}
                                                                            >
                                                                                {
                                                                                    element
                                                                                }
                                                                            </span>
                                                                            {selected ? (
                                                                                <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600">
                                                                                    <CheckIcon
                                                                                        className="h-5 w-5"
                                                                                        aria-hidden="true"
                                                                                    />
                                                                                </span>
                                                                            ) : null}
                                                                        </>
                                                                    )}
                                                                </Listbox.Option>
                                                            )
                                                        )}
                                                    </Listbox.Options>
                                                </Transition>
                                            </div>
                                        </Listbox>
                                    </div>
                                </div>
                                <div className={clsx(styles.footerItem)}>
                                    <div className="mr-3">
                                        {" "}
                                        <span id="currentPage">
                                            {page * selected + 1}-
                                            {totalData <
                                            page * selected + selected
                                                ? totalData
                                                : page * selected + selected}
                                        </span>
                                        <span> of </span>
                                        <span id="total">{totalData}</span>
                                    </div>
                                    <button
                                        disabled={page === 0}
                                        onClick={() =>
                                            handlePageData("previous")
                                        }
                                        className={clsx(styles.controlPage, {
                                            [styles.disableControl]: page === 0,
                                        })}
                                    >
                                        <ChevronLeftIcon></ChevronLeftIcon>
                                    </button>
                                    <button
                                        disabled={
                                            page * selected + selected >=
                                            totalData
                                        }
                                        onClick={() => handlePageData("next")}
                                        className={clsx(styles.controlPage, {
                                            [styles.disableControl]:
                                                page * selected + selected >=
                                                totalData,
                                        })}
                                    >
                                        <ChevronRightIcon></ChevronRightIcon>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default HistoryDeleted;

================
File: src/pages/admin/Course/list/index.js
================
import styles from "./List.module.scss";
import clsx from "clsx";
import { Link, useNavigate } from "react-router-dom";
import deleteIcon from "../../../../assets/images/delete.svg";
import noDataIcon from "../../../../assets/images/ic_noData.svg";
import viewIcon from "../../../../assets/images/view.svg";
import editIcon from "../../../../assets/images/edit.svg";
import { Fragment, useEffect, useState } from "react";
import * as dataApi from "../../../../api/apiService/dataService";
import Select from "react-select";
import { toast } from "sonner";
import {
    CheckIcon,
    ChevronLeftIcon,
    ChevronRightIcon,
    ChevronUpDownIcon,
} from "@heroicons/react/20/solid";
import { Listbox, Transition } from "@headlessui/react";
import Modal from "../../../../component/modal";

const selectes = [5, 10, 25];

function ListCourse() {
    const [deletedModalOpen, setDeletedModalOpen] = useState(false);
    const [courses, setCourses] = useState([]);
    const [options, setOptions] = useState([]);
    const [totalData, setTotalData] = useState(0);
    const [deleteId, setDeleteId] = useState(null);
    const [selected, setSelected] = useState(selectes[0]);
    const [page, setPage] = useState(0);

    const handleRemoveCourse = () => {
        const fetchApi = async () => {
            toast.promise(dataApi.softDeleteCourse(deleteId), {
                loading: "Removing...",
                success: (data) => {
                    console.log(data);
                    setCourses(data.content.content);
                    setTotalData(data.content.totalElements);
                    setDeletedModalOpen(false);
                    return "Remove successfully";
                },
                error: (error) => {
                    return error.content;
                },
            });
        };

        fetchApi();
    };

    const handlePageData = async (action) => {
        const currentTotalData = page * selected + selected;
        let updatePage = page;
        if (action === "next" && currentTotalData < totalData) {
            updatePage += 1;
            setPage(updatePage);
        }
        if (action === "previous" && page > 0) {
            updatePage -= 1;
            setPage(updatePage);
        }
        fetchCourseUpdate(updatePage, selected);
    };

    const handleCloseModal = () => {
        setDeletedModalOpen(false);
    };

    const openDeleteModal = (id) => {
        setDeleteId(id);
        setDeletedModalOpen(true);
    };

    const handleSelectChange = (e) => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getCoursesByCategory(
                    e.id,
                    page,
                    selected
                );
                setCourses(result.content.content);
                setTotalData(result.content.totalElements);
            } catch (error) {
                console.log(error);
            }
        };

        const debounceApi = debounce(fetchApi, 0);
        debounceApi();
    };

    const fetchCourseUpdate = async (page = this.page, size = selected) => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllCourse(page, size);
                setCourses((prev) => result.content.content);
                setTotalData(result.content.totalElements);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };

    const handleSelectPageSizeChange = (size) => {
        setSelected((prev) => size);
        fetchCourseUpdate(page, size);
    };
    const handleSearchInputChange = (e) => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getCourseByName(
                    e.target.value,
                    page,
                    selected
                );
                setCourses(result.content.content);
                setTotalData(result.content.totalElements);
            } catch (error) {
                console.log(error);
            }
        };
        const debounceApi = debounce(fetchApi, 300);
        debounceApi();
    };

    let timerId;

    const debounce = (func, delay = 600) => {
        return () => {
            clearTimeout(timerId);
            timerId = setTimeout(() => {
                func();
            }, delay);
        };
    };

    useEffect(() => {
        const fetchApi = async () => {
            try {
                let categories = [];
                categories = await dataApi.getAllCategories(0, 99999);
                const result = await dataApi.getAllCourseAdmin(page, selected);
                categories.content.content.push({ id: "-1", name: "All" });
                setCourses(result.content.content);
                setTotalData(result.content.totalElements);
                setOptions(categories.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, []);

    return (
        <div className="flex justify-center w-full ">
            <div className="container mt-5 mx-14">
                <div className="wrapMainDash">
                    <div className={clsx(styles.topMain)}>
                        <div className={clsx(styles.itemTopMain)}>
                            <h4>List</h4>
                        </div>
                        <div className={clsx(styles.itemTopMain)}>
                            <Link
                                to={"/admin/course/create"}
                                className={styles.btnCreate}
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    aria-hidden="true"
                                    role="img"
                                    className="component-iconify MuiBox-root css-1t9pz9x iconify iconify--mingcute"
                                    width="20px"
                                    height="20px"
                                    viewBox="0 0 24 24"
                                >
                                    <g fill="none">
                                        <path d="M24 0v24H0V0zM12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427c-.002-.01-.009-.017-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093c.012.004.023 0 .029-.008l.004-.014l-.034-.614c-.003-.012-.01-.02-.02-.022m-.715.002a.023.023 0 0 0-.027.006l-.006.014l-.034.614c0 .012.007.02.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z"></path>
                                        <path
                                            fill="currentColor"
                                            d="M11 20a1 1 0 1 0 2 0v-7h7a1 1 0 1 0 0-2h-7V4a1 1 0 1 0-2 0v7H4a1 1 0 1 0 0 2h7z"
                                        ></path>
                                    </g>
                                </svg>
                                New Course
                            </Link>
                        </div>
                    </div>

                    <div className="formGroup flex flex-col gap-3">
                        <div
                            className={clsx(
                                styles.contentMain,
                                "flex justify-between"
                            )}
                        >
                            <div className={clsx(styles.contentItem)}>
                                <div className={clsx(styles.formSelect)}>
                                    <label htmlFor="">Category</label>
                                    <Select
                                        onChange={handleSelectChange}
                                        getOptionLabel={(x) => x.name}
                                        getOptionValue={(x) => x.id}
                                        options={options}
                                        styles={{
                                            control: (baseStyles, state) => ({
                                                ...baseStyles,
                                                borderColor: state.isFocused
                                                    ? "black"
                                                    : "#e9ecee",
                                            }),
                                        }}
                                    />
                                </div>
                            </div>
                            <div className={clsx(styles.contentItem, "flex-1")}>
                                <div
                                    id="seachWrap"
                                    className={clsx(styles.search)}
                                >
                                    <input
                                        onChange={handleSearchInputChange}
                                        id="searchInput"
                                        type="search"
                                        placeholder="Search.."
                                    />
                                </div>
                            </div>
                        </div>
                        <div className={clsx(styles.mid)}>
                            <div
                                className={clsx(
                                    styles.titleMid,
                                    "row rounded-lg"
                                )}
                            >
                                <div className="col-lg-1">Id</div>
                                <div className="col-lg-5">Course</div>
                                <div className="col-lg-2">Create at</div>
                                <div className="col-lg-2">Price</div>
                                <div className="col-lg-2">Action</div>
                            </div>
                            <div className={clsx(styles.containerData)}>
                                {courses &&
                                    courses.map((course, index) => {
                                        const dateTime = new Date(course.date);
                                        const date =
                                            dateTime.toLocaleDateString();
                                        const time =
                                            dateTime.toLocaleTimeString();
                                        return (
                                            <div
                                                key={index}
                                                className={clsx(
                                                    styles.item,
                                                    "row rounded-lg"
                                                )}
                                            >
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-1"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {course.id}
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-5 flex "
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.cssImg
                                                        )}
                                                    >
                                                        <img
                                                            src={
                                                                course.thumbnail
                                                            }
                                                            alt=""
                                                        />
                                                    </div>
                                                    <div className="overflow-hidden">
                                                        <div
                                                            className={clsx(
                                                                styles.name
                                                            )}
                                                        >
                                                            {course.title}
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                styles.categories
                                                            )}
                                                        >
                                                            {course.category &&
                                                                course.category.join(
                                                                    ", "
                                                                )}
                                                        </div>
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {date}
                                                        <br />
                                                        {time}
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {course.price === 0
                                                            ? "Free"
                                                            : `${course.price.toLocaleString(
                                                                  "vi-VN"
                                                              )} VND`}
                                                    </div>
                                                </div>

                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name,
                                                            "flex gap-4"
                                                        )}
                                                    >
                                                        <Link
                                                            to={`/admin/course/detail/${course.id}`}
                                                        >
                                                            <img
                                                                src={viewIcon}
                                                                alt=""
                                                            />
                                                        </Link>
                                                        <Link
                                                            to={`/admin/course/edit/${course.id}`}
                                                        >
                                                            <img
                                                                src={editIcon}
                                                                alt=""
                                                            />
                                                        </Link>
                                                        <button
                                                            onClick={() =>
                                                                openDeleteModal(
                                                                    course.id
                                                                )
                                                            }
                                                        >
                                                            <img
                                                                src={deleteIcon}
                                                                alt=""
                                                                className="cursor-pointer"
                                                            />
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        );
                                    })}
                                {!courses ||
                                    (!courses.length && (
                                        <div
                                            className={clsx(
                                                styles.noData,
                                                "flex flex-col justify-center text-center"
                                            )}
                                        >
                                            <img
                                                src={noDataIcon}
                                                alt=""
                                                className={clsx(
                                                    styles.noDataImg,
                                                    "m-auto w-32"
                                                )}
                                            />
                                            <span>No Data</span>
                                        </div>
                                    ))}
                            </div>
                            <div className={clsx(styles.footer)}>
                                <div className={styles.footerItem}>
                                    Rows per page:
                                    <div className="b-shadow-light rounded-lg ml-2 w-24">
                                        <Listbox
                                            value={selected}
                                            onChange={
                                                handleSelectPageSizeChange
                                            }
                                        >
                                            <div className="relative mt-1">
                                                <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white/75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
                                                    <span className="block truncate">
                                                        {selected}
                                                    </span>
                                                    <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                                                        <ChevronUpDownIcon
                                                            className="h-5 w-5 text-gray-400"
                                                            aria-hidden="true"
                                                        />
                                                    </span>
                                                </Listbox.Button>
                                                <Transition
                                                    as={Fragment}
                                                    leave="transition ease-in duration-100"
                                                    leaveFrom="opacity-100"
                                                    leaveTo="opacity-0"
                                                >
                                                    <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm">
                                                        {selectes.map(
                                                            (
                                                                element,
                                                                index
                                                            ) => (
                                                                <div
                                                                    key={index}
                                                                >
                                                                    <Listbox.Option
                                                                        className={({
                                                                            active,
                                                                        }) =>
                                                                            `relative cursor-default select-none py-2 pl-10 pr-4 ${
                                                                                active
                                                                                    ? "bg-amber-100 text-amber-900"
                                                                                    : "text-gray-900"
                                                                            }`
                                                                        }
                                                                        value={
                                                                            element
                                                                        }
                                                                    >
                                                                        {({
                                                                            selected,
                                                                        }) => (
                                                                            <>
                                                                                <span
                                                                                    className={`block truncate ${
                                                                                        selected
                                                                                            ? "font-medium"
                                                                                            : "font-normal"
                                                                                    }`}
                                                                                >
                                                                                    {
                                                                                        element
                                                                                    }
                                                                                </span>
                                                                                {selected ? (
                                                                                    <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600">
                                                                                        <CheckIcon
                                                                                            className="h-5 w-5"
                                                                                            aria-hidden="true"
                                                                                        />
                                                                                    </span>
                                                                                ) : null}
                                                                            </>
                                                                        )}
                                                                    </Listbox.Option>
                                                                </div>
                                                            )
                                                        )}
                                                    </Listbox.Options>
                                                </Transition>
                                            </div>
                                        </Listbox>
                                    </div>
                                </div>
                                <div className={clsx(styles.footerItem)}>
                                    <div className="mr-3">
                                        <span id="currentPage">
                                            {page * selected + 1}-
                                            {totalData <
                                            page * selected + selected
                                                ? totalData
                                                : page * selected + selected}
                                        </span>
                                        <span> of </span>
                                        <span id="total">{totalData}</span>
                                    </div>
                                    <button
                                        disabled={page === 0}
                                        onClick={() =>
                                            handlePageData("previous")
                                        }
                                        className={clsx(styles.controlPage, {
                                            [styles.disableControl]: page === 0,
                                        })}
                                    >
                                        <ChevronLeftIcon></ChevronLeftIcon>
                                    </button>
                                    <button
                                        disabled={
                                            page * selected + selected >=
                                            totalData
                                        }
                                        onClick={() => handlePageData("next")}
                                        className={clsx(styles.controlPage, {
                                            [styles.disableControl]:
                                                page * selected + selected >=
                                                totalData,
                                        })}
                                    >
                                        <ChevronRightIcon></ChevronRightIcon>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <Modal
                isOpen={deletedModalOpen}
                closeModal={handleCloseModal}
                title={"Delete"}
                description={"Are you sure want to delete?"}
                handleRemove={handleRemoveCourse}
            ></Modal>
        </div>
    );
}

export default ListCourse;

================
File: src/pages/admin/Course/list/List.module.scss
================
@import "../../../../component//dashboard//leftNavDash//LeftNavDash.module.scss";
.topMain {
    margin-bottom: 40px;
    display: flex;
    justify-content: space-between;
}

.wrapper {
    margin-right: 120px;
}

.itemTopMain {
    h4 {
        font-size: 24px;
        font-weight: 700;
        text-transform: uppercase;
    }
}

.container {
    margin-right: 50px;
    padding: 30px;
}

.btnCreate {
    display: inline-flex;
    -webkit-box-align: center;
    align-items: center;
    -webkit-box-pack: center;
    justify-content: center;
    position: relative;
    box-sizing: border-box;
    -webkit-tap-highlight-color: transparent;
    outline: 0px;
    border: 0px currentcolor;
    margin: 0px;
    cursor: pointer;
    user-select: none;
    vertical-align: middle;
    appearance: none;
    text-decoration: none;
    font-weight: 700;
    line-height: 1.71429;
    font-size: 0.875rem;
    text-transform: unset;
    font-family: "Public Sans", sans-serif;
    min-width: 64px;
    padding: 6px 12px;
    border-radius: 8px;
    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
        box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
        border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
        color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    box-shadow: none;
    color: rgb(255, 255, 255);
    // background-color: rgb(33, 43, 54);
    background-color: black;
    svg {
        color: white;
        position: relative;
        margin-right: 8px;
    }
}

.contentItem {
    display: inline-flex;
    flex-direction: column;
    position: relative;
    min-width: 0px;
    padding: 0px;
    margin: 0px;
    border: 0px;
    vertical-align: top;
    flex-shrink: 0;
    height: 54px;
    label {
        padding: 0px;
        line-height: 1.57143;
        font-size: 13px;
        font-family: "Public Sans", sans-serif;
        font-weight: 600;
        color: rgb(99, 115, 129);
        display: block;
        transform-origin: left top;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: calc(100% - 24px);
        position: absolute;
        left: -5px;
        top: -45%;
        background: white;
        transform: translate(14px, 16px) scale(1);
        transition: color 200ms cubic-bezier(0, 0, 0.2, 1) 0ms,
            transform 200ms cubic-bezier(0, 0, 0.2, 1) 0ms,
            max-width 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;
        z-index: 1;
        pointer-events: none;
    }

    .formSelect {
        width: auto;
        height: 56px;
        border-radius: 8px !important;
        cursor: pointer;
        box-sizing: content-box;
        background: none;
        margin: 0px;
        animation-name: mui-auto-fill-cancel;
        line-height: 1.57143;
        font-size: 0.875rem;
        font-weight: 400;
    }

    svg {
        user-select: none;
        display: inline-block;
        fill: currentcolor;
        flex-shrink: 0;
        transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
        font-size: 1.5rem;
        position: absolute;
        pointer-events: none;
        right: 10px;
        width: 18px;
        height: 18px;
        top: calc(50% - 9px);
    }
}

.search.focus {
    border-color: black;
}

.search {
    margin-left: 16px;
    border: 1px solid $border-color;
    line-height: 1.4375em;
    font-size: 1rem;
    font-weight: 400;
    color: rgb(33, 43, 54);
    cursor: text;
    display: inline-flex;
    -webkit-box-align: center;
    align-items: center;
    border-radius: 8px;
    padding-left: 14px;
    padding-right: 14px;
    input {
        width: 200px;
        outline: none;
        border: 0px;
        box-sizing: content-box;
        background: none;
        height: 1.4375em;
        margin: 0px;
        -webkit-tap-highlight-color: transparent;
        display: block;
        min-width: 0px;
        width: 100%;
        animation-duration: 10ms;
        line-height: 16px;
        font-size: 14px;
        font-weight: 400;
        padding: 16.5px 0px;
    }
    &:focus-within {
        border-color: black; 
    }
    &:hover {
        border-color: black;
    }
}

.titleMid {
    min-height: 56px;
    max-height: 56px;
    line-height: 56px;
    background-color: #f4f6f8;
    color: #637381;
    font-size: 14px;
}

.contentMid {
    // height: 370px;
    margin-bottom: 100px;
    overflow-y: scroll;
}

.footer {
    min-height: 52px;
    padding-right: 2px;
}

.item {
    height: 90px;
    padding: 10px 0;
    border-bottom: 1px solid #f3f0f0;
    div {
        align-self: center;
    }
}

.cssImg {
    width: 60px;
    height: 60px;
    border-radius: 100rem;
    position: relative;
    display: flex;
    -webkit-box-align: center;
    align-items: center;
    -webkit-box-pack: center;
    justify-content: center;
    flex-shrink: 0;
    font-size: 1.25rem;
    line-height: 1;
    overflow: hidden;
    user-select: none;
    width: 50px;
    height: 50px;
    margin-right: 16px;
}

.field {
    .name {
        margin: 0px;
        font-weight: 500;
        line-height: 1.57143;
        font-size: 14px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        text-decoration: none;
        color: inherit;
        cursor: auto;

        img {
            &:hover {
                opacity: 0.7;
            }
            width: 20px;
            height: 20px;
        }
    }
    .categories {
        line-height: 1.57143;
        font-size: 14px;
        font-weight: 400;
        color: rgb(145, 158, 171);
    }
}

.containerData {
    margin-top: 20px;
    overflow: hidden;
}

.noData {
    height: 100%;
    border-radius: 16px;
    padding: 80px 24px;
    background-color: rgba(145, 158, 171, 0.04);
    border: 1px dashed rgba(145, 158, 171, 0.08);
    span {
        margin: 8px 0px 0px;
        font-weight: 700;
        line-height: 1.55556;
        font-size: 1.0625rem;
        color: rgb(145, 158, 171);
        text-align: center;
    }
}

.footer {
    padding-top: 24px;
    display: flex;
    justify-content: end;

    .footerItem {
        display: flex;
        align-items: center;
        margin-left: 32px;
        line-height: 14px;
        font-size: 14px;
        font-weight: 400;

        svg {
            width: 24px;
        }
    }
}

.controlPage {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 32px;
    height: 32px;
    margin-left: 8px;
    border-radius: 100rem;
    &:hover {
        background-color: #f3f0f0;
    }
}

.disableControl {
    user-select: none;
    cursor: not-allowed;
    svg {
        color: #a7b1bb;
    }
}

.titleModal {
    font-weight: 700;
    font-size: 16px;
}

.descModal {
    font-weight: 400;
    font-size: 14px;
}

.adminTag { 
    
}

================
File: src/pages/admin/Dashboard.module.scss
================
.greeting {
    background: #d5f3e7;
}

.imgThongKe {
    width: 240px;
    height: 260px;
}

.title {
    color: rgb(0, 75, 80);
}

.item {
    margin: 14px 0;
}

================
File: src/pages/admin/index.js
================
import { Fragment, useEffect, useState } from "react";
import styles from "./Dashboard.module.scss";
import clsx from "clsx";
import thongKe from "../../assets/images/thongKe.svg";
import CardStatiscal from "../../component/cardTotal";
import * as dataApi from "../../api/apiService/dataService";
import { useSelector } from "react-redux";
import stylesList from "../admin/Course/list/List.module.scss";
import Select from "react-select";
import { Link } from "react-router-dom";
import noDataIcon from "../../assets/images/ic_noData.svg";
import avatar from "../../assets/images/avatar_25.jpg";
import Sidebar from "../../component/dashboard/SideBar2";
import { motion } from 'framer-motion';
const Dashboard = () => {
    const [statistical, setStatistical] = useState({});
    const [invoices, setInvoices] = useState([]);
    const [courses, setCourses] = useState([]);
    const [users, setUsers] = useState([]);
    const [totalInvoice, setTotalInvoice] = useState(0);
    const user = useSelector((state) => state.login.user);
    const [dashboardData, setDashboardData] = useState({});
    const [totalEnrollments, setTotalEnrollments] = useState(0);
    const [totalCourse, setTotalCourses] = useState(0);
    const [totalUsers, setTotalUsers] = useState(0);
    const [totalInstructors, setTotalInstructors] = useState(0);
    const [topCourses, setTopCourses] = useState([]);
    const [totalProfit,setTotalProfit] = useState(0)
    const [dateRange, setDateRange] = useState([
      {
        startDate: new Date(),
        endDate: new Date(),
        key: 'selection'
      }
    ]);
    const [showReport, setShowReport] = useState(false);
    const [showModal, setShowModal] = useState(false);
    const monthNames = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
    ];

    const date = new Date();
    const currentMonth = date.getMonth() + 1;
    const currentYear = date.getFullYear();

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getMonthlyStatistic(
                    currentMonth,
                    currentYear
                );
                setInvoices(result.invoicesCreated);
                setCourses(result.coursesCreated);
                setUsers(result.usersRegistered);
                console.table(result.coursesCreated);
                setTotalInvoice(result.invoiceTotal);
            } catch (error) {}
        };
        fetchApi();
    }, []);
    return (
        <div className="mb-32">
            <div className={clsx("container")}>
               <div className={clsx("row gx-4 gy-4")}>
               <div className="relative overflow-x-auto shadow-md sm:rounded-lg w-full p-10">
          <motion.div
            initial={{ opacity: 0, y: -50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <div className='flex justify-between'>
              <h1 className="text-2xl font-bold">DashBoard</h1>
              <button onClick={() => setShowModal(true)}>Sales Report</button>
            </div>
            {showReport && (
              <div className='mt-4'>
                <SalesReport
                  startDate={dateRange[0].startDate}
                  endDate={dateRange[0].endDate}
                />
              </div>
            )}
            <div className="flex gap-20 justify-around pt-10">
              <motion.div
                className="w-1/3 shadow-lg border rounded-md h-32 flex flex-col justify-center items-center"
                initial={{ opacity: 0, y: -50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
              >
                <h1 className="text-xl font-semibold">Total Courses</h1>
                <h1 className="text-4xl font-bold ">
                  {totalCourse}
                </h1>
              </motion.div>
              <motion.div
                className="w-1/3 border shadow-lg rounded-md h-32 flex flex-col justify-center items-center"
                initial={{ opacity: 0, y: -50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.1 }}
              >
                <h1 className="text-xl font-semibold">Total Enrollment</h1>
                <h1 className="text-4xl font-bold ">
                  {totalEnrollments}
                </h1>
              </motion.div>
              <motion.div
                className="w-1/3 border shadow-lg rounded-md h-32 flex flex-col justify-center items-center"
                initial={{ opacity: 0, y: -50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.1 }}
              >
                <h1 className="text-xl font-semibold">Total Profit</h1>
                <h1 className="text-4xl font-bold ">
                  {totalProfit}
                </h1>
              </motion.div>
              <motion.div
                className="w-1/3 border shadow-lg rounded-md h-32 flex flex-col justify-center items-center"
                initial={{ opacity: 0, y: -50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.2 }}
              >
                <h1 className="text-xl font-semibold">Total Students</h1>
                <h1 className="text-4xl font-bold ">
                  {totalUsers}
                </h1>
              </motion.div>
              <motion.div
                className="w-1/3 border shadow-lg rounded-md h-32 flex flex-col justify-center items-center"
                initial={{ opacity: 0, y: -50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.3 }}
              >
                <h1 className="text-xl font-semibold">Total Instructors</h1>
                <h1 className="text-4xl font-bold ">
                  {totalInstructors}
                </h1>
              </motion.div>
            </div>
          </motion.div>
          <div className="flex mt-6">
            <motion.div
              className="w-1/2 h-full border m-2 shadow-md"
              initial={{ opacity: 0, y: -50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.4 }}
            >
              <TotalEnrollments enrollmentsData={transformedDataForDateChart} />
            </motion.div>
            <motion.div
              className="w-1/2 mt-2 border shadow-lg"
              initial={{ opacity: 0, y: -50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.5 }}
            >
              <CategoryEnrollmentChart
                enrollmentsData={Object.entries(transformedDataForCategoryChart)}
              />
            </motion.div>
          </div>
          <div>
            <TopCourses topCourses={topCourses} />
          </div>
        </div>
                    {/* <div
                        className={clsx(
                            styles.greeting,
                            "col-lg-12 rounded-lg",
                            "flex justify-between"
                        )}
                    >
                        <div className={clsx(styles.title, "p-10")}>
                            <h4
                                className={clsx(
                                    styles.green,
                                    "font-semibold text-2xl"
                                )}
                            >
                                Welcom back 👋
                                <br />
                                <strong style={{ textTransform: "capitalize" }}>
                                    {user?.firstName + " " + user?.lastName}
                                </strong>
                            </h4>
                            <span className="text-sm">
                                That is statistical information for{" "}
                                <strong>
                                    {" "}
                                    {monthNames[currentMonth - 1]},{" "}
                                    {currentYear}
                                </strong>
                            </span>
                        </div>
                        <div
                            className={clsx(
                                styles.imgThongKe,
                                "flex items-center"
                            )}
                        >
                            <img src={thongKe} alt="" />
                        </div>
                    </div> */}

                    {/* <div className="col-lg-4 rounded-lg">
                        <CardStatiscal
                            title={"Total Active Users"}
                            amount={users?.totalElements}
                        ></CardStatiscal>
                    </div>
                    <div className="col-lg-4 rounded-lg">
                        <CardStatiscal
                            title={"Total Active Courses"}
                            amount={courses?.totalElements}
                        ></CardStatiscal>
                    </div>
                    <div className="col-lg-4 rounded-lg">
                        <CardStatiscal
                            title={"Total Balance"}
                            amount={totalInvoice}
                            currency={"VND"}
                        ></CardStatiscal>
                    </div> */}

                    {/* /?NOTE Table
                    <div className="col-lg-6 rounded-lg">
                        <div className="boxShadow p-4 rounded-lg">
                            <div className={clsx("mb-2 pl-6")}>
                                <h4 className="text-base font-semibold">
                                    NEW USER
                                </h4>
                            </div>
                            <hr className="cssHr" />
                            <div className={clsx(stylesList.mid, "mt-4")}>
                                <div
                                    className={clsx(
                                        styles.titleMid,
                                        "row rounded-lg py-2 bg-black text-white"
                                    )}
                                >
                                    <div className="col-lg-2 self-center">
                                        ID
                                    </div>
                                    <div className="col-lg-10">User</div>
                                </div>
                                <div
                                    className={clsx(
                                        stylesList.containerData,
                                        "overflow-y-scroll mt-0 max-h-[364px] overflow-x-hidden"
                                    )}
                                >
                                    {users &&
                                        users?.content?.map(
                                            (element, index) => {
                                                return (
                                                    <div
                                                        key={index}
                                                        className={clsx(
                                                            stylesList.item,
                                                            "row rounded-lg h-[60px]"
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                stylesList.field,
                                                                "col-lg-2"
                                                            )}
                                                        >
                                                            <div
                                                                className={clsx(
                                                                    stylesList.name
                                                                )}
                                                            >
                                                                {element.id}
                                                            </div>
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                stylesList.field,
                                                                "col-lg-10 flex "
                                                            )}
                                                        >
                                                            <div
                                                                className={clsx(
                                                                    stylesList.cssImg
                                                                )}
                                                            >
                                                                <img
                                                                    src={
                                                                        !element.avatar
                                                                            ? avatar
                                                                            : element.avatar
                                                                    }
                                                                    alt=""
                                                                />
                                                            </div>
                                                            <div className="overflow-hidden">
                                                                <div
                                                                    className={clsx(
                                                                        stylesList.name
                                                                    )}
                                                                >
                                                                    {element.firstName +
                                                                        " " +
                                                                        element.lastName}
                                                                </div>
                                                                <div
                                                                    className={clsx(
                                                                        stylesList.categories
                                                                    )}
                                                                >
                                                                    {
                                                                        element.email
                                                                    }
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                );
                                            }
                                        )}
                                    {users?.content?.length === 0 && (
                                        <div
                                            className={clsx(
                                                stylesList.noData,
                                                "flex flex-col justify-center text-center"
                                            )}
                                        >
                                            <img
                                                src={noDataIcon}
                                                alt=""
                                                className={clsx(
                                                    stylesList.noDataImg,
                                                    "m-auto w-32"
                                                )}
                                            />
                                            <span>No Data</span>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div> */}

                    {/* <div className="col-lg-6 rounded-lg">
                        <div className="boxShadow p-4 rounded-lg">
                            <div className={clsx("mb-2 pl-6")}>
                                <h4 className="text-base font-semibold uppercase">
                                    NEW COURSE
                                </h4>
                            </div>
                            <hr className="cssHr" />
                            <div className={clsx(stylesList.mid, "mt-4")}>
                                <div
                                    className={clsx(
                                        styles.titleMid,
                                        "row rounded-lg py-2 bg-black text-white"
                                    )}
                                >
                                    <div className="col-lg-2 self-center">
                                        ID
                                    </div>
                                    <div className="col-lg-7">Title</div>
                                    <div className="col-lg-3">Price</div>
                                </div>
                                <div
                                    className={clsx(
                                        stylesList.containerData,
                                        "overflow-y-scroll mt-0 max-h-[364px] overflow-x-hidden"
                                    )}
                                >
                                    {courses &&
                                        courses?.content?.map(
                                            (element, index) => {
                                                return (
                                                    <div
                                                        key={index}
                                                        className={clsx(
                                                            stylesList.item,
                                                            "row rounded-lg h-[60px]"
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                stylesList.field,
                                                                "col-lg-2"
                                                            )}
                                                        >
                                                            <div
                                                                className={clsx(
                                                                    stylesList.name
                                                                )}
                                                            >
                                                                {element.id}
                                                            </div>
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                stylesList.field,
                                                                "col-lg-7 flex "
                                                            )}
                                                        >
                                                            <div
                                                                className={clsx(
                                                                    stylesList.cssImg
                                                                )}
                                                            >
                                                                <img
                                                                    src={
                                                                        !element.thumbnail
                                                                            ? avatar
                                                                            : element.thumbnail
                                                                    }
                                                                    alt=""
                                                                />
                                                            </div>
                                                            <div className="overflow-hidden">
                                                                <div
                                                                    className={clsx(
                                                                        stylesList.name,
                                                                        "line-clamp-3 text-wrap"
                                                                    )}
                                                                >
                                                                    {
                                                                        element.title
                                                                    }
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                stylesList.field,
                                                                "col-lg-3"
                                                            )}
                                                        >
                                                            <div
                                                                className={clsx(
                                                                    stylesList.name
                                                                )}
                                                            >
                                                                {element?.price ===
                                                                0
                                                                    ? "Free"
                                                                    : element.price.toLocaleString() +
                                                                      " VND"}
                                                            </div>
                                                        </div>
                                                    </div>
                                                );
                                            }
                                        )}
                                    {courses?.content?.length === 0 && (
                                        <div
                                            className={clsx(
                                                stylesList.noData,
                                                "flex flex-col justify-center text-center"
                                            )}
                                        >
                                            <img
                                                src={noDataIcon}
                                                alt=""
                                                className={clsx(
                                                    stylesList.noDataImg,
                                                    "m-auto w-32"
                                                )}
                                            />
                                            <span>No Data</span>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div> */}

                    {/* <div className="mx-auto col-lg-10 rounded-lg">
                        <div className="boxShadow p-4 rounded-lg">
                            <div className={clsx("mb-2 pl-6")}>
                                <h4 className="text-base font-semibold uppercase">
                                    NEW invoice
                                </h4>
                            </div>
                            <hr className="cssHr" />
                            <div className={clsx(stylesList.mid, "mt-4")}>
                                <div
                                    className={clsx(
                                        styles.titleMid,
                                        "row rounded-lg py-2 bg-black text-white"
                                    )}
                                >
                                    <div className="col-lg-1 self-center">
                                        ID
                                    </div>
                                    <div className="col-lg-4">Title</div>
                                    <div className="col-lg-3">Content</div>
                                    <div className="col-lg-2">Create at</div>
                                    <div className="col-lg-2">Amount at</div>
                                </div>
                                <div
                                    className={clsx(
                                        stylesList.containerData,
                                        "overflow-y-scroll mt-0 max-h-[364px] overflow-x-hidden"
                                    )}
                                >
                                    {invoices &&
                                        invoices?.content?.map(
                                            (element, index) => {
                                                return (
                                                    <div
                                                        key={index}
                                                        className={clsx(
                                                            stylesList.item,
                                                            "row rounded-lg h-[60px]"
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                stylesList.field,
                                                                "col-lg-1"
                                                            )}
                                                        >
                                                            <div
                                                                className={clsx(
                                                                    stylesList.name
                                                                )}
                                                            >
                                                                {element.id}
                                                            </div>
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                stylesList.field,
                                                                "col-lg-4 flex "
                                                            )}
                                                        >
                                                            <div
                                                                className={clsx(
                                                                    stylesList.cssImg
                                                                )}
                                                            >
                                                                <img
                                                                    src={
                                                                        !element
                                                                            ?.user
                                                                            ?.avatar
                                                                            ? avatar
                                                                            : element
                                                                                  .user
                                                                                  .avatar
                                                                    }
                                                                    alt=""
                                                                />
                                                            </div>
                                                            <div className="overflow-hidden">
                                                                <div
                                                                    className={clsx(
                                                                        stylesList.name,
                                                                        "line-clamp-3 text-wrap"
                                                                    )}
                                                                >
                                                                    {element
                                                                        ?.user
                                                                        ?.firstName +
                                                                        " " +
                                                                        element
                                                                            ?.user
                                                                            ?.lastName}
                                                                </div>
                                                                <div
                                                                    className={clsx(
                                                                        stylesList.categories
                                                                    )}
                                                                >
                                                                    {
                                                                        element.methodPayment
                                                                    }
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                stylesList.field,
                                                                "col-lg-3"
                                                            )}
                                                        >
                                                            <div
                                                                className={clsx(
                                                                    stylesList.name,
                                                                    "text-wrap line-clamp-3"
                                                                )}
                                                            >
                                                                {
                                                                    element?.content
                                                                }
                                                            </div>
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                stylesList.field,
                                                                "col-lg-2"
                                                            )}
                                                        >
                                                            <div
                                                                className={clsx(
                                                                    stylesList.name
                                                                )}
                                                            >
                                                                {element?.createDate?.toLocaleTimeString()}
                                                            </div>
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                stylesList.field,
                                                                "col-lg-2"
                                                            )}
                                                        >
                                                            <div
                                                                className={clsx(
                                                                    stylesList.name
                                                                )}
                                                            >
                                                                {element?.totalInvoice.toLocaleString()}{" "}
                                                                VND
                                                            </div>
                                                        </div>
                                                    </div>
                                                );
                                            }
                                        )}
                                    {invoices?.content?.length === 0 && (
                                        <div
                                            className={clsx(
                                                stylesList.noData,
                                                "flex flex-col justify-center text-center"
                                            )}
                                        >
                                            <img
                                                src={noDataIcon}
                                                alt=""
                                                className={clsx(
                                                    stylesList.noDataImg,
                                                    "m-auto w-32"
                                                )}
                                            />
                                            <span>No Data</span>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div> */}
                </div>
            </div>
        </div>
    );
};

export default Dashboard;

================
File: src/pages/admin/invoice/historyDelete/index.js
================
import clsx from "clsx";
import styles from "../../Course/list/List.module.scss";
import { Fragment, useEffect, useState } from "react";
import noDataIcon from "../../../../assets/images/ic_noData.svg";
import { Listbox, Transition } from "@headlessui/react";
import {
    CheckIcon,
    ChevronLeftIcon,
    ChevronRightIcon,
    ChevronUpDownIcon,
} from "@heroicons/react/20/solid";
import * as dataApi from "../../../../api/apiService/dataService";
import Modal from "../../../../component/modal";
import avatar from "../../../../assets/images/avatar_1.jpg";
import Datepicker from "react-tailwindcss-datepicker";
import moment from "moment/moment";
import { toast } from "sonner";
import restoreIcon from "../../../../assets/images/restore.svg";

const selectes = [5, 10, 25];
let timerId;

function ListDeleteInvoice() {
    const [invoices, setInvoices] = useState([]);
    const [deletedModalOpen, setDeletedModalOpen] = useState(false);
    const [totalData, setTotalData] = useState(0);
    const [selectedSize, setSelectedSize] = useState(selectes[0]);
    const [page, setPage] = useState(0);

    const handleSearchInputChange = async (e) => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.searchInvoice(
                    e.target.value,
                    page,
                    selectedSize
                );
                setInvoices(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        const debounceApi = debounce(fetchApi, 300);
        debounceApi();
    };

    const handleCloseModal = () => {
        setDeletedModalOpen(false);
    };

    const handlePageData = async (action) => {
        const currentTotalData = page * selectedSize + selectedSize;
        let updatePage = page;
        if (action === "next" && currentTotalData < totalData) {
            updatePage += 1;
            setPage(updatePage);
        }
        if (action === "previous" && page > 0) {
            updatePage -= 1;
            setPage(updatePage);
        }
        fetchInvoicesUpdate(updatePage, selectedSize);
    };

    const debounce = (func, delay = 600) => {
        return () => {
            clearTimeout(timerId);
            timerId = setTimeout(() => {
                func();
            }, delay);
        };
    };

    const fetchInvoicesUpdate = async () => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllInvoiceDelete(
                    page,
                    selectedSize
                );
                setInvoices((prev) => result.content.content);
                setTotalData(result.content.totalElements);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };

    const handleSelectPageSizeChange = (size) => {
        setSelectedSize((prev) => size);
        fetchInvoicesUpdate(page, size);
    };

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllInvoiceDelete();
                setInvoices(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, []);

    const [value, setValue] = useState({
        startDate: new Date(),
        endDate: new Date().setMonth(11),
    });

    const handleValueChange = (newValue) => {
        if (newValue.startDate === null && newValue.endDate === null) {
            const fetchApi = async () => {
                try {
                    const result = await dataApi.getAllInvoice();
                    setInvoices(result.content.content);
                    console.log(result);
                } catch (error) {
                    console.log(error);
                }
            };
            fetchApi();
            return;
        }
        const tempStart = moment(newValue.startDate, "YYYY-MM-DD");
        const tempEnd = moment(newValue.endDate, "YYYY-MM-DD");
        const startDate = tempStart.format("YYYY-MM-DDTHH:mm:ss.SSS");
        const enđDate = tempEnd.format("YYYY-MM-DDTHH:mm:ss.SSS");
        const fetchApi = async () => {
            try {
                const result = await dataApi.getInvoicesByDate(
                    startDate,
                    enđDate,
                    page,
                    selectedSize
                );
                setInvoices(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
        setValue(newValue);
    };

    const handleRestoreInvoice = (id) => {
        toast.promise(dataApi.restoreInvoieById(id), {
            loading: "loading...",
            success: (data) => {
                setInvoices(data.content.content);
                console.log(data.content);
                return data.mess;
            },
            error: (error) => {
                console.log(error);
                return error.mess;
            },
        });
    };

    return (
        <div>
            <div className="flex justify-center w-full ">
                <div className="container mt-5 mx-14">
                    <div className="wrapMainDash">
                        <div className={clsx(styles.topMain)}>
                            <div className={clsx(styles.itemTopMain)}>
                                <h4>List</h4>
                            </div>
                            <div className={clsx(styles.itemTopMain)}></div>
                        </div>

                        <div className="formGroup flex flex-col gap-3">
                            <div
                                className={clsx(
                                    styles.contentMain,
                                    "flex justify-between"
                                )}
                            >
                                <div
                                    className={clsx(
                                        styles.contentItem,
                                        "flex-auto flex"
                                    )}
                                >
                                    <div className={clsx(styles.formSelect)}>
                                        <label htmlFor="">Date</label>
                                        <Datepicker
                                            containerClassName="relative h-full"
                                            inputClassName="h-full border-gray-200 border pl-2 w-full rounded-md focus:ring-0 font-normal"
                                            value={value}
                                            onChange={handleValueChange}
                                        />
                                    </div>
                                </div>
                                <div
                                    className={clsx(
                                        styles.contentItem,
                                        "flex-auto"
                                    )}
                                >
                                    <div
                                        id="seachWrap"
                                        className={clsx(styles.search)}
                                    >
                                        <input
                                            onChange={handleSearchInputChange}
                                            id="searchInput"
                                            type="search"
                                            placeholder="Search.."
                                        />
                                    </div>
                                </div>
                            </div>
                            <div className={clsx(styles.mid)}>
                                <div
                                    className={clsx(
                                        styles.titleMid,
                                        "row rounded-lg"
                                    )}
                                >
                                    <div className="col-lg-1">Id</div>
                                    <div className="col-lg-3">Customer</div>
                                    <div className="col-lg-3">Content</div>
                                    <div className="col-lg-2">Create at</div>
                                    <div className="col-lg-2">Amount</div>
                                    <div className="col-lg-1">Action</div>
                                </div>
                                <div className={clsx(styles.containerData)}>
                                    {invoices &&
                                        invoices.map((invoice, index) => {
                                            const dateTime = new Date(
                                                invoice.date
                                            );
                                            const date =
                                                dateTime.toLocaleDateString();
                                            const time =
                                                dateTime.toLocaleTimeString();
                                            return (
                                                <div
                                                    key={index}
                                                    className={clsx(
                                                        styles.item,
                                                        "row rounded-lg"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.field,
                                                            "col-lg-1"
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                styles.name
                                                            )}
                                                        >
                                                            {invoice.id}
                                                        </div>
                                                    </div>
                                                    <div
                                                        className={clsx(
                                                            styles.field,
                                                            "col-lg-3 flex "
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                styles.cssImg
                                                            )}
                                                        >
                                                            <img
                                                                src={
                                                                    invoice.user
                                                                        .avatar
                                                                        ? invoice
                                                                              .user
                                                                              .avatar
                                                                        : avatar
                                                                }
                                                                alt=""
                                                            />
                                                        </div>
                                                        <div className="overflow-hidden">
                                                            <div
                                                                className={clsx(
                                                                    styles.name
                                                                )}
                                                            >
                                                                {invoice.user
                                                                    .firstName +
                                                                    " " +
                                                                    invoice.user
                                                                        .lastName}
                                                            </div>
                                                            <div
                                                                className={clsx(
                                                                    styles.categories
                                                                )}
                                                            >
                                                                {invoice.method}
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div
                                                        className={clsx(
                                                            styles.field,
                                                            "col-lg-3 flex text-sm"
                                                        )}
                                                    >
                                                        {invoice.content}
                                                    </div>
                                                    <div
                                                        className={clsx(
                                                            styles.field,
                                                            "col-lg-2"
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                styles.name
                                                            )}
                                                        >
                                                            {date}
                                                            <br />
                                                            {time}
                                                        </div>
                                                    </div>
                                                    <div
                                                        className={clsx(
                                                            styles.field,
                                                            "col-lg-2"
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                styles.name
                                                            )}
                                                        >
                                                            {invoice.price === 0
                                                                ? "Free"
                                                                : `${invoice.total.toLocaleString(
                                                                      "vi-VN"
                                                                  )} VND`}
                                                        </div>
                                                    </div>

                                                    <div
                                                        className={clsx(
                                                            styles.field,
                                                            "col-lg-1"
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                styles.name,
                                                                "flex gap-4"
                                                            )}
                                                        >
                                                            <button
                                                                type="button"
                                                                onClick={() =>
                                                                    handleRestoreInvoice(
                                                                        invoice.id
                                                                    )
                                                                }
                                                            >
                                                                <img
                                                                    src={
                                                                        restoreIcon
                                                                    }
                                                                    alt=""
                                                                />
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            );
                                        })}
                                    {!invoices ||
                                        (!invoices.length && (
                                            <div
                                                className={clsx(
                                                    styles.noData,
                                                    "flex flex-col justify-center text-center"
                                                )}
                                            >
                                                <img
                                                    src={noDataIcon}
                                                    alt=""
                                                    className={clsx(
                                                        styles.noDataImg,
                                                        "m-auto w-32"
                                                    )}
                                                />
                                                <span>No Data</span>
                                            </div>
                                        ))}
                                </div>
                                <div className={clsx(styles.footer)}>
                                    <div className={styles.footerItem}>
                                        Rows per page:
                                        <div className="b-shadow-light rounded-lg ml-2 w-24">
                                            <Listbox
                                                value={selectedSize}
                                                onChange={
                                                    handleSelectPageSizeChange
                                                }
                                            >
                                                <div className="relative mt-1">
                                                    <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white/75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
                                                        <span className="block truncate">
                                                            {selectedSize}
                                                        </span>
                                                        <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                                                            <ChevronUpDownIcon
                                                                className="h-5 w-5 text-gray-400"
                                                                aria-hidden="true"
                                                            />
                                                        </span>
                                                    </Listbox.Button>
                                                    <Transition
                                                        as={Fragment}
                                                        leave="transition ease-in duration-100"
                                                        leaveFrom="opacity-100"
                                                        leaveTo="opacity-0"
                                                    >
                                                        <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm">
                                                            {selectes.map(
                                                                (
                                                                    element,
                                                                    index
                                                                ) => (
                                                                    <Listbox.Option
                                                                        className={({
                                                                            active,
                                                                        }) =>
                                                                            `relative cursor-default select-none py-2 pl-10 pr-4 ${
                                                                                active
                                                                                    ? "bg-amber-100 text-amber-900"
                                                                                    : "text-gray-900"
                                                                            }`
                                                                        }
                                                                        value={
                                                                            element
                                                                        }
                                                                    >
                                                                        {({
                                                                            selected,
                                                                        }) => (
                                                                            <>
                                                                                <span
                                                                                    className={`block truncate ${
                                                                                        selected
                                                                                            ? "font-medium"
                                                                                            : "font-normal"
                                                                                    }`}
                                                                                >
                                                                                    {
                                                                                        element
                                                                                    }
                                                                                </span>
                                                                                {selected ? (
                                                                                    <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600">
                                                                                        <CheckIcon
                                                                                            className="h-5 w-5"
                                                                                            aria-hidden="true"
                                                                                        />
                                                                                    </span>
                                                                                ) : null}
                                                                            </>
                                                                        )}
                                                                    </Listbox.Option>
                                                                )
                                                            )}
                                                        </Listbox.Options>
                                                    </Transition>
                                                </div>
                                            </Listbox>
                                        </div>
                                    </div>
                                    <div className={clsx(styles.footerItem)}>
                                        <div className="mr-3">
                                            <span id="currentPage">
                                                {page * selectedSize + 1}-
                                                {totalData <
                                                page * selectedSize +
                                                    selectedSize
                                                    ? totalData
                                                    : page * selectedSize +
                                                      selectedSize}
                                            </span>
                                            <span> of </span>
                                            <span id="total">{totalData}</span>
                                        </div>
                                        <button
                                            disabled={page === 0}
                                            onClick={() =>
                                                handlePageData("previous")
                                            }
                                            className={clsx(
                                                styles.controlPage,
                                                {
                                                    [styles.disableControl]:
                                                        page === 0,
                                                }
                                            )}
                                        >
                                            <ChevronLeftIcon></ChevronLeftIcon>
                                        </button>
                                        <button
                                            disabled={
                                                page * selectedSize +
                                                    selectedSize >=
                                                totalData
                                            }
                                            onClick={() =>
                                                handlePageData("next")
                                            }
                                            className={clsx(
                                                styles.controlPage,
                                                {
                                                    [styles.disableControl]:
                                                        page * selectedSize +
                                                            selectedSize >=
                                                        totalData,
                                                }
                                            )}
                                        >
                                            <ChevronRightIcon></ChevronRightIcon>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default ListDeleteInvoice;

================
File: src/pages/admin/invoice/list/index.js
================
import clsx from "clsx";
import styles from "../../Course/list/List.module.scss";
import { Fragment, useEffect, useState } from "react";
import deleteIcon from "../../../../assets/images/delete.svg";
import noDataIcon from "../../../../assets/images/ic_noData.svg";
import { Listbox, Transition } from "@headlessui/react";
import {
    ChevronLeftIcon,
    ChevronRightIcon,
    ChevronUpDownIcon,
} from "@heroicons/react/20/solid";
import * as dataApi from "../../../../api/apiService/dataService";
import Modal from "../../../../component/modal";
import avatar from "../../../../assets/images/avatar_1.jpg";
import Datepicker from "react-tailwindcss-datepicker";
import moment from "moment/moment";
import { toast } from "sonner";

const selectes = [5, 10, 25];
let timerId;

function ListInvoice() {
    const [invoices, setInvoices] = useState([]);
    const [deletedModalOpen, setDeletedModalOpen] = useState(false);
    const [totalData, setTotalData] = useState(0);
    const [deleteId, setDeleteId] = useState(null);
    const [selectedSize, setSelectedSize] = useState(selectes[0]);
    const [page, setPage] = useState(0);
    const openDeleteModal = (id) => {
        setDeleteId(id);
        setDeletedModalOpen(true);
    };

    const handleRemoveInvoice = () => {
        const fetchApi = async () => {
            toast.promise(dataApi.softDeleteInvoice(deleteId), {
                loading: "Removing...",
                success: (data) => {
                    setInvoices(data.content.content);
                    console.log(data);
                    setTotalData(data.content.totalElements);
                    setDeletedModalOpen(false);
                    return "Remove successfully";
                },
                error: (error) => {
                    return error.content;
                },
            });
        };

        fetchApi();
    };

    const handleSearchInputChange = async (e) => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.searchInvoice(
                    e.target.value,
                    page,
                    selectedSize
                );
                setInvoices(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        const debounceApi = debounce(fetchApi, 300);
        debounceApi();
    };

    const handleCloseModal = () => {
        setDeletedModalOpen(false);
    };

    const handlePageData = async (action) => {
        const currentTotalData = page * selectedSize + selectedSize;
        let updatePage = page;
        if (action === "next" && currentTotalData < totalData) {
            updatePage += 1;
            setPage(updatePage);
        }
        if (action === "previous" && page > 0) {
            updatePage -= 1;
            setPage(updatePage);
        }
        fetchInvoicesUpdate(updatePage, selectedSize);
    };

    const debounce = (func, delay = 600) => {
        return () => {
            clearTimeout(timerId);
            timerId = setTimeout(() => {
                func();
            }, delay);
        };
    };

    const fetchInvoicesUpdate = async () => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllInvoiceByPage(
                    page,
                    selectedSize
                );
                setInvoices((prev) => result.content.content);
                setTotalData(result.content.totalElements);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };

    const handleSelectPageSizeChange = (size) => {
        setSelectedSize((prev) => size);
        fetchInvoicesUpdate(page, size);
    };

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getAllInvoice();
                setInvoices(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, []);
    const [show, setShow] = useState(false);
    const handleChange = (e) => {
        console.log(e);
    };
    const handleClose = () => {
        setShow(true);
    };

    const [value, setValue] = useState({
        startDate: new Date(),
        endDate: new Date().setMonth(11),
    });

    const handleValueChange = (newValue) => {
        if (newValue.startDate === null && newValue.endDate === null) {
            const fetchApi = async () => {
                try {
                    const result = await dataApi.getAllInvoice();
                    setInvoices(result.content.content);
                    console.log(result);
                } catch (error) {
                    console.log(error);
                }
            };
            fetchApi();
            return;
        }
        const tempStart = moment(newValue.startDate, "YYYY-MM-DD");
        const tempEnd = moment(newValue.endDate, "YYYY-MM-DD");
        const startDate = tempStart.format("YYYY-MM-DDTHH:mm:ss.SSS");
        const enđDate = tempEnd.format("YYYY-MM-DDTHH:mm:ss.SSS");
        const fetchApi = async () => {
            try {
                const result = await dataApi.getInvoicesByDate(
                    startDate,
                    enđDate,
                    page,
                    selectedSize
                );
                setInvoices(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
        setValue(newValue);
    };

    return (
        <div>
            <div className="flex justify-center w-full ">
                <div className="container mt-5 mx-14">
                    <div className="wrapMainDash">
                        <div className={clsx(styles.topMain)}>
                            <div className={clsx(styles.itemTopMain)}>
                                <h4>List</h4>
                            </div>
                            <div className={clsx(styles.itemTopMain)}></div>
                        </div>

                        <div className="formGroup flex flex-col gap-3">
                            <div
                                className={clsx(
                                    styles.contentMain,
                                    "flex justify-between"
                                )}
                            >
                                <div
                                    className={clsx(
                                        styles.contentItem,
                                        "flex-auto flex"
                                    )}
                                >
                                    <div className={clsx(styles.formSelect)}>
                                        <label htmlFor="">Date</label>
                                        <Datepicker
                                            containerClassName="relative h-full"
                                            inputClassName="h-full border-gray-200 border pl-2 w-full rounded-md focus:ring-0 font-normal"
                                            value={value}
                                            onChange={handleValueChange}
                                        />
                                    </div>
                                </div>
                                <div
                                    className={clsx(
                                        styles.contentItem,
                                        "flex-auto"
                                    )}
                                >
                                    <div
                                        id="seachWrap"
                                        className={clsx(styles.search)}
                                    >
                                        <input
                                            onChange={handleSearchInputChange}
                                            id="searchInput"
                                            type="search"
                                            placeholder="Search.."
                                        />
                                    </div>
                                </div>
                            </div>
                            <div className={clsx(styles.mid)}>
                                <div
                                    className={clsx(
                                        styles.titleMid,
                                        "row rounded-lg"
                                    )}
                                >
                                    <div className="col-lg-1">Id</div>
                                    <div className="col-lg-3">Customer</div>
                                    <div className="col-lg-3">Content</div>
                                    <div className="col-lg-2">Create at</div>
                                    <div className="col-lg-2">Amount</div>
                                    <div className="col-lg-1">Action</div>
                                </div>
                                <div className={clsx(styles.containerData)}>
                                    {invoices &&
                                        invoices.map((invoice, index) => {
                                            const dateTime = new Date(
                                                invoice.date
                                            );
                                            const date =
                                                dateTime.toLocaleDateString();
                                            const time =
                                                dateTime.toLocaleTimeString();
                                            return (
                                                <div
                                                    key={index}
                                                    className={clsx(
                                                        styles.item,
                                                        "row rounded-lg"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.field,
                                                            "col-lg-1"
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                styles.name
                                                            )}
                                                        >
                                                            {invoice.id}
                                                        </div>
                                                    </div>
                                                    <div
                                                        className={clsx(
                                                            styles.field,
                                                            "col-lg-3 flex "
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                styles.cssImg
                                                            )}
                                                        >
                                                            <img
                                                                src={
                                                                    invoice.user
                                                                        .avatar
                                                                        ? invoice
                                                                              .user
                                                                              .avatar
                                                                        : avatar
                                                                }
                                                                alt=""
                                                            />
                                                        </div>
                                                        <div className="overflow-hidden">
                                                            <div
                                                                className={clsx(
                                                                    styles.name
                                                                )}
                                                            >
                                                                {invoice.user
                                                                    .firstName +
                                                                    " " +
                                                                    invoice.user
                                                                        .lastName}
                                                            </div>
                                                            <div
                                                                className={clsx(
                                                                    styles.categories
                                                                )}
                                                            >
                                                                {invoice.method}
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div
                                                        className={clsx(
                                                            styles.field,
                                                            "col-lg-3 flex text-sm"
                                                        )}
                                                    >
                                                        {invoice.content}
                                                    </div>
                                                    <div
                                                        className={clsx(
                                                            styles.field,
                                                            "col-lg-2"
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                styles.name
                                                            )}
                                                        >
                                                            {date}
                                                            <br />
                                                            {time}
                                                        </div>
                                                    </div>
                                                    <div
                                                        className={clsx(
                                                            styles.field,
                                                            "col-lg-2"
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                styles.name
                                                            )}
                                                        >
                                                            {invoice.price === 0
                                                                ? "Free"
                                                                : `${invoice.total.toLocaleString(
                                                                      "vi-VN"
                                                                  )} VND`}
                                                        </div>
                                                    </div>

                                                    <div
                                                        className={clsx(
                                                            styles.field,
                                                            "col-lg-1"
                                                        )}
                                                    >
                                                        <div
                                                            className={clsx(
                                                                styles.name,
                                                                "flex gap-4"
                                                            )}
                                                        >
                                                            <button
                                                                onClick={() =>
                                                                    openDeleteModal(
                                                                        invoice.id
                                                                    )
                                                                }
                                                            >
                                                                <img
                                                                    src={
                                                                        deleteIcon
                                                                    }
                                                                    alt=""
                                                                    className="cursor-pointer"
                                                                />
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            );
                                        })}
                                    {!invoices ||
                                        (!invoices.length && (
                                            <div
                                                className={clsx(
                                                    styles.noData,
                                                    "flex flex-col justify-center text-center"
                                                )}
                                            >
                                                <img
                                                    src={noDataIcon}
                                                    alt=""
                                                    className={clsx(
                                                        styles.noDataImg,
                                                        "m-auto w-32"
                                                    )}
                                                />
                                                <span>No Data</span>
                                            </div>
                                        ))}
                                </div>
                                <div className={clsx(styles.footer)}>
                                    <div className={styles.footerItem}>
                                        Rows per page:
                                        <div className="b-shadow-light rounded-lg ml-2 w-24">
                                            <Listbox
                                                value={selectedSize}
                                                onChange={
                                                    handleSelectPageSizeChange
                                                }
                                            >
                                                <div className="relative mt-1">
                                                    <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white/75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
                                                        <span className="block truncate">
                                                            {selectedSize}
                                                        </span>
                                                        <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                                                            <ChevronUpDownIcon
                                                                className="h-5 w-5 text-gray-400"
                                                                aria-hidden="true"
                                                            />
                                                        </span>
                                                    </Listbox.Button>
                                                    <Transition
                                                        as={Fragment}
                                                        leave="transition ease-in duration-100"
                                                        leaveFrom="opacity-100"
                                                        leaveTo="opacity-0"
                                                    >
                                                        <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm">
                                                            {/* {selectes.map(
                                                                (
                                                                    element,
                                                                    index
                                                                ) => (
                                                                    <Listbox.Option
                                                                        className={({
                                                                            active,
                                                                        }) =>
                                                                            `relative cursor-default select-none py-2 pl-10 pr-4 ${
                                                                                active
                                                                                    ? "bg-amber-100 text-amber-900"
                                                                                    : "text-gray-900"
                                                                            }`
                                                                        }
                                                                        value={
                                                                            element
                                                                        }
                                                                    >
                                                                        {({
                                                                            selected,
                                                                        }) => (
                                                                            <>
                                                                                <span
                                                                                    className={`block truncate ${
                                                                                        selected
                                                                                            ? "font-medium"
                                                                                            : "font-normal"
                                                                                    }`}
                                                                                >
                                                                                    {
                                                                                        element
                                                                                    }
                                                                                </span>
                                                                                {selected ? (
                                                                                    <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600">
                                                                                        <CheckIcon
                                                                                            className="h-5 w-5"
                                                                                            aria-hidden="true"
                                                                                        />
                                                                                    </span>
                                                                                ) : null}
                                                                            </>
                                                                        )}
                                                                    </Listbox.Option>
                                                                )
                                                            )} */}
                                                        </Listbox.Options>
                                                    </Transition>
                                                </div>
                                            </Listbox>
                                        </div>
                                    </div>
                                    <div className={clsx(styles.footerItem)}>
                                        <div className="mr-3">
                                            <span id="currentPage">
                                                {page * selectedSize + 1}-
                                                {totalData <
                                                page * selectedSize +
                                                    selectedSize
                                                    ? totalData
                                                    : page * selectedSize +
                                                      selectedSize}
                                            </span>
                                            <span> of </span>
                                            <span id="total">{totalData}</span>
                                        </div>
                                        <button
                                            disabled={page === 0}
                                            onClick={() =>
                                                handlePageData("previous")
                                            }
                                            className={clsx(
                                                styles.controlPage,
                                                {
                                                    [styles.disableControl]:
                                                        page === 0,
                                                }
                                            )}
                                        >
                                            <ChevronLeftIcon></ChevronLeftIcon>
                                        </button>
                                        <button
                                            disabled={
                                                page * selectedSize +
                                                    selectedSize >=
                                                totalData
                                            }
                                            onClick={() =>
                                                handlePageData("next")
                                            }
                                            className={clsx(
                                                styles.controlPage,
                                                {
                                                    [styles.disableControl]:
                                                        page * selectedSize +
                                                            selectedSize >=
                                                        totalData,
                                                }
                                            )}
                                        >
                                            <ChevronRightIcon></ChevronRightIcon>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <Modal
                    isOpen={deletedModalOpen}
                    closeModal={handleCloseModal}
                    title={"Delete"}
                    description={"Are you sure want to delete?"}
                    handleRemove={handleRemoveInvoice}
                ></Modal>
            </div>
        </div>
    );
}

export default ListInvoice;

================
File: src/pages/admin/Test/WritingTask/Create/index.js
================
import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { createWritingTask, getWritingTaskById, updateWritingTask } from "../../../../../api/apiService/dataService";

export default function WritingTaskForm({ isEdit }) {
    const [form, setForm] = useState({ title: "", prompt: "", taskType: "TASK1" });
    const navigate = useNavigate();
    const { id } = useParams();

    useEffect(() => {
        if (isEdit && id) {
            fetchTask();
        }
    }, [isEdit, id]);

    const fetchTask = async () => {
        try {
            const response = await getWritingTaskById(id);
            setForm(response.content);
        } catch (error) {
            console.error("Error fetching task:", error);
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            if (isEdit) {
                await updateWritingTask(id, form);
            } else {
                await createWritingTask(form);
            }
            navigate("/admin/writing-task/list");
        } catch (error) {
            console.error("Error submitting task:", error);
        }
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setForm({ ...form, [name]: value });
    };

    return (
        <div className="container mx-auto p-6">
            <h1 className="text-2xl font-semibold mb-6">{isEdit ? "Edit" : "Create"} Writing Task</h1>
            <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
                    <input
                        type="text"
                        name="title"
                        value={form.title}
                        onChange={handleChange}
                        required
                        className="w-full px-3 py-2 border rounded shadow-sm focus:outline-none focus:ring focus:border-blue-300"
                    />
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Prompt</label>
                    <textarea
                        name="prompt"
                        value={form.prompt}
                        onChange={handleChange}
                        required
                        rows="5"
                        className="w-full px-3 py-2 border rounded shadow-sm focus:outline-none focus:ring focus:border-blue-300"
                    ></textarea>
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Task Type</label>
                    <select
                        name="taskType"
                        value={form.taskType}
                        onChange={handleChange}
                        className="w-full px-3 py-2 border rounded shadow-sm focus:outline-none focus:ring focus:border-blue-300"
                    >
                        <option value="TASK1">Task 1</option>
                        <option value="TASK2">Task 2</option>
                    </select>
                </div>
                <div className="flex items-center">
                    <button
                        type="submit"
                        className="mr-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                    >
                        {isEdit ? "Update" : "Create"}
                    </button>
                    <button
                        type="button"
                        onClick={() => navigate("/admin/writing-task/list")}
                        className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
                    >
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    );
}

================
File: src/pages/admin/Test/WritingTask/Edit/index.js
================
import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { createWritingTask, getWritingTaskById, updateWritingTask } from "../../../../../api/apiService/dataService";

export default function WritingTaskForm({ isEdit }) {
    const [form, setForm] = useState({ title: "", prompt: "", taskType: "TASK1" });
    const navigate = useNavigate();
    const { id } = useParams();

    useEffect(() => {
        if (isEdit && id) {
            fetchTask();
        }
    }, [isEdit, id]);

    const fetchTask = async () => {
        try {
            const response = await getWritingTaskById(id);
            setForm(response.content);
        } catch (error) {
            console.error("Error fetching task:", error);
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            if (isEdit) {
                await updateWritingTask(id, form);
            } else {
                await createWritingTask(form);
            }
            navigate("/admin/writing-task/list");
        } catch (error) {
            console.error("Error submitting task:", error);
        }
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setForm({ ...form, [name]: value });
    };

    return (
        <div className="container mx-auto p-6">
            <h1 className="text-2xl font-semibold mb-6">{isEdit ? "Edit" : "Create"} Writing Task</h1>
            <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
                    <input
                        type="text"
                        name="title"
                        value={form.title}
                        onChange={handleChange}
                        required
                        className="w-full px-3 py-2 border rounded shadow-sm focus:outline-none focus:ring focus:border-blue-300"
                    />
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Prompt</label>
                    <textarea
                        name="prompt"
                        value={form.prompt}
                        onChange={handleChange}
                        required
                        rows="5"
                        className="w-full px-3 py-2 border rounded shadow-sm focus:outline-none focus:ring focus:border-blue-300"
                    ></textarea>
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Task Type</label>
                    <select
                        name="taskType"
                        value={form.taskType}
                        onChange={handleChange}
                        className="w-full px-3 py-2 border rounded shadow-sm focus:outline-none focus:ring focus:border-blue-300"
                    >
                        <option value="TASK1">Task 1</option>
                        <option value="TASK2">Task 2</option>
                    </select>
                </div>
                <div className="flex items-center">
                    <button
                        type="submit"
                        className="mr-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                    >
                        {isEdit ? "Update" : "Create"}
                    </button>
                    <button
                        type="button"
                        onClick={() => navigate("/admin/writing-task/list")}
                        className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
                    >
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    );
}

================
File: src/pages/admin/Test/WritingTask/List/index.js
================
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { getAllWritingTasks, deleteWritingTask } from "../../../../../api/apiService/dataService";

export default function WritingTaskList() {
    const [tasks, setTasks] = useState([]);
    const navigate = useNavigate();

    useEffect(() => {
        fetchTasks();
    }, []);

    const fetchTasks = async () => {
        try {
            const response = await getAllWritingTasks();
            setTasks(response.content);
        } catch (error) {
            console.error("Error fetching tasks:", error);
        }
    };

    const handleDelete = async (id) => {
        if (window.confirm("Are you sure you want to delete this task?")) {
            await deleteWritingTask(id);
            fetchTasks();
        }
    };

    return (
        <div className="container mx-auto p-6">
            <h1 className="text-2xl font-semibold mb-6">Writing Tasks</h1>
            <button
                onClick={() => navigate("/admin/writing-task/create")}
                className="mb-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
                Create New Task
            </button>
            <div className="overflow-x-auto">
                <table className="min-w-full bg-white shadow rounded-lg">
                    <thead>
                        <tr>
                            <th className="py-2 px-4 border-b text-left">ID</th>
                            <th className="py-2 px-4 border-b text-left">Title</th>
                            <th className="py-2 px-4 border-b text-left">Prompt</th>
                            <th className="py-2 px-4 border-b text-left">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {tasks.map((task) => (
                            <tr key={task.id} className="hover:bg-gray-100">
                                <td className="py-2 px-4 border-b">{task.id}</td>
                                <td className="py-2 px-4 border-b">{task.title}</td>
                                <td className="py-2 px-4 border-b">{task.prompt}</td>
                                <td className="py-2 px-4 border-b">
                                    <button
                                        onClick={() => navigate(`/admin/writing-task/edit/${task.id}`)}
                                        className="mr-2 px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600"
                                    >
                                        Edit
                                    </button>
                                    <button
                                        onClick={() => handleDelete(task.id)}
                                        className="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600"
                                    >
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
}

================
File: src/pages/admin/user/create/index.js
================
import * as React from "react";
import { useState, useEffect } from "react";
import * as authService from "../../../../api/apiService/authService.js";
import { toast } from "sonner";
import eyeSlash from "../../../../assets/images/eye-slash.png";
import styles from "../../../login/Login.module.scss";
import clsx from "clsx";

const initFormData = {
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    confirmPassword: "",
};

export default function CreateUser() {
    const [countdown, setCountdown] = useState(0);
    const [formData, setFormData] = useState(initFormData);
    const [errors, setErrors] = useState({});

    useEffect(() => {
        if (countdown > 0) {
            const timer = setInterval(() => {
                setCountdown((prevCount) => prevCount - 1);
            }, 1000);
            return () => clearInterval(timer);
        }
    }, [countdown]);

    function handleInputChange(event) {
        const { name, value } = event.target;
        if (name === "email") {
            setCountdown(0);
        }
        setFormData({
            ...formData,
            [name]: value,
        });
        errors[name] = "";
        setErrors(errors);
    }

    function handleSubmit(event) {
        event.preventDefault();
        const errors = {};

        Object.keys(formData).forEach((key) => {
            if (!formData[key]) {
                errors[key] = "This field is required.";
            }
        });

        if (!isPasswordStrong(formData.password)) {
            errors.password =
                "Password must have at least 8 characters, including uppercase, normal, and special characters like #@!$...";
        }

        if (
            formData["confirmPassword"] !== "" &&
            formData["password"] !== "" &&
            formData["confirmPassword"] !== formData["password"]
        ) {
            errors.confirmPassword = "Confirm password doesn't match";
        }
        if (Object.keys(errors).length > 0) {
            setErrors(errors);
            return;
        }
        const fetchApi = async () => {
            toast.promise(authService.register({ ...formData }), {
                loading: "Loading...",
                success: (result) => {
                    setFormData(initFormData);
                    return "Create user successfully";
                },
                error: "Error registering",
            });
        };
        fetchApi();
    }

    function isPasswordStrong(password) {
        const passwordRegex =
            /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+])[A-Za-z\d!@#$%^&*()_+]{8,}$/;
        return passwordRegex.test(password);
    }

    function handleShowPassword(e, name) {
        let passInput = document.getElementById(name);

        if (passInput.type === "password") {
            passInput.type = "text";
            e.target.src =
                "https://cdn.builder.io/api/v1/image/assets/TEMP/a8819b1cf48d19a6e95bc57cb5d373ec0162742f3cfe62b7ec31b90b0b48de06?apiKey=9349475655ee4a448868f824f5feb11d&";
        } else {
            passInput.type = "password";
            e.target.src = eyeSlash;
        }
    }

    return (
        <div className="w-full flex">
            <section className="boxShadow m-auto  flex flex-col p-10 mt-10 max-w-full text-base leading-6 bg-white rounded-xl text-neutral-800 w-[540px] max-md:px-5 max-md:mt-10">
                <h2 className="text-4xl font-semibold text-center max-md:max-w-full">
                    Create User
                </h2>

                <form onSubmit={handleSubmit} method="post">
                    <div className="flex mt-10">
                        <div className="flex-1 mr-5">
                            <div className="text-left">
                                <label
                                    htmlFor="firstName"
                                    className="font-medium max-md:max-w-full"
                                >
                                    First Name
                                </label>
                                <input
                                    type="text"
                                    id="firstName"
                                    name="firstName"
                                    placeholder="Enter your First Name"
                                    value={formData.firstName}
                                    onChange={handleInputChange}
                                    className={clsx(
                                        styles.input,
                                        `justify-center p-2.5 mt-2.5 
                                    bg-white text-sm rounded-lg  
                                    text-stone-500 max-md:max-w-full w-full outline-none`
                                    )}
                                />
                                {errors.firstName !== "" && (
                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                        {errors.firstName}
                                    </div>
                                )}
                            </div>
                        </div>
                        <div className={clsx("flex-1 ml-5")}>
                            <div className="text-left">
                                <label
                                    htmlFor="lastName"
                                    className="font-medium max-md:max-w-full"
                                >
                                    Last Name
                                </label>
                                <input
                                    type="text"
                                    id="lastName"
                                    name="lastName"
                                    placeholder="Enter your Last Name"
                                    value={formData.lastName}
                                    onChange={handleInputChange}
                                    className={clsx(
                                        styles.input,
                                        `justify-center p-2.5 mt-2.5 
                                    bg-white text-sm rounded-lg  
                                    text-stone-500 max-md:max-w-full w-full outline-none`
                                    )}
                                />
                                {errors.lastName && (
                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                        {errors.lastName}
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                    <div className={clsx(styles.fieldForm, "text-left")}>
                        <label
                            htmlFor="email"
                            className="font-medium max-md:max-w-full"
                        >
                            Email
                        </label>
                        <div
                            className={clsx(
                                styles.input,
                                "flex p-2.5 mt-2.5 bg-white text-sm rounded-lg text-stone-500 max-md:flex-wrap"
                            )}
                        >
                            <input
                                type="email"
                                id="email"
                                name="email"
                                value={formData.email}
                                onChange={handleInputChange}
                                placeholder="Enter your Email"
                                className="flex-1 bg-transparent outline-none"
                            />
                        </div>
                        {errors.email && (
                            <div className="text-red-500 mt-1 text-sm ml-1">
                                {errors.email}
                            </div>
                        )}
                    </div>
                    <div className={clsx(styles.fieldForm, "text-left")}>
                        <label
                            htmlFor="password"
                            className="font-medium max-md:max-w-full"
                        >
                            Password
                        </label>
                        <div
                            className={clsx(
                                styles.input,
                                "flex p-2.5 mt-2.5 bg-white text-sm rounded-lg text-stone-500 max-md:flex-wrap"
                            )}
                        >
                            <input
                                type="password"
                                id="password"
                                name="password"
                                value={formData.password}
                                onChange={handleInputChange}
                                placeholder="Enter your Password"
                                className="flex-1 bg-transparent outline-none"
                            />
                            <img
                                loading="lazy"
                                src="https://cdn.builder.io/api/v1/image/assets/TEMP/a8819b1cf48d19a6e95bc57cb5d373ec0162742f3cfe62b7ec31b90b0b48de06?apiKey=9349475655ee4a448868f824f5feb11d&"
                                alt="Eye icon"
                                className="cursor-pointer shrink-0 w-6 aspect-square"
                                onClick={(e) =>
                                    handleShowPassword(e, "password")
                                }
                            />
                        </div>

                        {errors.password && (
                            <div className="text-red-500 mt-1 text-sm ml-1">
                                {errors.password}
                            </div>
                        )}
                    </div>
                    <div className={clsx(styles.fieldForm, "text-left")}>
                        <label
                            htmlFor="confirmPassword"
                            className="font-medium max-md:max-w-full"
                        >
                            Confirm Password
                        </label>
                        <div
                            className={clsx(
                                styles.input,
                                "flex p-2.5 mt-2.5 bg-white text-sm rounded-lg text-stone-500 max-md:flex-wrap"
                            )}
                        >
                            <input
                                type="password"
                                name="confirmPassword"
                                id="confirmPassword"
                                value={formData.confirmPassword}
                                onChange={handleInputChange}
                                placeholder="Enter your confirm Password"
                                className="flex-1 bg-transparent outline-none"
                            />
                            <img
                                loading="lazy"
                                src="https://cdn.builder.io/api/v1/image/assets/TEMP/a8819b1cf48d19a6e95bc57cb5d373ec0162742f3cfe62b7ec31b90b0b48de06?apiKey=9349475655ee4a448868f824f5feb11d&"
                                alt="Eye icon"
                                className="cursor-pointer shrink-0 w-6 aspect-square"
                                onClick={(e) =>
                                    handleShowPassword(e, "confirmPassword")
                                }
                            />
                        </div>

                        {errors.confirmPassword && (
                            <div className="text-red-500 mt-1 text-sm ml-1">
                                {errors.confirmPassword}
                            </div>
                        )}
                    </div>
                    <button
                        type="submit"
                        className="justify-center px-5 py-3.5 mt-5 text-sm font-medium text-center text-white bg-black rounded-lg max-md:max-w-full w-full"
                    >
                        Sign Up
                    </button>
                </form>
            </section>
        </div>
    );
}

================
File: src/pages/admin/user/historyDeleted/index.js
================
import styles from "../../Course/list/List.module.scss";
import clsx from "clsx";
import avatar from "../../../../assets/images/avatar_25.jpg";
import noDataIcon from "../../../../assets/images/ic_noData.svg";
import restoreIcon from "../../../../assets/images/restore.svg";
import { Fragment, useEffect, useRef, useState } from "react";
import * as authApi from "../../../../api/apiService/authService";
import Select from "react-select";
import { toast } from "sonner";
import { Dialog, Listbox, Transition } from "@headlessui/react";
import {
    CheckIcon,
    ChevronUpDownIcon,
    ChevronLeftIcon,
    ChevronRightIcon,
} from "@heroicons/react/20/solid";
import { render } from "@testing-library/react";

const selectes = [5, 10, 25];

function ListDeletedUser() {
    const [users, setUsers] = useState([]);
    const [options, setOptions] = useState([]);
    const [selected, setSelected] = useState(selectes[0]);
    const [page, setPage] = useState(0);
    const [totalData, setTotalData] = useState(0);
    const [deletedModalOpen, setDeletedModalOpen] = useState(false);
    const [deleteId, setDeleteId] = useState(null);
    const [reRender, setReRender] = useState();
    const firstRender = useRef(true);

    const handleRemoveUser = () => {
        const fetchApi = async () => {
            toast.promise(authApi.hardDeleteUser(deleteId), {
                loading: "Removing...",
                success: () => {
                    setReRender(!render);
                    setDeletedModalOpen(false);
                    return "Remove successfully";
                },
                error: (error) => {
                    return error.content;
                },
            });
        };

        fetchApi();
    };

    const handleSelectChange = (e) => {
        const fetchApi = async () => {
            try {
                var result = await authApi.getUserByRole(
                    e.name,
                    page,
                    selected
                );
                setUsers(result.content.content);
                setTotalData(result.content.totalElements);
            } catch (error) {
                console.log(error);
            }
        };
        const debounceApi = debounce(fetchApi, 300);
        debounceApi();
    };

    const handleSearchInputChange = (e) => {
        const fetchApi = async () => {
            try {
                const result = await authApi.getUserByName(
                    e.target.value,
                    page,
                    selected,
                    true
                );
                setUsers(result.content.content);
                setTotalData(result.content.totalElements);
            } catch (error) {
                console.log(error);
            }
        };
        const debounceApi = debounce(fetchApi, 1000);
        debounceApi();
    };

    const handleSelectPageSizeChange = (size) => {
        setSelected(size);
        const fetchApi = async () => {
            try {
                const result = await authApi.getUserByPage(page, size);
                setUsers(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };

    let timerId;

    const debounce = (func, delay = 600) => {
        return () => {
            clearTimeout(timerId);
            timerId = setTimeout(() => {
                func();
            }, delay);
        };
    };

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await authApi.getAllUserAndRole(true);
                let array = [];
                result.content.roles.map((value, index) =>
                    array.push({ id: index, name: value })
                );
                array.push({ id: "-1", name: "All" });
                setTotalData(result.content.users.totalElements);
                setOptions(array);
                setUsers(result.content.users.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, [reRender]);

    useEffect(() => {
        if (firstRender.current) {
            firstRender.current = false;
            return;
        }
        const fetchApi = async () => {
            try {
                const result = await authApi.getAllDeletedUser(page, selected);
                setUsers(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, [page]);

    const handleRestoreUser = (id) => {
        toast.promise(authApi.restoreUserById(id), {
            loading: "loading...",
            success: (data) => {
                setReRender(!reRender);
                return data.mess;
            },
            error: (error) => {
                console.log(error);
                return error.mess;
            },
        });
    };

    const handlePageData = async (action) => {
        const currentTotalData = page * selected + selected;
        if (action === "next" && currentTotalData < totalData) {
            console.log("a");
            setPage((prev) => prev + 1);
        }
        if (action === "previous" && page > 0) {
            setPage((prev) => prev - 1);
        }
    };

    const handleCloseModal = () => {
        setDeletedModalOpen(false);
    };

    return (
        <div className="flex justify-center w-full ">
            <div className="container mt-5 mx-14">
                <div className="wrapMainDash">
                    <div className={clsx(styles.topMain)}>
                        <div className={clsx(styles.itemTopMain)}>
                            <h4>HISTORy DELETED USER</h4>
                        </div>
                    </div>

                    <div className="formGroup flex flex-col gap-3">
                        <div
                            className={clsx(
                                styles.contentMain,
                                "flex justify-between"
                            )}
                        >
                            <div className={clsx(styles.contentItem)}>
                                <div
                                    // className={clsx(styles.cbb)
                                    className={clsx(styles.formSelect)}
                                >
                                    <label htmlFor="">Role</label>
                                    <Select
                                        onChange={handleSelectChange}
                                        getOptionLabel={(x) => x.name}
                                        getOptionValue={(x) => x.id}
                                        options={options}
                                        styles={{
                                            control: (baseStyles, state) => ({
                                                ...baseStyles,
                                                borderColor: state.isFocused
                                                    ? "black"
                                                    : "#e9ecee",
                                            }),
                                        }}
                                    />
                                </div>
                            </div>
                            <div className={clsx(styles.contentItem, "flex-1")}>
                                <div
                                    id="seachWrap"
                                    className={clsx(styles.search)}
                                >
                                    <input
                                        onChange={handleSearchInputChange}
                                        id="searchInput"
                                        type="search"
                                        placeholder="Search.."
                                    />
                                </div>
                            </div>
                        </div>
                        <div className={clsx(styles.mid)}>
                            <div
                                className={clsx(
                                    styles.titleMid,
                                    "row rounded-lg"
                                )}
                            >
                                <div className="col-lg-1">Id</div>
                                <div className="col-lg-5">User</div>
                                <div className="col-lg-2">Phone Number</div>
                                <div className="col-lg-2">Role</div>
                                <div className="col-lg-2">Action</div>
                            </div>
                            <div className={clsx(styles.containerData)}>
                                {users &&
                                    users.map((element, index) => {
                                        return (
                                            <div
                                                key={index}
                                                className={clsx(
                                                    styles.item,
                                                    "row rounded-lg"
                                                )}
                                            >
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-1"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {element.id}
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-5 flex "
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.cssImg
                                                        )}
                                                    >
                                                        <img
                                                            src={
                                                                !element.avatar
                                                                    ? avatar
                                                                    : element.avatar
                                                            }
                                                            alt=""
                                                        />
                                                    </div>
                                                    <div className="overflow-hidden">
                                                        <div
                                                            className={clsx(
                                                                styles.name
                                                            )}
                                                        >
                                                            {element.firstName +
                                                                " " +
                                                                element.lastName}
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                styles.categories
                                                            )}
                                                        >
                                                            {element.email}
                                                        </div>
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {element.phoneNumber}
                                                        {!element.phoneNumber &&
                                                            "empty"}
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {element.role}
                                                    </div>
                                                </div>

                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name,
                                                            "flex gap-4"
                                                        )}
                                                    >
                                                        <button
                                                            type="button"
                                                            onClick={() =>
                                                                handleRestoreUser(
                                                                    element.id
                                                                )
                                                            }
                                                        >
                                                            <img
                                                                src={
                                                                    restoreIcon
                                                                }
                                                                alt=""
                                                            />
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        );
                                    })}
                                {!users.length && (
                                    <div
                                        className={clsx(
                                            styles.noData,
                                            "flex flex-col justify-center text-center"
                                        )}
                                    >
                                        <img
                                            src={noDataIcon}
                                            alt=""
                                            className={clsx(
                                                styles.noDataImg,
                                                "m-auto w-32"
                                            )}
                                        />
                                        <span>No Data</span>
                                    </div>
                                )}
                            </div>
                            <div className={clsx(styles.footer)}>
                                <div className={styles.footerItem}>
                                    Rows per page:
                                    <div className="b-shadow-light rounded-lg ml-2 w-24">
                                        <Listbox
                                            value={selected}
                                            onChange={
                                                handleSelectPageSizeChange
                                            }
                                        >
                                            <div className="relative mt-1">
                                                <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white/75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
                                                    <span className="block truncate">
                                                        {selected}
                                                    </span>
                                                    <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                                                        <ChevronUpDownIcon
                                                            className="h-5 w-5 text-gray-400"
                                                            aria-hidden="true"
                                                        />
                                                    </span>
                                                </Listbox.Button>
                                                <Transition
                                                    as={Fragment}
                                                    leave="transition ease-in duration-100"
                                                    leaveFrom="opacity-100"
                                                    leaveTo="opacity-0"
                                                >
                                                    <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm">
                                                        {selectes.map(
                                                            (
                                                                element,
                                                                index
                                                            ) => (
                                                                <Listbox.Option
                                                                    key={index}
                                                                    className={({
                                                                        active,
                                                                    }) =>
                                                                        `relative cursor-default select-none py-2 pl-10 pr-4 ${
                                                                            active
                                                                                ? "bg-amber-100 text-amber-900"
                                                                                : "text-gray-900"
                                                                        }`
                                                                    }
                                                                    value={
                                                                        element
                                                                    }
                                                                >
                                                                    {({
                                                                        selected,
                                                                    }) => (
                                                                        <>
                                                                            <span
                                                                                className={`block truncate ${
                                                                                    selected
                                                                                        ? "font-medium"
                                                                                        : "font-normal"
                                                                                }`}
                                                                            >
                                                                                {
                                                                                    element
                                                                                }
                                                                            </span>
                                                                            {selected ? (
                                                                                <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600">
                                                                                    <CheckIcon
                                                                                        className="h-5 w-5"
                                                                                        aria-hidden="true"
                                                                                    />
                                                                                </span>
                                                                            ) : null}
                                                                        </>
                                                                    )}
                                                                </Listbox.Option>
                                                            )
                                                        )}
                                                    </Listbox.Options>
                                                </Transition>
                                            </div>
                                        </Listbox>
                                    </div>
                                </div>
                                <div className={clsx(styles.footerItem)}>
                                    <div className="mr-3">
                                        {" "}
                                        <span id="currentPage">
                                            {page * selected + 1}-
                                            {totalData <
                                            page * selected + selected
                                                ? totalData
                                                : page * selected + selected}
                                        </span>
                                        <span> of </span>
                                        <span id="total">{totalData}</span>
                                    </div>
                                    <button
                                        disabled={page === 0}
                                        onClick={() =>
                                            handlePageData("previous")
                                        }
                                        className={clsx(styles.controlPage, {
                                            [styles.disableControl]: page === 0,
                                        })}
                                    >
                                        <ChevronLeftIcon></ChevronLeftIcon>
                                    </button>
                                    <button
                                        disabled={
                                            page * selected + selected >=
                                            totalData
                                        }
                                        onClick={() => handlePageData("next")}
                                        className={clsx(styles.controlPage, {
                                            [styles.disableControl]:
                                                page * selected + selected >=
                                                totalData,
                                        })}
                                    >
                                        <ChevronRightIcon></ChevronRightIcon>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <Transition appear show={deletedModalOpen} as={Fragment}>
                <Dialog
                    as="div"
                    className="relative z-10"
                    onClose={handleCloseModal}
                >
                    <Transition.Child
                        as={Fragment}
                        enter="ease-out duration-300"
                        enterFrom="opacity-0"
                        enterTo="opacity-100"
                        leave="ease-in duration-200"
                        leaveFrom="opacity-100"
                        leaveTo="opacity-0"
                    >
                        <div className="fixed inset-0 bg-black bg-opacity-25" />
                    </Transition.Child>

                    <div className="fixed inset-0 overflow-y-auto overlay">
                        <div className="flex min-h-full items-center justify-center p-4 text-center">
                            <Transition.Child
                                as={Fragment}
                                enter="ease-out duration-300"
                                enterFrom="opacity-0 scale-95"
                                enterTo="opacity-100 scale-100"
                                leave="ease-in duration-200"
                                leaveFrom="opacity-100 scale-100"
                                leaveTo="opacity-0 scale-95"
                            >
                                <Dialog.Panel className="z-50 w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                                    <h2 className={styles.titleModal}>
                                        Delete
                                    </h2>
                                    <div
                                        className={clsx(
                                            styles.descModal,
                                            "mt-3"
                                        )}
                                    >
                                        Are you sure want to delete?
                                    </div>
                                    <div
                                        className={clsx(
                                            "flex justify-end mt-4"
                                        )}
                                    >
                                        <button
                                            onClick={handleRemoveUser}
                                            className={clsx("btnModal delete")}
                                        >
                                            Delete
                                        </button>
                                        <button
                                            onClick={handleCloseModal}
                                            className={clsx("btnModal cancel")}
                                        >
                                            Cancel
                                        </button>
                                    </div>
                                </Dialog.Panel>
                            </Transition.Child>
                        </div>
                    </div>
                </Dialog>
            </Transition>
        </div>
    );
}

export default ListDeletedUser;

================
File: src/pages/admin/user/list/index.js
================
import styles from "../../Course/list/List.module.scss";
import clsx from "clsx";
import { Link } from "react-router-dom";
import deleteIcon from "../../../../assets/images/delete.svg";
import viewIcon from "../../../../assets/images/view.svg";
import avatar from "../../../../assets/images/avatar_25.jpg";
import noDataIcon from "../../../../assets/images/ic_noData.svg";
import editIcon from "../../../../assets/images/edit.svg";
import { Fragment, useEffect, useRef, useState } from "react";
import * as authApi from "../../../../api/apiService/authService";
import Select from "react-select";
import { toast } from "sonner";
import { Dialog, Listbox, Transition } from "@headlessui/react";
import {
    CheckIcon,
    ChevronUpDownIcon,
    ChevronLeftIcon,
    ChevronRightIcon,
} from "@heroicons/react/20/solid";

const selectes = [5, 10, 25];

function ListUser() {
    const [users, setUsers] = useState([]);
    const [options, setOptions] = useState([]);
    const [selected, setSelected] = useState(selectes[0]);
    const [page, setPage] = useState(0);
    const [totalData, setTotalData] = useState(0);
    const [deletedModalOpen, setDeletedModalOpen] = useState(false);
    const [deleteId, setDeleteId] = useState(null);
    const [update, setUpdate] = useState();
    const firstRender = useRef(true);

    const handleRemoveUser = () => {
        const fetchApi = async () => {
            toast.promise(authApi.softDeleteUser(deleteId), {
                loading: "Removing...",
                success: () => {
                    setUpdate(!update);
                    setDeletedModalOpen(false);
                    return "Delete successfully";
                },
                error: (error) => {
                    return error.mess;
                },
            });
        };

        fetchApi();
    };

    const handleSelectChange = (e) => {
        const fetchApi = async () => {
            try {
                const result = await authApi.getUserByRole(
                    e.name,
                    page,
                    selected
                );
                setUsers(result.content.content);
            } catch (error) {
                console.log(error);
                toast.error(error.mess);
            }
        };

        const debounceApi = debounce(fetchApi);
        debounceApi();
    };

    const handleSearchInputChange = (e) => {
        const fetchApi = async () => {
            const data = await authApi.getUserByName(
                e.target.value,
                page,
                selected
            );
            setUsers(data.content.content);
            setTotalData(data.content.totalElements);
        };
        const debounceApi = debounce(fetchApi, 300);
        debounceApi();
    };

    const handleSelectPageSizeChange = (size) => {
        setSelected(size);
        const fetchApi = async () => {
            try {
                const result = await authApi.getUserByPage(page, size);
                setUsers(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    };

    let timerId;

    const debounce = (func, delay = 600) => {
        return () => {
            clearTimeout(timerId);
            timerId = setTimeout(() => {
                func();
            }, delay);
        };
    };

    useEffect(() => {
        const fetchApi = async () => {
            try {
                let array = [];
                const result = await authApi.getAllUserAndRole();
                console.log(result.content);
                result.content.roles.map((value, index) =>
                    array.push({ id: index, name: value })
                );
                array.push({ id: "-1", name: "All" });
                setTotalData(result.content.users.totalElements);
                setOptions(array);
                setUsers(result.content.users.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, [update]);

    useEffect(() => {
        if (firstRender.current) {
            firstRender.current = false;
            return;
        }
        const fetchApi = async () => {
            try {
                const result = await authApi.getUserByPage(page, selected);
                setUsers(result.content.content);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, [page]);

    const handlePageData = async (action) => {
        const currentTotalData = page * selected + selected;
        if (action === "next" && currentTotalData < totalData) {
            setPage((prev) => prev + 1);
        }
        if (action === "previous" && page > 0) {
            setPage((prev) => prev - 1);
        }
    };

    const handleCloseModal = () => {
        setDeletedModalOpen(false);
    };

    const openDeleteModal = (id) => {
        setDeleteId(id);
        setDeletedModalOpen(true);
    };

    return (
        <div className="flex justify-center w-full ">
            <div className="container mt-5 mx-14">
                <div className="wrapMainDash">
                    <div className={clsx(styles.topMain)}>
                        <div className={clsx(styles.itemTopMain)}>
                            <h4>LIST USER</h4>
                        </div>
                        <div className={clsx(styles.itemTopMain)}>
                            <Link to={"/sign-up"} className={styles.btnCreate}>
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    aria-hidden="true"
                                    role="img"
                                    className="component-iconify MuiBox-root css-1t9pz9x iconify iconify--mingcute"
                                    width="20px"
                                    height="20px"
                                    viewBox="0 0 24 24"
                                >
                                    <g fill="none">
                                        <path d="M24 0v24H0V0zM12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427c-.002-.01-.009-.017-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093c.012.004.023 0 .029-.008l.004-.014l-.034-.614c-.003-.012-.01-.02-.02-.022m-.715.002a.023.023 0 0 0-.027.006l-.006.014l-.034.614c0 .012.007.02.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z"></path>
                                        <path
                                            fill="currentColor"
                                            d="M11 20a1 1 0 1 0 2 0v-7h7a1 1 0 1 0 0-2h-7V4a1 1 0 1 0-2 0v7H4a1 1 0 1 0 0 2h7z"
                                        ></path>
                                    </g>
                                </svg>
                                New User
                            </Link>
                        </div>
                    </div>

                    <div className="formGroup flex flex-col gap-3">
                        <div
                            className={clsx(
                                styles.contentMain,
                                "flex justify-between"
                            )}
                        >
                            <div className={clsx(styles.contentItem)}>
                                <div
                                    // className={clsx(styles.cbb)
                                    className={clsx(styles.formSelect)}
                                >
                                    <label htmlFor="">Role</label>
                                    <Select
                                        onChange={handleSelectChange}
                                        getOptionLabel={(x) => x.name}
                                        getOptionValue={(x) => x.id}
                                        options={options}
                                        styles={{
                                            control: (baseStyles, state) => ({
                                                ...baseStyles,
                                                borderColor: state.isFocused
                                                    ? "black"
                                                    : "#e9ecee",
                                            }),
                                        }}
                                    />
                                </div>
                            </div>
                            <div className={clsx(styles.contentItem, "flex-1")}>
                                <div
                                    id="seachWrap"
                                    className={clsx(styles.search)}
                                >
                                    <input
                                        onChange={handleSearchInputChange}
                                        id="searchInput"
                                        type="search"
                                        placeholder="Search.."
                                    />
                                </div>
                            </div>
                        </div>
                        <div className={clsx(styles.mid)}>
                            <div
                                className={clsx(
                                    styles.titleMid,
                                    "row rounded-lg"
                                )}
                            >
                                <div className="col-lg-1">Id</div>
                                <div className="col-lg-5">User</div>
                                <div className="col-lg-2">Phone Number</div>
                                <div className="col-lg-2">Role</div>
                                <div className="col-lg-2">Action</div>
                            </div>
                            <div className={clsx(styles.containerData)}>
                                {users &&
                                    users.map((element, index) => {
                                        return (
                                            <div
                                                key={index}
                                                className={clsx(
                                                    styles.item,
                                                    "row rounded-lg"
                                                )}
                                            >
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-1"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {element.id}
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-5 flex "
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.cssImg
                                                        )}
                                                    >
                                                        <img
                                                            src={
                                                                !element.avatar
                                                                    ? avatar
                                                                    : element.avatar
                                                            }
                                                            alt=""
                                                        />
                                                    </div>
                                                    <div className="overflow-hidden">
                                                        <div
                                                            className={clsx(
                                                                styles.name
                                                            )}
                                                        >
                                                            {element.firstName +
                                                                " " +
                                                                element.lastName}
                                                        </div>
                                                        <div
                                                            className={clsx(
                                                                styles.categories
                                                            )}
                                                        >
                                                            {element.email}
                                                        </div>
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name
                                                        )}
                                                    >
                                                        {element.phoneNumber}
                                                        {!element.phoneNumber &&
                                                            "empty"}
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name,
                                                            {
                                                                [styles.admin]: true,
                                                            }
                                                        )}
                                                    >
                                                        {/* {element.role &&
                                                                element.role.map(
                                                                    (
                                                                        r,
                                                                        index
                                                                    ) => r
                                                                )
                                                                } */}

                                                        {element.role}
                                                    </div>
                                                </div>

                                                <div
                                                    className={clsx(
                                                        styles.field,
                                                        "col-lg-2"
                                                    )}
                                                >
                                                    <div
                                                        className={clsx(
                                                            styles.name,
                                                            "flex gap-4"
                                                        )}
                                                    >
                                                        <Link
                                                            to={`/admin/user/view/${element.email}`}
                                                        >
                                                            <img
                                                                src={editIcon}
                                                                alt=""
                                                            />
                                                        </Link>

                                                        <button
                                                            onClick={() =>
                                                                openDeleteModal(
                                                                    element.id
                                                                )
                                                            }
                                                        >
                                                            <img
                                                                src={deleteIcon}
                                                                alt=""
                                                                className="cursor-pointer"
                                                            />
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        );
                                    })}
                                {users.length === 0 && (
                                    <div
                                        className={clsx(
                                            styles.noData,
                                            "flex flex-col justify-center text-center"
                                        )}
                                    >
                                        <img
                                            src={noDataIcon}
                                            alt=""
                                            className={clsx(
                                                styles.noDataImg,
                                                "m-auto w-32"
                                            )}
                                        />
                                        <span>No Data</span>
                                    </div>
                                )}
                            </div>
                            <div className={clsx(styles.footer)}>
                                <div className={styles.footerItem}>
                                    Rows per page:
                                    <div className="b-shadow-light rounded-lg ml-2 w-24">
                                        <Listbox
                                            value={selected}
                                            onChange={
                                                handleSelectPageSizeChange
                                            }
                                        >
                                            <div className="relative mt-1">
                                                <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white/75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
                                                    <span className="block truncate">
                                                        {selected}
                                                    </span>
                                                    <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                                                        <ChevronUpDownIcon
                                                            className="h-5 w-5 text-gray-400"
                                                            aria-hidden="true"
                                                        />
                                                    </span>
                                                </Listbox.Button>
                                                <Transition
                                                    as={Fragment}
                                                    leave="transition ease-in duration-100"
                                                    leaveFrom="opacity-100"
                                                    leaveTo="opacity-0"
                                                >
                                                    <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm">
                                                        {selectes.map(
                                                            (
                                                                element,
                                                                index
                                                            ) => (
                                                                <Listbox.Option
                                                                    key={index}
                                                                    className={({
                                                                        active,
                                                                    }) =>
                                                                        `relative cursor-default select-none py-2 pl-10 pr-4 ${
                                                                            active
                                                                                ? "bg-amber-100 text-amber-900"
                                                                                : "text-gray-900"
                                                                        }`
                                                                    }
                                                                    value={
                                                                        element
                                                                    }
                                                                >
                                                                    {({
                                                                        selected,
                                                                    }) => (
                                                                        <>
                                                                            <span
                                                                                className={`block truncate ${
                                                                                    selected
                                                                                        ? "font-medium"
                                                                                        : "font-normal"
                                                                                }`}
                                                                            >
                                                                                {
                                                                                    element
                                                                                }
                                                                            </span>
                                                                            {selected ? (
                                                                                <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600">
                                                                                    <CheckIcon
                                                                                        className="h-5 w-5"
                                                                                        aria-hidden="true"
                                                                                    />
                                                                                </span>
                                                                            ) : null}
                                                                        </>
                                                                    )}
                                                                </Listbox.Option>
                                                            )
                                                        )}
                                                    </Listbox.Options>
                                                </Transition>
                                            </div>
                                        </Listbox>
                                    </div>
                                </div>
                                <div className={clsx(styles.footerItem)}>
                                    <div className="mr-3">
                                        {" "}
                                        <span id="currentPage">
                                            {page * selected + 1}-
                                            {totalData <
                                            page * selected + selected
                                                ? totalData
                                                : page * selected + selected}
                                        </span>
                                        <span> of </span>
                                        <span id="total">{totalData}</span>
                                    </div>
                                    <button
                                        disabled={page === 0}
                                        onClick={() =>
                                            handlePageData("previous")
                                        }
                                        className={clsx(styles.controlPage, {
                                            [styles.disableControl]: page === 0,
                                        })}
                                    >
                                        <ChevronLeftIcon></ChevronLeftIcon>
                                    </button>
                                    <button
                                        disabled={
                                            page * selected + selected >=
                                            totalData
                                        }
                                        onClick={() => handlePageData("next")}
                                        className={clsx(styles.controlPage, {
                                            [styles.disableControl]:
                                                page * selected + selected >=
                                                totalData,
                                        })}
                                    >
                                        <ChevronRightIcon></ChevronRightIcon>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <Transition appear show={deletedModalOpen} as={Fragment}>
                <Dialog
                    as="div"
                    className="relative z-10"
                    onClose={handleCloseModal}
                >
                    <Transition.Child
                        as={Fragment}
                        enter="ease-out duration-300"
                        enterFrom="opacity-0"
                        enterTo="opacity-100"
                        leave="ease-in duration-200"
                        leaveFrom="opacity-100"
                        leaveTo="opacity-0"
                    >
                        <div className="fixed inset-0 bg-black bg-opacity-25" />
                    </Transition.Child>

                    <div className="fixed inset-0 overflow-y-auto overlay">
                        <div className="flex min-h-full items-center justify-center p-4 text-center">
                            <Transition.Child
                                as={Fragment}
                                enter="ease-out duration-300"
                                enterFrom="opacity-0 scale-95"
                                enterTo="opacity-100 scale-100"
                                leave="ease-in duration-200"
                                leaveFrom="opacity-100 scale-100"
                                leaveTo="opacity-0 scale-95"
                            >
                                <Dialog.Panel className="z-50 w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                                    <h2 className={styles.titleModal}>
                                        Delete
                                    </h2>
                                    <div
                                        className={clsx(
                                            styles.descModal,
                                            "mt-3"
                                        )}
                                    >
                                        Are you sure want to delete?
                                    </div>
                                    <div
                                        className={clsx(
                                            "flex justify-end mt-4"
                                        )}
                                    >
                                        <button
                                            onClick={handleRemoveUser}
                                            className={clsx("btnModal delete")}
                                        >
                                            Delete
                                        </button>
                                        <button
                                            onClick={handleCloseModal}
                                            className={clsx("btnModal cancel")}
                                        >
                                            Cancel
                                        </button>
                                    </div>
                                </Dialog.Panel>
                            </Transition.Child>
                        </div>
                    </div>
                </Dialog>
            </Transition>
        </div>
    );
}

export default ListUser;

================
File: src/pages/admin/user/userProfileAdmin/index.js
================
import React, { useState, useEffect } from "react";
import styles from "../../../user/userprofile/userProfile.module.scss";
import clsx from "clsx";
import avatar from "../../../../assets/images/avatar_25.jpg";
import ShowPassword from "../../../../component/auth/ShowPassword";
import { useNavigate, useParams } from "react-router-dom";
import * as userApi from "../../../../api/apiService/authService";
import { toast } from "sonner";

const AdminView = () => {
    const [user, setUser] = useState({
        firstName: "",
        lastName: "",
        email: "",
        avatar: "",
        phoneNumber: "",
    });
    const [activeForm, setActiveForm] = useState("details");
    const [errors, setErrors] = useState({});
    const [passwords, setPasswords] = useState({
        newPassword: "",
        confirmPassword: "",
    });

    const { email } = useParams();
    const [selectedBtn, setSelectedBtn] = useState("0");

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setUser({
            ...user,
            [name]: value,
        });
        setErrors({ ...errors, [name]: "" });
    };

    const handleInputPasswordChange = (e) => {
        const { name, value } = e.target;
        setPasswords({ ...passwords, [name]: value });
        setErrors({ ...errors, [name]: "" });
    };

    const handleFileChange = (event) => {
        const file = event.target.files[0];
        if (file) {
            setUser({ ...user, avatar: file });
        }
    };

    const handleSwitchPage = (e) => {
        const newIndex = e.target.dataset.index;
        setSelectedBtn(newIndex);

        switch (newIndex) {
            case "0":
                setActiveForm("details");
                break;
            case "1":
                setActiveForm("password");
                break;
            default:
                console.log("Unhandled index!");
        }
    };

    const handleSubmitChangePassword = async (e) => {
        e.preventDefault();
        if (!validatePasswordForm()) {
            console.error("Invalid password input");
            toast.error("Failed to update password");
            return;
        }
        try {
            await userApi.resetPasswordByEmail(passwords.newPassword, email);
            toast.success("Password updated successfully");
        } catch (error) {
            toast.error("Failed to update password");
        }
    };

    const validatePasswordForm = () => {
        let valid = true;
        const newErrors = {};

        if (!isPasswordStrong(passwords.newPassword)) {
            newErrors.newPassword =
                "Password must have at least 8 characters, including uppercase, lowercase, and special characters.";
            valid = false;
        }
        if (passwords.newPassword !== passwords.confirmPassword) {
            newErrors.confirmPassword = "Passwords do not match.";
            valid = false;
        }

        setErrors(newErrors);
        return valid;
    };

    const validateProfileForm = () => {
        let valid = true;
        const newErrors = {};

        if (!user.firstName) {
            newErrors.firstName = "First name is required.";
            valid = false;
        }
        if (!user.lastName) {
            newErrors.lastName = "Last name is required.";
            valid = false;
        }
        if (!isValidEmail(user.email)) {
            newErrors.email = "Email is not valid.";
            valid = false;
        }

        setErrors(newErrors);
        return valid;
    };

    const handleSubmit = async (event) => {
        event.preventDefault();
        if (!validateProfileForm()) {
            toast.error("Invalid input");
            return;
        }
        const { avatar, ...userData } = user;
        toast.promise(userApi.updateProfile(userData, avatar), {
            loading: "Loading...",
            success: (data) => {
                setUser(data.content);
                return "Update successfully";
            },
            error: (err) => {
                return err.mess;
            },
        });
    };

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await userApi.getUserByEmail(email);
                setUser(result.content);
            } catch (error) {
                console.log(error.mess);
            }
        };
        fetchApi();
    }, [email]);

    return (
        <div className={styles.container}>
            <div className={clsx("container")}>
                <div className={clsx("row justify-center gap-6")}>
                    <div className={clsx(styles.header, "col-lg-10")}>
                        <ul className={clsx("flex gap-10 mb-0")}>
                            <li
                                onClick={handleSwitchPage}
                                className={clsx(styles.item, {
                                    [styles.selected]: selectedBtn === "0",
                                })}
                                data-index="0"
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    viewBox="0 0 16 16"
                                    fill="currentColor"
                                >
                                    <path
                                        fillRule="evenodd"
                                        d="M3 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H3Zm2.5 5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3ZM10 5.75a.75.75 0 0 1 .75-.75h1.5a.75.75 0 0 1 0 1.5h-1.5a.75.75 0 0 1-.75-.75Zm.75 3.75a.75.75 0 0 0 0 1.5h1.5a.75.75 0 0 0 0-1.5h-1.5ZM10 8a.75.75 0 0 1 .75-.75h1.5a.75.75 0 0 1 0 1.5h-1.5A.75.75 0 0 1 10 8Zm-2.378 3c.346 0 .583-.343.395-.633A2.998 2.998 0 0 0 5.5 9a2.998 2.998 0 0 0-2.517 1.367c-.188.29.05.633.395.633h4.244Z"
                                        clipRule="evenodd"
                                    />
                                </svg>
                                General
                            </li>
                            <li
                                onClick={handleSwitchPage}
                                data-index="1"
                                className={clsx(styles.item, {
                                    [styles.selected]: selectedBtn === "1",
                                })}
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    viewBox="0 0 16 16"
                                    fill="currentColor"
                                >
                                    <path
                                        fillRule="evenodd"
                                        d="M14 6a4 4 0 0 1-4.899 3.899l-1.955 1.955a.5.5 0 0 1-.353.146H5v1.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2.293a.5.5 0 0 1 .146-.353l3.955-3.955A4 4 1 1 1 14 6Zm-4-2a.75.75 0 0 0 0 1.5.5.5 0 0 1 .5.5.75.75 0 0 0 1.5 0 2 2 0 0 0-2-2Z"
                                        clipRule="evenodd"
                                    />
                                </svg>
                                Security
                            </li>
                        </ul>
                    </div>
                    {selectedBtn == 0 ? (
                        <>
                            <div className={clsx("col-lg-4")}>
                                <div className="p-6 h-full flex items-center flex-col justify-center rounded-xl b-shadow-sm">
                                    <div className={clsx(styles.avatar)}>
                                        <img
                                            loading="lazy"
                                            src={
                                                user.avatar
                                                    ? user.avatar instanceof
                                                          File ||
                                                      user.avatar instanceof
                                                          Blob
                                                        ? URL.createObjectURL(
                                                              user.avatar
                                                          )
                                                        : user.avatar
                                                    : avatar
                                            }
                                            alt="User avatar"
                                        />
                                        <input
                                            accept=".jpg, .png, .jpeg"
                                            id="avatar"
                                            type="file"
                                            hidden
                                            onChange={handleFileChange}
                                            name=""
                                        />
                                        <label
                                            htmlFor="avatar"
                                            className={clsx(styles.updatePhoto)}
                                        >
                                            <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                viewBox="0 0 16 16"
                                                fill="currentColor"
                                            >
                                                <path d="M9.5 8.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z" />
                                                <path
                                                    fillRule="evenodd"
                                                    d="M2.5 5A1.5 1.5 0 0 0 1 6.5v5A1.5 1.5 0 0 0 2.5 13h11a1.5 1.5 0 0 0 1.5-1.5v-5A1.5 1.5 0 0 0 13.5 5h-.879a1.5 1.5 0 0 1-1.06-.44l-1.122-1.12A1.5 1.5 0 0 0 9.38 3H6.62a1.5 1.5 0 0 0-1.06.44L4.439 4.56A1.5 1.5 0 0 1 3.38 5H2.5ZM11 8.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                                                    clipRule="evenodd"
                                                />
                                            </svg>
                                            Update photo
                                        </label>
                                    </div>

                                    <div className={clsx(styles.sub)}>
                                        Allowed *.jpg, *.png, *.jpeg
                                    </div>
                                </div>
                            </div>
                            <div
                                className={clsx(
                                    "col-lg-6 rounded-xl b-shadow-sm"
                                )}
                            >
                                <div className={clsx("p-6")}>
                                    <div className={clsx(styles.field)}>
                                        <div
                                            className={clsx(
                                                "flex gap-3 w-full"
                                            )}
                                        >
                                            <div>
                                                <div
                                                    className={clsx(
                                                        styles.formField,
                                                        "flex-1"
                                                    )}
                                                >
                                                    <input
                                                        required
                                                        onChange={
                                                            handleInputChange
                                                        }
                                                        value={user.firstName}
                                                        name="firstName"
                                                        data-validate
                                                        className={clsx(
                                                            styles.formInput
                                                        )}
                                                        type="text"
                                                    />
                                                    <label
                                                        className={clsx(
                                                            styles.formLabel
                                                        )}
                                                    >
                                                        First Name
                                                    </label>
                                                </div>
                                                {errors.firstName && (
                                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                                        {errors.firstName}
                                                    </div>
                                                )}
                                            </div>
                                            <div>
                                                <div
                                                    className={clsx(
                                                        styles.formField,
                                                        "flex-1"
                                                    )}
                                                >
                                                    <input
                                                        required
                                                        onChange={
                                                            handleInputChange
                                                        }
                                                        value={user.lastName}
                                                        name="lastName"
                                                        data-validate
                                                        className={clsx(
                                                            styles.formInput
                                                        )}
                                                        type="text"
                                                    />
                                                    <label
                                                        className={clsx(
                                                            styles.formLabel
                                                        )}
                                                    >
                                                        Last Name
                                                    </label>
                                                </div>
                                                {errors.lastName && (
                                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                                        {errors.lastName}
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                        <div>
                                            <div
                                                className={clsx(
                                                    styles.formField,
                                                    "w-full"
                                                )}
                                            >
                                                <div className="relative">
                                                    <input
                                                        required
                                                        onChange={
                                                            handleInputChange
                                                        }
                                                        value={user.email}
                                                        name="email"
                                                        className={clsx(
                                                            styles.formInput
                                                        )}
                                                        type="text"
                                                    />
                                                    <label
                                                        className={clsx(
                                                            styles.formLabel
                                                        )}
                                                    >
                                                        Email
                                                    </label>
                                                </div>
                                                {errors.email && (
                                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                                        {errors.email}
                                                    </div>
                                                )}
                                            </div>
                                            <div
                                                className={clsx(
                                                    styles.formField,
                                                    "w-full"
                                                )}
                                            >
                                                <div className="relative">
                                                    <input
                                                        required
                                                        onChange={
                                                            handleInputChange
                                                        }
                                                        value={
                                                            user.phoneNumber ||
                                                            " "
                                                        }
                                                        name="phoneNumber"
                                                        className={clsx(
                                                            styles.formInput
                                                        )}
                                                        type="text"
                                                    />
                                                    <label
                                                        className={clsx(
                                                            styles.formLabel
                                                        )}
                                                    >
                                                        Phone Number
                                                    </label>
                                                    {errors.phoneNumber && (
                                                        <div className="text-red-500 mt-1 text-sm ml-1">
                                                            {errors.phoneNumber}
                                                        </div>
                                                    )}
                                                </div>
                                            </div>
                                            <div
                                                className={clsx(styles.btn)}
                                                onClick={handleSubmit}
                                            >
                                                Save changes
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </>
                    ) : (
                        <>
                            <div
                                className={clsx(
                                    "col-lg-10 rounded-xl b-shadow-sm"
                                )}
                            >
                                <div className={clsx("p-6")}>
                                    <form
                                        className={clsx(styles.field)}
                                        action=""
                                    >
                                        <div>
                                            <div
                                                className={clsx(
                                                    styles.formField,
                                                    "w-full "
                                                )}
                                            >
                                                <div className="px-2 w-full flex text-sm">
                                                    <input
                                                        autoComplete="off"
                                                        id="newPassword"
                                                        required
                                                        onChange={
                                                            handleInputPasswordChange
                                                        }
                                                        value={
                                                            passwords.newPassword
                                                        }
                                                        name="newPassword"
                                                        data-validate
                                                        className={clsx(
                                                            styles.formInput
                                                        )}
                                                        type="password"
                                                    ></input>
                                                    <label
                                                        className={clsx(
                                                            styles.formLabel
                                                        )}
                                                    >
                                                        New Password
                                                    </label>
                                                    <ShowPassword
                                                        passInput={document.getElementById(
                                                            "newPassword"
                                                        )}
                                                    ></ShowPassword>
                                                </div>
                                            </div>
                                            {errors.newPassword && (
                                                <div className="text-red-500 mt-1 text-sm ml-1">
                                                    {errors.newPassword}
                                                </div>
                                            )}
                                        </div>
                                        <div
                                            className={clsx(
                                                styles.formField,
                                                "w-full"
                                            )}
                                        >
                                            <div className="px-2 w-full flex text-sm">
                                                <input
                                                    autoComplete="off"
                                                    id="confirmPassword"
                                                    required
                                                    onChange={
                                                        handleInputPasswordChange
                                                    }
                                                    value={
                                                        passwords.confirmPassword
                                                    }
                                                    name="confirmPassword"
                                                    className={clsx(
                                                        styles.formInput
                                                    )}
                                                    type="password"
                                                ></input>
                                                <label
                                                    className={clsx(
                                                        styles.formLabel
                                                    )}
                                                >
                                                    Confirm Password
                                                </label>
                                                <ShowPassword
                                                    passInput={document.getElementById(
                                                        "confirmPassword"
                                                    )}
                                                ></ShowPassword>
                                            </div>
                                        </div>
                                        {errors.confirmPassword && (
                                            <div className="text-red-500  text-sm ml-1">
                                                {errors.confirmPassword}
                                            </div>
                                        )}
                                        <button
                                            type="submit"
                                            className={clsx(styles.btn)}
                                            onClick={handleSubmitChangePassword}
                                        >
                                            Save changes
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </>
                    )}
                </div>
            </div>
        </div>
    );
};

function isValidEmail(email) {
    const emailRegex = /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/;
    return emailRegex.test(email);
}

function isPasswordStrong(password) {
    const passwordRegex =
        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+])[A-Za-z\d!@#$%^&*()_+]{8,}$/;
    return passwordRegex.test(password);
}

export default AdminView;

================
File: src/pages/course/Course.module.scss
================
.courseCard {
    border-radius: 12px;
    background-color: var(--Absolute-White, #fff);
    display: flex;
    flex-direction: column;
    padding: 50px;
}

@media (max-width: 1366px) {
    .courseCard {
        padding: 30px; /* Smaller padding */
        width: auto; /* Adjust width */
    }
}

.courseHeader {
    display: flex;
    gap: 20px;
}

@media (max-width: 1366px) {
    .courseHeader {
        flex-direction: column;
    }
}

.courseInfo {
    display: flex;
    flex-direction: column;
    flex: 1;
    width: 500px;
    max-width: 900px;
}

.courseTitle {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    text-align: start;
    color: var(--Grey-15, #262626);
    font: 600 26px/150% "Be Vietnam Pro", sans-serif;
    max-width: 983px;
}

.courseDescription {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    text-align: start;
    margin-top: 10px;
    font: 400 16px "Be Vietnam Pro", sans-serif;
    color: var(--Grey-35, #59595a);
    max-width: 983px;
}

.courseCta {
    display: block;
    justify-content: center;
    border-radius: 8px;
    border: 1px solid rgba(241, 241, 243, 1);
    background-color: var(--Grey-10, #1a1a1a);
    color: var(--White-99, #fcfcfd);
    text-align: center;
    margin: auto 0;
    padding: 12px 12px;
    font: 500 16px "Be Vietnam Pro", sans-serif;
    cursor: pointer;
    transition: background-color 0.3s;
    width: 100% !important;
    height: 48px;
    margin-top: 10px;
}

.courseCta:hover {
    background-color: var(--Grey-20, #333);
}

.courseImages {
    display: flex;
    border-radius: 8px;
    gap: 20px;
}

@media (max-width: 1366px) {
    .courseImages {
        flex-direction: column;
        gap: 30px;
    }
}

.courseImage {
    aspect-ratio: 0.89;
    object-fit: fill;
    width: 100%;
    height: 230px;
    border-radius: 8px;
}

.courseCurriculum {
    width: 100%;
    flex-wrap: wrap; /* Wrap items to the next line */
    padding-top: 20px;
    gap: 20px;
}

.courseMeta {
    display: flex;
    justify-content: space-between;
    margin-bottom: 30px;
    width: 70%;
    gap: 20px;
}

.tags {
    font-weight: 500;
    display: flex;
    gap: 10px;
    justify-content: center;
    align-items: center;
    font-size: 16px;
    padding-bottom: 10px;
}

.courseDetails {
    padding: 10px 40px;
    align-items: center;
    font-size: 16px;
    font-weight: 400;
}

.courseDuration,
.courseLevel {
    height: 33px;
    width: 80px;
    border-radius: 8px;
    border: 1px solid #ccc;
    background-color: var(--Absolute-White, #fff);
    justify-content: center;
    padding: 10px 12px;
    font-size: 14px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.courseAuthor {
    color: var(--Grey-15, #262626);
    margin: auto 0;
    font: 500 20px "Be Vietnam Pro", sans-serif;
    height: 25px;
    width: 137px;
}

.courseDetailsWrapper {
    border-radius: 10px;
    display: flex;
    flex-direction: column;
}

.courseDetailsTitle {
    text-align: start;
    border-bottom: 1px solid rgba(241, 241, 243, 1);
    color: var(--Grey-15, #262626);
    white-space: nowrap;
    justify-content: center;
    padding: 24px 30px;
    font: 600 18px "Be Vietnam Pro", sans-serif;
}

.curriculumItem {
    display: flex;
    align-items: start;
    background-color: #f2f5f7;
    border: 1px solid #ccc;
    flex-direction: column;
    text-align: start;
}

.curriculumItem:first-child {
    border-top: 1px solid #ccc;
}

.title {
    transition: transform 0.2s;
    cursor: pointer;
}

.curriculumTitle {
    margin-top: 5%;
    font-size: 24px;
    text-align: start;
}

.curriculumItemNumber {
    font-size: 32px;
    font-weight: bold;
    margin-right: 10px;
    text-align: start;
    color: var(--Grey-15, #262626);
}

.curriculumItemTitle {
    color: var(--Grey-20, #333);
    font: 700 16px "Be Vietnam Pro", sans-serif;
    margin: 8px;
    border-radius: 8px;
    display: flex;
}

.coursePrice {
    height: 48px;
    color: #1a1a1a;
    background-color: var(--Grey-10, #fff);
    margin: auto 0;
    font: 800 26px "Be Vietnam Pro", sans-serif;
    line-height: 46px;
}

.detailItem {
    padding: 4px;
    display: flex;
    font-size: 14px;
    align-items: center;
    svg {
        margin-right: 14px;
        width: 18px;
    }
}

.subTitle {
    font-weight: 400;
    font-size: 14px;
    margin-right: 22px;
}

.wrapLesson {
    background: white;
    border-top: 1px solid #ccc;
}

.lessonItem {
    font-size: 14px;
    line-height: 25px;
    text-align: center;
}

.sticky {
    position: sticky;
    top: 132px;
    overflow: hidden;
}

@media (max-width: 992px) {
    .courseHeader{
        padding-left: 10px;
    }
    .detailsContainer {
        display: flex;
        flex-direction: column;
    }
    .courseTitle{
        display: block;
        margin-top: 10px;
        max-width: 350px;
        height: 40px;
    }
    .courseDetailsWrapper {
        order: 1;
    }

    .courseCurriculumWrapper {
        order: 3;
    }
    .courseDetails{
        width: 100%;
    }
    .col-lg-8 {
        width: 100%;
    }

    .col-lg-4 {
        width: 100%;
        margin-top: 20px;
    }

    .sticky {
        position: relative;
        top: auto;
        width: 100%;
    }
}

================
File: src/pages/course/detail/DetailCourse.module.scss
================
@import "../../../component//globalStyles//GlobalStyles.scss";
/* Course.module.css */
.uiUxCourse {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-end;
    overflow-x: hidden;
}
.lessonItem {
    display: flex;
    align-items: center;
    margin-left: 1.5rem; // Equivalent to ml-6
    gap: 0.875rem; // Equivalent to gap-3.5
  
    &.highlighted {
      background-color: #ebf8ff; // Similar to Tailwind's bg-blue-50
    }
  
    &.unlocked {
      cursor: pointer;
  
      &:hover {
        background-color: #f3f4f6; // Similar to Tailwind's hover:bg-gray-100
      }
    }
  
    &.locked {
      cursor: not-allowed;
      opacity: 0.5;
    }
  }
.sectionVideo {
    background-color: var(--White-97, #f7f7f8);
    float: left;
}
.wrapper {
    @apply bg-gray-50 min-h-screen pt-20;
  }
  
  .courseHeader {
    @apply bg-gray-50 py-6;
  }
  
  .courseTitle {
    @apply text-2xl lg:text-3xl font-semibold;
  }
  
  .courseInfo {
    @apply text-sm text-gray-600 flex items-center mt-1;
  }
  
  .icon {
    @apply h-5 w-5 mr-2;
  }
.courseSectionsContainer {
    max-width: 1280px;
    height: 100%;
    position: fixed;
    right: 0px;
    height: 100vh;
    top: 60px;
    padding-left: 2px;
    padding-right: 4px;
}

.courseSection {
    display: flex;
    flex: 0 0 auto;
    max-width: 100%;
    flex-direction: row;
    border: #fff;
    background-color: #fff;
    border-radius: 10px;
    @media (max-width: 991px) {
        max-width: 100%; // Stacks the sections on smaller screens
    }
}

.courseIntro {
    align-self: stretch;
    padding: 0 60px 40px;
}

@media (max-width: 991px) {
    .courseIntro {
        max-width: 100%;
        margin-top: 40px;
        padding: 0 20px;
    }
}

.introContent {
    display: flex;
    align-items: center;
    gap: 20px;
}

@media (max-width: 991px) {
    .introContent {
        flex-direction: column;
        align-items: stretch;
        gap: 0px;
    }
}

.courseTitle {
    color: var(--Grey-15, #262626);
    font: 600 38px/150% "Be Vietnam Pro", -apple-system, Roboto, Helvetica, sans-serif;
    text-align: start;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 1000px;
}

@media (max-width: 991px) {
    .courseTitle {
        max-width: 100%;
        margin-top: 40px;
    }
}

.courseDescription {
    color: var(--Grey-35, #59595a);
    font: 400 16px/24px "Be Vietnam Pro", -apple-system, Roboto, Helvetica, sans-serif;
    text-align: start;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 1000px;
}

@media (max-width: 991px) {
    .courseDescription {
        max-width: 100%;
        margin-top: 40px;
    }
}

.videoContainer {
    height: 600px;
    overflow-y: hidden;
    overflow-x: hidden;
    position: relative;
    padding: 0 !important;

    .courseHero {
        outline: none;
        border: none;
        //height: width / 2;
        justify-content: center;
        align-items: center;
        border-radius: 10px;
        //background: linear-gradient(0deg, rgba(0, 0, 0, 0.2) 0%, rgba(0, 0, 0, 0.2) 100%), #c4c4c4;
        display: flex;
        width: 100%;
        //max-width: 1280px;
        position: relative;
        padding: 30px;
        float: left;
        .videoPlayer{
            width: 100%;
            height: 100%;
        }
        
    }

    .titleHeader {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        //background-color: black;
        height: 200px;
        width: 100%;
    
        .textHeader {
            font-size: 2vw;
            font-weight: bold;
            padding: 30px;
            margin: 20px;
        }
    }
    
}



@media (max-width: 991px) {
    .courseHero {
        max-width: 100%;
        margin-top: 40px;
        padding: 0 20px;
    }
}

.playIcon {
    position: absolute;
    align-items: center;
    border-radius: 68px;
    border: 4px solid rgba(255, 255, 255, 0.3);
    background-color: rgba(255, 255, 255, 0.2);
    display: flex;
    width: 54px;
    justify-content: center;
    height: 54px;
    margin: 218px 0 158px;
    padding: 0 10px;
}

@media (max-width: 991px) {
    .playIcon {
        margin: 40px 0;
    }
}

.playIcon img {
    aspect-ratio: 1;
    object-fit: auto;
    object-position: center;
    width: 100%;
}

.courseContent {
    display: flex;
    margin-top: 80px;
    width: 100%;
    max-width: 1280px;
    flex-direction: column;
    justify-content: center;
}

@media (max-width: 991px) {
    .courseContent {
        max-width: 100%;
        margin-top: 40px;
    }
}


.courseSection {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    background-color: #fff;
    border-radius: 10px;
    padding-top: 20px !important;
    padding-bottom: 20px !important;
    padding-right: 0px !important;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    height: 100%;
    overflow-y: scroll;
    overflow-x: hidden;
    

    .sectionNumber {
        font-size: 30px;
        font-weight: bold;
        margin-top: 10px;
        margin-right: 70px;
    }

    .sectionTitle {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 500px;
    }

    .highlighted {
        border: 2px solid #ffa500;
        background-color: #fff4e5;
    }
}

.sectionHeader {
    display: flex;
    flex-direction: column;
    margin-left: 28px;
    width: 100%;
}

@media (max-width: 991px) {
    .courseSection {
        flex-direction: column;
        align-items: stretch;
        gap: 0px;
    }
}

.sectionNumber {
    color: var(--Grey-15, #262626);
    text-align: right;
    margin-bottom: 26px;
    font: 700 50px/40% "Be Vietnam Pro", -apple-system, Roboto, Helvetica, sans-serif;
}

@media (max-width: 991px) {
    .sectionNumber {
        max-width: 100%;
        font-size: 40px;
    }
}

.sectionTitle {
    color: var(--Grey-20, #333);
    letter-spacing: -0.12px;
    margin-top: 40px;
    font: 600 20px/150% "Be Vietnam Pro", -apple-system, Roboto, Helvetica, sans-serif;
    text-align: start;
}

@media (max-width: 991px) {
    .sectionTitle {
        max-width: 100%;
    }
}

.lessonGroup {
    display: flex;
    margin-top: 40px;
    flex-direction: column;
}

@media (max-width: 991px) {
    .lessonGroup {
        max-width: 100%;
    }
}

.lessonGroupTitle {
    color: var(--Grey-20, #333);
    font: 500 16px/24px "Be Vietnam Pro", -apple-system, Roboto, Helvetica, sans-serif;
}

.lessonItem {
    &:hover {
        border-color: rgba(255, 213, 153, 1);
        opacity: 0.7;
    }
    cursor: pointer;
    border: 1px solid rgba(241, 241, 243, 1);
    width: 100%;
    margin-left: 0;
    padding: 14px 6px;
    text-align: start;
    max-width: 683px;
}

.lessonItem.highlighted {
    box-shadow: 0px 0px 0px 4px #fff4e5;
    border-color: rgba(255, 213, 153, 1);
    background-color: var(--Absolute-White, #fff);
}

@media (max-width: 991px) {
    .lessonItem {
        flex-wrap: wrap;
        padding: 0 20px;
    }
}

.lessonInfo {
    text-align: start;
    justify-content: center;
    display: flex;
    flex-direction: column;
    line-height: 150%;
    flex: 1;
}

.lessonTitle {
    text-align: start;
    color: var(--Grey-20, #333);
    font: 500 16px "Be Vietnam Pro", -apple-system, Roboto, Helvetica, sans-serif;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 307px;
}

.lessonNumber {
    color: var(--Grey-35, #59595a);
    font: 400 14px "Be Vietnam Pro", -apple-system, Roboto, Helvetica, sans-serif;
}

.timeInfo {
    align-items: center;
    border-radius: 6px;
    display: flex;
    gap: 4px;
    font-size: 12px;
    color: var(--Grey-35, #59595a);
    font-weight: 400;
    margin: auto 0;
    padding: 4px;
    min-width: 102px;
}

.lessonItem.highlighted .timeInfo {
    background-color: var(--Orange-90, #ffeacc);
    color: var(--Grey-30, #4c4c4d);
}

.clockIcon {
    aspect-ratio: 1;
    object-fit: auto;
    object-position: center;
    width: 20px;
}

.time {
    font-family: "Be Vietnam Pro", -apple-system, Roboto, Helvetica, sans-serif;
}

.curriculumItem {
    display: flex;
    align-items: start;
    background-color: #f2f5f7;
    border: 1px solid #ccc;
    flex-direction: column;
    text-align: start;
}

.curriculumItemTitle {
    color: var(--Grey-20, #333);
    font: 700 16px "Be Vietnam Pro", sans-serif;
    margin: 8px;
    border-radius: 8px;
    display: flex;
}

.wrapLesson {
    background: white;
    border-top: 1px solid #ccc;
    height: 30%;
}

.lessonItem {
    font-size: 14px;
    line-height: 25px;
    text-align: center;
}

.courseCurriculum {
    width: 100%;
}

.active {
    svg {
        transform: rotate(-180deg) !important;
    }
}

.transfrom {
    transition: all 0.2s ease-in-out;
}

.svgHiglighted {
    color: rgb(255, 175, 73);
}

.progress {
    font-size: 18px;
    font-weight: 600;
}

.sectionComment {
    font-size: 16px;
    font-weight: 500;
    position: fixed;
    bottom: 4%;
    right: 26%;
    cursor: pointer;
}

.headerPage {
    height: 60px;
    background: black;
    color: white;
    padding: 0 100px;
    border-bottom: 1px solid #ccc;
}

.wrapperPage {
    margin-top: -$h-m-header;
}

.logoPage {
    display: flex;
    align-items: center;
    gap: 14px;
    font-weight: 700;
    font-size: 26px;
    img {
        width: 50px;
        height: 50px;
    }
}

.cmt {
    img {
        width: 40px;
        height: 40px;
        border-radius: 100rem;
        margin-right: 10px;
    }
}

.input {
    font-size: 14px;
    margin-top: 10px;
    height: 30px;
    border-bottom: 1px solid #e2e1e1;
}

.input:focus {
    border-bottom: 1px solid black;
    outline: none;
}

.cmtItem {
    width: 100%;
}

.cmtContent {
    align-items: center;
    font-size: 14px;
    min-height: 70px;

    .wrap {
        padding: 8px 12px;
        border-radius: 8px;
        display: inline-block;
        background: #f0f2f5;
        span {
            font-weight: 600;
            margin-bottom: 6px;
        }
    }

    .timeCmt {
        font-size: 12px;
    }

    .actionsCmt {
        padding: 2px;
        font-weight: 500;
        margin-right: 12px;
        font-size: 12px;
    }
}

.content {
    margin-top: 4px;
    font-size: 12px;
}

.cmtWrap {
    max-height: 430px;
    padding-right: 10px;
    overflow-y: scroll;
}

.replyBox {
    display: none;
    margin-top: 12px;
}

.btnSend {
    font-size: 14px;
    background-color: black;
    color: white;
    padding: 6px 12px;
    border-radius: 8px;
    cursor: pointer;
    &:hover {
        opacity: 0.8;
    }
}

================
File: src/pages/course/detail/index.js
================
import React, { Fragment, useEffect, useState,useRef } from "react"; // This imports the useState hook
import styles from "./DetailCourse.module.scss";
import { Link, useParams } from "react-router-dom";
import clsx from "clsx";
import * as userApi from "../../../api/apiService/authService.js";
import * as dataApi from "../../../api/apiService/dataService";

import logoPage from "../../../assets/images/logo.png";
import { useSelector } from "react-redux";
import Comment from "../../../component/comment/index.js";
import { comma } from "postcss/lib/list";
import Header from "../../../layout/header"
import CourseInfo from "../../../component/LearningComponent/CourseInfo.js";
import button from "../../../assets/images/Button.png"
import folder from "../../../assets/images/FolderNotchOpen.svg"
import lecture from "../../../assets/images/PlayCircle.svg"
let timerId = null;
const debounce = (func, delay = 1000) => {
    return () => {
        clearTimeout(timerId);
        timerId = setTimeout(() => {
            func();
        }, delay);
    };
};
const CourseHero = ({ video, thumbnail, lessonId, onProgressUpdate }) => {
    const videoRef = useRef();
    const hasSentProgress = useRef(false);
    const userInfo = useSelector((state) => state.login.user);
    const userId = userInfo.id; // Assuming the user ID is stored here
  console.log(userId)
    useEffect(() => {
      hasSentProgress.current = false; // Reset when video changes
    }, [lessonId]);
  
    useEffect(() => {
      const videoElement = videoRef.current;
      // console.log(videoElement.currentTime)
      if (!videoElement) return;
      const fetchCurrentUserEmail = () => {
        const user = sessionStorage.getItem("user");
        if (user) {
            const parsedUser = JSON.parse(user);
            return parsedUser.email || ""; // Return email if available
        }
        return ""; // Return an empty string if no user is found
    }
    
      const handleLoadedMetadata = () => {
        const handleTimeUpdate = async () => {
          const email = fetchCurrentUserEmail();
          if (!email) {
              console.error("No email found in session storage.");
              return;
          }

          const userId = await dataApi.getUserIdByEmail(email);
          if (videoElement.duration) {
            const progress = (videoElement.currentTime / videoElement.duration) * 100;
    
            if (progress >= 80 && !hasSentProgress.current) {
              hasSentProgress.current = true;
    
              // Send progress to backend
              userApi.updateLessonProgress(userId, lessonId, progress)
                .then(() => {
                  onProgressUpdate && onProgressUpdate();
                })
                .catch(error => {
                  console.error('Error updating progress:', error);
                });
            }
          }
        };
    
        videoElement.addEventListener('timeupdate', handleTimeUpdate);
    
        // Cleanup
        return () => {
          videoElement.removeEventListener('timeupdate', handleTimeUpdate);
        };
      };
    
      videoElement.addEventListener('loadedmetadata', handleLoadedMetadata);
    
      // Cleanup
      return () => {
        videoElement.removeEventListener('loadedmetadata', handleLoadedMetadata);
      };
    }, [lessonId, userId, onProgressUpdate]);
  
    // Existing logic for video URL
    let videoUrl = video;
  
    if (!video.startsWith("https://res.cloudinary.com")) {
      var parts = video.split("/");
      var videoId = parts[parts.length - 1].split("?")[0];
      videoUrl = `https://www.youtube.com/embed/${videoId}`;
    }
  
    return (
      <section className={styles.courseHero}>
        {video.startsWith("https://res.cloudinary.com") && video !== "" && (
          <video
            key={video}
            controls
            className="cursor-pointer h-[500px] w-full object-contain bg-black outline-none"
            ref={videoRef}
          >
            <source src={video} type="video/mp4" />
          </video>
        )}
        {!video.startsWith("https://res.cloudinary.com") && video !== "" && (
          <iframe
            title="Video"
            src={videoUrl}
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            className={styles.videoPlayer}
          ></iframe>
        )}
        {video === "" && <img src={thumbnail} alt="Course thumbnail" />}
      </section>
    );
  };

const CourseHeader = ({titleHeader, lastUpdate, commentTotal, watchingCount }) => {
    return (
        <section className={clsx(styles.titleHeader)}>
            <div className={clsx(styles.textHeader)}>{titleHeader}</div>

        </section>
    )
}
const CouseDetails = ({Description, Notes, AttachFiles}) => {

}

const initFormData = {
    course: {
        title: "",
        desc: "",
        price: "",
        thumbnail: "",
        date: "",
        categories: [],
    },
};
const CurriculumItem = ({
    active,
    section,
    aliasEmail,
    sectionId,
    courseId,
    isHighlighted,
    currentProgress,
    handleVideoSelect,
    setCurrentProgress,
    isLessonUnlocked, // New prop

}) => {
    const handleOpenSubLesson = (e) => {
        const sub = document.getElementById(`section${sectionId}`);
        sub.classList.toggle("disabled");
        e.currentTarget.classList.toggle(styles.active);
    };
    let newUpdate = currentProgress;

    const handleChecked = (e) => {
        const id = parseInt(e.target.id, 10);
        if (e.target.checked && !currentProgress.includes(id)) {
            newUpdate = [...newUpdate, id];
        } else {
            newUpdate = [...newUpdate.filter((item) => item !== id)];
        }

        setCurrentProgress((prev) => newUpdate);

        const fetchUpdateLessonIds = async () => {
            try {
                const result = await userApi.updateLessonIds(
                    aliasEmail,
                    courseId,
                    newUpdate
                );
            } catch (error) {
                console.log(error);
            }
        };
        const debounceAPi = debounce(fetchUpdateLessonIds, 500);
        debounceAPi();
    };

    return (
        <div className={clsx(styles.curriculumItem, {})}>
            <div
                className={clsx(
                    styles.title,
                    "flex cursor-pointer p-2 w-full",
                    {
                        [styles.active]: active === 0,
                    }
                )}
                onClick={(e) => handleOpenSubLesson(e)}
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 16 16"
                    fill="currentColor"
                    className={clsx(styles.transfrom, "w-6 h-6 mt-1.5")}
                >
                    <path
                        fillRule="evenodd"
                        d="M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06Z"
                        clipRule="evenodd"
                    />
                </svg>
                <div
                    className={clsx(
                        styles.curriculumItemTitle,
                        "flex w-full justify-between"
                    )}
                >
                    <div className="w-3/4 line-clamp-2 flex-1">
                        {section.title}
                    </div>
                </div>
            </div>

            <div
        id={`section${sectionId}`}
        className={clsx(styles.wrapLesson, "w-full", {
          disabled: active !== 0,
        })}
      >
        {section.lessons &&
          section.lessons.map((lesson, ind) => {
            const unlocked = isLessonUnlocked(lesson.id);
            return (
              <div
                key={ind}
                onClick={() => unlocked && handleVideoSelect(lesson)}
                className={clsx(
                    styles.lessonItem,
                    {
                      [styles.highlighted]: lesson.id === isHighlighted,
                      [styles.unlocked]: unlocked,
                      [styles.locked]: !unlocked,
                    }
                  )}
              >
                <div className="checkbox-wrapper ml-3">
                  <label>
                    <input
                      checked={currentProgress.includes(lesson.id)}
                      id={lesson.id}
                      type="checkbox"
                      onChange={handleChecked}
                      disabled={!unlocked}
                    />
                    <span className="checkbox"></span>
                  </label>
                </div>

                <span>{lesson.title}</span>
                {!unlocked && (
                  <span className="ml-auto text-sm text-red-500">Locked</span>
                )}
              </div>
            );
          })}
      </div>
    </div>
    );
};
function DetailCourse() {
    const userInfo = useSelector((state) => state.login.user);
    const alias = userInfo.email.split("@")[0];
    const [currentVideoUrl, setCurrentVideoUrl] = useState("");
    const [lessonSelected, setLessonSelected] = useState({
        id: "",
    });
    const [lessonId, setLessonId] = useState(null);

    const [totalDuration, setTotalDuration] = useState(0);

    const [totalLesson, setTotalLesson] = useState(0);
    const [currentProgress, setCurrentProgress] = useState([]);
    const [progressObject, setProgressObject] = useState(initFormData);
    const [openModal, setOpenModal] = useState(false);
    const [userProgress, setUserProgress] = useState([]);
    const [currentUser, setCurrentUser] = useState(null);

    const { id } = useParams();
    const handleCloseComment = () => {
        setOpenModal(false);
    };
    const fetchCurrentUserEmail = () => {
        const user = sessionStorage.getItem("user");
        if (user) {
            const parsedUser = JSON.parse(user);
            return parsedUser.email || ""; // Return email if available
        }
        return ""; // Return an empty string if no user is found
    };
    // Fetch user ID from the server
    useEffect(() => {
        const fetchUserId = async () => {
            try {
                const email = fetchCurrentUserEmail();
                if (!email) {
                    console.error("No email found in session storage.");
                    return;
                }
    
                const userId = await dataApi.getUserIdByEmail(email);
                console.log("Returned user ID:", userId); 
                setCurrentUser(userId);
                console.log("Trong"+currentUser)
            } catch (error) {
                console.error("Failed to fetch user ID", error);
            }
        };
    
        fetchUserId();
    }, []);
    
    const handleOpenComment = () => {
        setOpenModal(true);
    };

    const handleVideoSelect = (lesson) => {
        if (lesson.video !== "" && lesson.linkVideo === "") {
          setCurrentVideoUrl(lesson.video);
        } else {
          setCurrentVideoUrl(lesson.linkVideo);
        }
        setLessonSelected(lesson);
      };
    const formatDuration = (totalMinutes) => {
        const hours = Math.floor(totalMinutes / 60);
        const minutes = totalMinutes % 60;
        if (hours > 0 && minutes > 0) {
          return `${hours}h ${minutes}m`;
        } else if (hours > 0) {
          return `${hours}h`;
        } else {
          return `${minutes}m`;
        }
      };
      
    useEffect(() => {
        const fetchApi = async () => {
            try {
                const data = await userApi.getProgress(alias, id);
                let total = 0;
                const lessonFirst = data.content.course.sections[0].lessons[0];
                console.log(lessonFirst)
                const video = lessonFirst.video;
                const linkVideo = lessonFirst.linkVideo;

                data.content.course.sections.map(
                    (section) => (total += section.lessons.length)
                );
                if (data.content.lessonIds !== null) {
                    setCurrentProgress(data.content.lessonIds);
                }

                setLessonSelected(lessonFirst);
                setCurrentVideoUrl(video ? video : linkVideo);
                setLessonId(lessonFirst.id); // Set lessonId directly

                setProgressObject(data.content);
                setTotalLesson(total);
                console.log('LessonSelected:', lessonSelected);
                console.log('LessonSelected.id:', lessonSelected.id);
            } catch (error) {}
        };

        fetchApi();
        if (window.location.pathname.includes("openComment")) {
            setOpenModal(true);
        }
    }, [id, alias]);
    useEffect(() => {
        if (lessonSelected && lessonSelected.id) {
            console.log('LessonSelected updated:', lessonSelected);
            console.log('LessonSelected.id:', lessonSelected.id);
        }
    }, [lessonSelected]);
    useEffect(() => {
        const fetchUserId = async () => {
            try {
                const email = fetchCurrentUserEmail();
                if (!email) {
                    console.error("No email found in session storage.");
                    return;
                }
    
                const userId = await dataApi.getUserIdByEmail(email);
                console.log("Returned user ID:", userId); 
                setCurrentUser(userId);
                console.log("Trong"+currentUser)
            } catch (error) {
                console.error("Failed to fetch user ID", error);
            }
        };
        const fetchUserProgress = async () => {
          try {
            const email = fetchCurrentUserEmail();
                if (!email) {
                    console.error("No email found in session storage.");
                    return;
                }
    
                const userId = await dataApi.getUserIdByEmail(email);
                // console.log("Returned user ID:", userId); 
                // setCurrentUser(userId);
                // console.log("Trong"+currentUser)
            // console.log("test"+currentUser)
            const data = await userApi.getUserProgressForCourse(userId, id);
            console.log(data)
            setUserProgress(data);
          } catch (error) {
            console.error("Error fetching user progress:", error);
          }
        };
        fetchUserId();
        fetchUserProgress();
      }, [currentUser, id]);
      const isLessonUnlocked = (lessonId) => {
        if (userProgress.length === 0) {
          // Only the first lesson is unlocked by default
          return lessonId === progressObject.course.sections[0].lessons[0].id;
        }
        const progress = userProgress.find((lp) => lp.lessonId === lessonId);
        return progress ? progress.unlocked : false;
      };
    
      // Update progress when video progress updates
      const handleProgressUpdate = () => {
        // Refresh user progress
        userApi.getUserProgressForCourse(currentUser, id)
          .then((data) => {
            setUserProgress(data);
          })
          .catch((error) => {
            console.error("Error refreshing user progress:", error);
          });
      };
    useEffect(() => {
        const fetchApi = async () => {
          try {
            const data = await userApi.getProgress(alias, id);
            let totalLessons = 0;
            let totalTime = 0;
            data.content.course.sections.forEach((section) => {
              totalLessons += section.lessons.length;
              section.lessons.forEach((lesson) => {
                totalTime += lesson.duration || 0; // Assuming duration is in minutes
              });
            });
            setTotalLesson(totalLessons);
            setTotalDuration(totalTime);
            setProgressObject(data.content);
            // Rest of your code...
          } catch (error) {}
        };
        fetchApi();
      }, [id, alias]);
      
    return (
        <div className={clsx(styles.wrapperPage)}>
            {/* <div
                className={clsx(
                    styles.headerPage,
                    "flex items-center justify-between b-shadow"
                )}
            >
                <Link to={"/"} className={clsx(styles.logoPage)}>
                    <img src={logoPage} alt="" />
                </Link>
                <h5 className="mb-0 text-center">
                    {progressObject.course.title}
                </h5>
                <div className={clsx(styles.progress)}>
                    Progress: {currentProgress.length}/{totalLesson}
                </div>
            </div> */}
            <Header/>
              {/* Course Header */}
      <div className="bg-gray-50 mt-20">
        <div className="flex items-center h-16 px-8">
          <img src={button} className="h-14 w-14 cursor-pointer" alt="Button Icon" />
          <div className="ml-4">
            <h4 className="text-4xl font-semibold">{progressObject?.course.title}</h4>
            <div className="text-sm text-gray-600 flex items-center mt-1">
              <img src={folder} className="mr-2" alt="Folder Icon" />
              {totalLesson} lectures • {formatDuration(totalDuration)}
            </div>
          </div>
        </div>
      </div>
            <main className={clsx(styles.uiUxCourse)}>
                <div className={clsx(styles.sectionVideo, "w-[90%] h-[600px]")}>
                    <div className={clsx("row", "mx-0")}>
                        <div
                            className={clsx(styles.videoContainer, "col-lg-9")}
                        >
                            <CourseHero
                                video={currentVideoUrl}
                                thumbnail={progressObject.course.thumbnail}
                                lessonId={lessonSelected.id}
                                onProgressUpdate={handleProgressUpdate}
                            />
{/* 
                            <CourseHeader
                                titleHeader={progressObject.course.title}

                            /> */}
                        

                            {/* //!------------ NOTE ----------------*/}
                            {/* <button
                                className={clsx(
                                    styles.sectionComment,
                                    "btnLGBT"
                                )}
                                onClick={handleOpenComment}
                            >
                                <div className="flex gap-2">
                                    Discussion
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        strokeWidth={1.5}
                                        stroke="currentColor"
                                        className="w-5 h-5"
                                    >
                                        <path
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            d="M2.25 12.76c0 1.6 1.123 2.994 2.707 3.227 1.068.157 2.148.279 3.238.364.466.037.893.281 1.153.671L12 21l2.652-3.978c.26-.39.687-.634 1.153-.67 1.09-.086 2.17-.208 3.238-.365 1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z"
                                        />
                                    </svg>
                                </div>
                            </button> */}

                            {/* <div
                                className={clsx(styles.sectionComment)}
                                onClick={handleOpenComment}
                            ></div> */}
                            {/* //!------------ NOTE ----------------*/}
                        </div>
                        <div
                            className={clsx(
                                styles.courseSectionsContainer,
                                "col-lg-3"
                            )}
                        >
                            <section className={styles.courseSection}>
                                <div className={clsx(styles.sectionHeader)}>
                                    <div className={styles.sectionNumber}>
                                        Curriculum
                                    </div>
                                </div>
                                <div className={styles.courseCurriculum}>
                                    {progressObject.course.sections &&
                                        progressObject.course.sections.map(
                                            (section, index) => (
                                                <CurriculumItem
                                                    active={index}
                                                    setCurrentProgress={
                                                        setCurrentProgress
                                                    }
                                                    courseId={id}
                                                    currentProgress={
                                                        currentProgress
                                                    }
                                                    aliasEmail={alias}
                                                    isHighlighted={
                                                        lessonSelected.id
                                                    }
                                                    handleVideoSelect={
                                                        handleVideoSelect
                                                    }
                                                    sectionId={index}
                                                    key={index}
                                                    section={section}
                                                    isLessonUnlocked={isLessonUnlocked}

                                                />
                                            )
                                        )}
                                </div>
                            </section>
                        </div>
                    </div>
                </div>
               
                {/* {openModal && (
                    <Comment
                        courseId={id}
                        lessonId={lessonSelected.id}
                        openModal={openModal}
                        funcCloseModal={handleCloseComment}
                    ></Comment>
                )} */}
                
            </main>
            <div className="h-14 mt-10 bg-white ml-28">
        <h3 className="text-black">
          {lessonSelected.title}
        </h3>
      </div>
      <div className="w-[800px] ml-28">
      {lessonId && (
    <Comment
        courseId={id}
        lessonId={lessonId}
    />
)}
      </div>
 
    </div>
    );
}

export default DetailCourse;

================
File: src/pages/course/index.js
================
import * as React from "react";
import styles from "./Course.module.scss";
import clsx from "clsx";
import { useEffect, useState } from "react";
import { useSelector } from "react-redux";

import { toast } from "sonner";
import * as dataApi from "../../api/apiService/dataService";
import { Link, useParams,useNavigate  } from "react-router-dom";
const CurriculumItem = ({ item, index, isHighlighted }) => {
    const handleOpenSubLesson = () => {
        const sub = document.getElementById(index);
        sub.classList.toggle("disabled");
    };
   
    
    return (
        <div
            className={clsx(styles.curriculumItem, {
                [styles.highlighted]: isHighlighted,
            })}
        >
            <div
                className={clsx(styles.title, "flex  p-2 w-full")}
                onClick={handleOpenSubLesson}
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 16 16"
                    fill="currentColor"
                    class="w-6 h-6 mt-1.5"
                >
                    <path
                        fill-rule="evenodd"
                        d="M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06Z"
                        clip-rule="evenodd"
                    />
                </svg>
                <div
                    className={clsx(
                        styles.curriculumItemTitle,
                        "flex w-full justify-between"
                    )}
                >
                    <div className="w-3/4 line-clamp-2">{item.title}</div>
                    <div className={clsx(styles.subTitle)}>
                        {item.lessons.length} lectures
                    </div>
                </div>
            </div>

            <div
                id={index}
                className={clsx(styles.wrapLesson, "w-full py-2.5 disabled")}
            >
                {item.lessons &&
                    item.lessons.map((lesson, ind) => {
                        return (
                            <div
                                key={ind}
                                className={clsx(
                                    styles.lessonItem,
                                    "flex ml-6 gap-6 py-2"
                                )}
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke-width="1.5"
                                    stroke="currentColor"
                                    class="w-5 h-6"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        d="M3.375 19.5h17.25m-17.25 0a1.125 1.125 0 0 1-1.125-1.125M3.375 19.5h1.5C5.496 19.5 6 18.996 6 18.375m-3.75 0V5.625m0 12.75v-1.5c0-.621.504-1.125 1.125-1.125m18.375 2.625V5.625m0 12.75c0 .621-.504 1.125-1.125 1.125m1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125m0 3.75h-1.5A1.125 1.125 0 0 1 18 18.375M20.625 4.5H3.375m17.25 0c.621 0 1.125.504 1.125 1.125M20.625 4.5h-1.5C18.504 4.5 18 5.004 18 5.625m3.75 0v1.5c0 .621-.504 1.125-1.125 1.125M3.375 4.5c-.621 0-1.125.504-1.125 1.125M3.375 4.5h1.5C5.496 4.5 6 5.004 6 5.625m-3.75 0v1.5c0 .621.504 1.125 1.125 1.125m0 0h1.5m-1.5 0c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125m1.5-3.75C5.496 8.25 6 7.746 6 7.125v-1.5M4.875 8.25C5.496 8.25 6 8.754 6 9.375v1.5m0-5.25v5.25m0-5.25C6 5.004 6.504 4.5 7.125 4.5h9.75c.621 0 1.125.504 1.125 1.125m1.125 2.625h1.5m-1.5 0A1.125 1.125 0 0 1 18 7.125v-1.5m1.125 2.625c-.621 0-1.125.504-1.125 1.125v1.5m2.625-2.625c.621 0 1.125.504 1.125 1.125v1.5c0 .621-.504 1.125-1.125 1.125M18 5.625v5.25M7.125 12h9.75m-9.75 0A1.125 1.125 0 0 1 6 10.875M7.125 12C6.504 12 6 12.504 6 13.125m0-2.25C6 11.496 5.496 12 4.875 12M18 10.875c0 .621-.504 1.125-1.125 1.125M18 10.875c0 .621.504 1.125 1.125 1.125m-2.25 0c.621 0 1.125.504 1.125 1.125m-12 5.25v-5.25m0 5.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125m-12 0v-1.5c0-.621-.504-1.125-1.125-1.125M18 18.375v-5.25m0 5.25v-1.5c0-.621.504-1.125 1.125-1.125M18 13.125v1.5c0 .621.504 1.125 1.125 1.125M18 13.125c0-.621.504-1.125 1.125-1.125M6 13.125v1.5c0 .621-.504 1.125-1.125 1.125M6 13.125C6 12.504 5.496 12 4.875 12m-1.5 0h1.5m-1.5 0c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125M19.125 12h1.5m0 0c.621 0 1.125.504 1.125 1.125v1.5c0 .621-.504 1.125-1.125 1.125m-17.25 0h1.5m14.25 0h1.5"
                                    />
                                </svg>
                                <span>{lesson.title}</span>
                            </div>
                        );
                    })}
            </div>
        </div>
    );
};

const CourseDetails = ({ course, expanded }) => (
    <div
        className={clsx(styles.courseDetailsWrapper, "b-shadow", {
            [styles.expanded]: expanded,
        })}
    >
        <h3 className={styles.courseDetailsTitle}>Curriculum</h3>
        <div className={styles.courseCurriculum}>
            {course.sections.map((item, index) => (
                <>
                    <CurriculumItem
                        key={index}
                        item={item}
                        isHighlighted={index % 2 === 0}
                    />
                </>
            ))}
        </div>
    </div>
);


function Course() {
    const userInfo = useSelector((state) => state.login.user);
    const { id } = useParams(); // Course ID from the route
    const [course, setCourse] = useState(null);
    const [totalLessons, setTotalLessons] = useState(0);
    const [currentUser, setCurrentUserId] = useState(null);
    const navigate = useNavigate();
    console.log(userInfo)
    const fetchCurrentUserEmail = () => {
        const user = sessionStorage.getItem("user");
        if (user) {
            const parsedUser = JSON.parse(user);
            return parsedUser.email || ""; // Return email if available
        }
        return ""; // Return an empty string if no user is found
    };
    // Fetch user ID from the server
    useEffect(() => {
        const fetchUserId = async () => {
            try {
                const email = fetchCurrentUserEmail();
                if (!email) {
                    console.error("No email found in session storage.");
                    return;
                }
    
                const userId = await dataApi.getUserIdByEmail(email);
                console.log("Returned user ID:", userId); 
                setCurrentUserId(userId);
            } catch (error) {
                console.error("Failed to fetch user ID", error);
                toast.error("Failed to fetch user information. Please try again.");
            }
        };
    
        fetchUserId();
    }, []);
    
    
    // Fetch course details
    useEffect(() => {
        const fetchCourseDetails = async () => {
            try {
                const courseData = await dataApi.getCourseById(id);
                console.log("Fetched course data:", courseData);
    
                const sections = courseData?.data?.sections || [];
                const lessonCount = sections.reduce((acc, section) => acc + (section.lessons?.length || 0), 0);
    
                setTotalLessons(lessonCount);
                console.log(courseData.content)
                setCourse(courseData.content); // Update course state
            } catch (error) {
                toast.error("Failed to fetch course details");
                console.error("Error fetching course:", error);
            }
        };
    
        fetchCourseDetails();
    }, [id]);
    
    
    // Handle enrollment
    const handleEnroll = async () => {
        if (!userInfo) {
            toast.error("Please log in to enroll in the course.");
            console.error("Current user is null.");
            return;
          }
        
          try {
            console.log("Enrolling user:", userInfo.email, "in course:", id);
            const enrollData = {
              email: userInfo.email,
              courseId: id,
              lessonIds: [], // Start with an empty list or pass initial lesson IDs if any
            };
            const response = await dataApi.enrollInCourse(enrollData);
            toast.success("Enrolled successfully!");
            // Optionally, navigate to the course detail page
            navigate(`/course/detail/${id}`);
          } catch (error) {
            toast.error("Failed to enroll in the course");
            console.error("Error during enrollment:", error);
          }
    };

    if (!course) {
        return <div>Loading...</div>;
    }


    return (
        <div className={clsx(styles.detailsContainer)}>
            <div className={styles.courseCard}>
                <div className={clsx(styles.content, "row")}>
                    <div
                        className={clsx(
                            styles.courseDetailsWrapper,
                            " col-lg-8"
                        )}
                    >
                        <div
                            className={clsx(
                                styles.courseHeader,
                                styles.someOtherCondition &&
                                    styles.additionalClass
                            )}
                        >
                            <div className={styles.courseInfo}>
                                <h2 className={styles.courseTitle}>
                                    {course.title}
                                </h2>
                                <p className={styles.courseDescription}>
                                    {course.description}
                                </p>
                            </div>
                        </div>
                        <div className={styles.courseMeta}>
                            <div className={styles.tags}>
                                Tags:{" "}
                                {course &&
                                    course.categories &&
                                    course.categories.length > 0 &&
                                    course.categories.map((ca, index) => {
                                        return (
                                            <div
                                                key={index}
                                                className={styles.courseLevel}
                                            >
                                                {ca.name}
                                            </div>
                                        );
                                    })}
                            </div>
                        </div>
                        <div
                            className={clsx(
                                styles.curriculumTitle,
                                "font-semibold"
                            )}
                        >
                            Curriculum
                        </div>

                        <div className={styles.courseCurriculum}>
                            {course.sections &&
                                course.sections.map((item, index) => (
                                    <CurriculumItem
                                        key={index}
                                        index={index}
                                        item={item}
                                    />
                                ))}
                        </div>
                    </div>
                    <div className={clsx("col-lg-4")}>
                        <div
                            className={clsx(
                                styles.sticky,
                                "mx-2 b-shadow rounded-lg"
                            )}
                        >
                            <div className={clsx(styles.courseImages)}>
                                <video
                                    key={course.video}
                                    controls
                                    className="w-full"
                                >
                                    <source
                                        src={course.video}
                                        type="video/mp4"
                                    />
                                </video>
                            </div>
                            <div className={styles.courseDetails}>
                                <div className="my-3">
                                    <div className={clsx(styles.coursePrice)}>
                                        {course.price !== 0
                                            ? "Price: " +
                                              course.price.toLocaleString(
                                                  "vi-VN"
                                              ) +
                                              " VND"
                                            : "Free Course"}
                                    </div>
                                    <Link
                                    onClick={handleEnroll}
                                    className={clsx(styles.courseCta, "w-full")}
                                >
                                    Enroll Now
                                </Link>

                                </div>
                                <div
                                    className={clsx("text-base font-semibold")}
                                >
                                    This course includes:{" "}
                                </div>
                                <div>
                                    <div className={clsx(styles.detailItem)}>
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke-width="1.5"
                                            stroke="currentColor"
                                            class="w-6 h-6"
                                        >
                                            <path
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m5.231 13.481L15 17.25m-4.5-15H5.625c-.621 0-1.125.504-1.125 1.125v16.5c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Zm3.75 11.625a2.625 2.625 0 1 1-5.25 0 2.625 2.625 0 0 1 5.25 0Z"
                                            />
                                        </svg>

                                        <span>
                                            Detailed and in-depth knowledge
                                        </span>
                                    </div>
                                    <div className={clsx(styles.detailItem)}>
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke-width="1.5"
                                            stroke="currentColor"
                                            class="w-6 h-6"
                                        >
                                            <path
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                d="M4.26 10.147a60.438 60.438 0 0 0-.491 6.347A48.62 48.62 0 0 1 12 20.904a48.62 48.62 0 0 1 8.232-4.41 60.46 60.46 0 0 0-.491-6.347m-15.482 0a50.636 50.636 0 0 0-2.658-.813A59.906 59.906 0 0 1 12 3.493a59.903 59.903 0 0 1 10.399 5.84c-.896.248-1.783.52-2.658.814m-15.482 0A50.717 50.717 0 0 1 12 13.489a50.702 50.702 0 0 1 7.74-3.342M6.75 15a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm0 0v-3.675A55.378 55.378 0 0 1 12 8.443m-7.007 11.55A5.981 5.981 0 0 0 6.75 15.75v-1.5"
                                            />
                                        </svg>

                                        <span>Dedicated lecturer</span>
                                    </div>
                                    <div className={clsx(styles.detailItem)}>
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke-width="1.5"
                                            stroke="currentColor"
                                            class="w-6 h-6"
                                        >
                                            <path
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                d="M3.375 19.5h17.25m-17.25 0a1.125 1.125 0 0 1-1.125-1.125M3.375 19.5h1.5C5.496 19.5 6 18.996 6 18.375m-3.75 0V5.625m0 12.75v-1.5c0-.621.504-1.125 1.125-1.125m18.375 2.625V5.625m0 12.75c0 .621-.504 1.125-1.125 1.125m1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125m0 3.75h-1.5A1.125 1.125 0 0 1 18 18.375M20.625 4.5H3.375m17.25 0c.621 0 1.125.504 1.125 1.125M20.625 4.5h-1.5C18.504 4.5 18 5.004 18 5.625m3.75 0v1.5c0 .621-.504 1.125-1.125 1.125M3.375 4.5c-.621 0-1.125.504-1.125 1.125M3.375 4.5h1.5C5.496 4.5 6 5.004 6 5.625m-3.75 0v1.5c0 .621.504 1.125 1.125 1.125m0 0h1.5m-1.5 0c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125m1.5-3.75C5.496 8.25 6 7.746 6 7.125v-1.5M4.875 8.25C5.496 8.25 6 8.754 6 9.375v1.5m0-5.25v5.25m0-5.25C6 5.004 6.504 4.5 7.125 4.5h9.75c.621 0 1.125.504 1.125 1.125m1.125 2.625h1.5m-1.5 0A1.125 1.125 0 0 1 18 7.125v-1.5m1.125 2.625c-.621 0-1.125.504-1.125 1.125v1.5m2.625-2.625c.621 0 1.125.504 1.125 1.125v1.5c0 .621-.504 1.125-1.125 1.125M18 5.625v5.25M7.125 12h9.75m-9.75 0A1.125 1.125 0 0 1 6 10.875M7.125 12C6.504 12 6 12.504 6 13.125m0-2.25C6 11.496 5.496 12 4.875 12M18 10.875c0 .621-.504 1.125-1.125 1.125M18 10.875c0 .621.504 1.125 1.125 1.125m-2.25 0c.621 0 1.125.504 1.125 1.125m-12 5.25v-5.25m0 5.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125m-12 0v-1.5c0-.621-.504-1.125-1.125-1.125M18 18.375v-5.25m0 5.25v-1.5c0-.621.504-1.125 1.125-1.125M18 13.125v1.5c0 .621.504 1.125 1.125 1.125M18 13.125c0-.621.504-1.125 1.125-1.125M6 13.125v1.5c0 .621-.504 1.125-1.125 1.125M6 13.125C6 12.504 5.496 12 4.875 12m-1.5 0h1.5m-1.5 0c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125M19.125 12h1.5m0 0c.621 0 1.125.504 1.125 1.125v1.5c0 .621-.504 1.125-1.125 1.125m-17.25 0h1.5m14.25 0h1.5"
                                            />
                                        </svg>

                                        <span>{totalLessons} lessons</span>
                                    </div>
                                    <div className={clsx(styles.detailItem)}>
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            strokeWidth={1.5}
                                            stroke="currentColor"
                                            className="w-6 h-6"
                                        >
                                            <path
                                                strokeLinecap="round"
                                                strokeLinejoin="round"
                                                d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"
                                            />
                                        </svg>
                                        <span>Full lifetime access</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default Course;

================
File: src/pages/IELTS/WritingSubmission/index.js
================
import React, { useState, useEffect } from "react";
import { submitEssay, getAllWritingTasks } from "../../../api/apiService/dataService";

export default function WritingSubmission() {
    const [writingTasks, setWritingTasks] = useState([]);
    const [selectedTaskId, setSelectedTaskId] = useState(null);
    const [essayContent, setEssayContent] = useState("");
    const [loading, setLoading] = useState(false);
    const [feedback, setFeedback] = useState(null);

    const userId = JSON.parse(sessionStorage.getItem("user"))?.id;

    useEffect(() => {
        const fetchTasks = async () => {
            try {
                const tasks = await getAllWritingTasks();
                setWritingTasks(tasks);

                if (tasks.length > 0) {
                    setSelectedTaskId(tasks[0].id);
                }
            } catch (error) {
                console.error("Error fetching writing tasks:", error);
            }
        };
        fetchTasks();
    }, []);

    const handleSubmit = async () => {
        if (!essayContent.trim()) {
            alert("Please write something before submitting!");
            return;
        }
        if (!selectedTaskId) {
            alert("Please select a writing task!");
            return;
        }
        setLoading(true);
        try {
            const response = await submitEssay({
                userId,
                writingTaskId: selectedTaskId,
                essayContent,
            });
            console.log("Submit Essay Response:", response); // Ghi log phản hồi từ backend
            if (response && response.content && response.content.feedbackJson) {
                const parsedFeedback = JSON.parse(response.content.feedbackJson);
                console.log(parsedFeedback);
                setFeedback(parsedFeedback);
            } else {
                throw new Error("Invalid response structure");
            }
        } catch (error) {
            console.error("Submission failed:", error);
            if (error && error.data && error.data.error && error.data.error.message) {
                alert(`Submission failed: ${error.data.error.message}`);
            } else if (error && error.message) {
                alert(`Submission failed: ${error.message}`);
            } else {
                alert("Submission failed. Please try again.");
            }
        } finally {
            setLoading(false);
        }
    };
    

    return (
        <div className="max-w-4xl mx-auto p-6 bg-white shadow-md rounded-md mt-6">
            <h1 className="text-2xl font-semibold mb-4">IELTS Writing Submission</h1>
            <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700">
                    Select Writing Task:
                </label>
                <select
                    value={selectedTaskId || ""}
                    onChange={(e) => setSelectedTaskId(parseInt(e.target.value))}
                    className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                >
                    {writingTasks.map((task) => (
                        <option key={task.id} value={task.id}>
                            {task.title}
                        </option>
                    ))}
                </select>
            </div>
            {selectedTaskId && (
                <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700">
                        Prompt:
                    </label>
                    <p className="mt-1 text-gray-700">
                        {writingTasks.find((task) => task.id === selectedTaskId)?.prompt}
                    </p>
                </div>
            )}
            <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700">
                    Write your essay:
                </label>
                <textarea
                    rows="10"
                    value={essayContent}
                    onChange={(e) => setEssayContent(e.target.value)}
                    className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    placeholder="Start writing here..."
                ></textarea>
                <p className="mt-2 text-sm text-gray-500">
                    Word Count: {essayContent.trim() ? essayContent.trim().split(/\s+/).length : 0}
                </p>
            </div>
            <div className="flex items-center space-x-4">
                <button
                    onClick={handleSubmit}
                    disabled={loading}
                    className={`px-4 py-2 bg-indigo-600 text-white font-medium rounded-md ${
                        loading ? "opacity-50 cursor-not-allowed" : "hover:bg-indigo-700"
                    }`}
                >
                    {loading ? "Submitting..." : "Submit"}
                </button>
                <button
                    onClick={() => setEssayContent("")}
                    className="px-4 py-2 bg-gray-300 text-gray-700 font-medium rounded-md hover:bg-gray-400"
                >
                    Clear
                </button>
            </div>
            {feedback && (
                <div className="mt-6 p-6 border border-gray-300 rounded-md bg-gray-50">
                    <h2 className="text-2xl font-bold mb-4">AI Feedback</h2>

                    {/* Grammar Errors */}
                    {feedback.grammarErrors && feedback.grammarErrors.length > 0 && (
                        <div className="mb-6">
                            <h3 className="text-xl font-semibold mb-2">Grammatical Errors</h3>
                            {feedback.grammarErrors.map((error, index) => (
                                <div key={index} className="mb-4 pl-4 border-l-2 border-red-500">
                                    <p className="text-md font-medium">
                                        <span className="font-bold">Sentence:</span> {error.sentence}
                                    </p>
                                    <p className="text-sm">
                                        <span className="font-semibold">Error:</span> {error.error}
                                    </p>
                                    <p className="text-sm">
                                        <span className="font-semibold">Recommendation:</span> {error.recommendation}
                                    </p>
                                </div>
                            ))}
                        </div>
                    )}

                    {/* Vocabulary Errors */}
                    {feedback.vocabularyErrors && feedback.vocabularyErrors.length > 0 && (
                        <div className="mb-6">
                            <h3 className="text-xl font-semibold mb-2">Vocabulary Errors</h3>
                            {feedback.vocabularyErrors.map((error, index) => (
                                <div key={index} className="mb-4 pl-4 border-l-2 border-yellow-500">
                                    <p className="text-md font-medium">
                                        <span className="font-bold">Word:</span> {error.word}
                                    </p>
                                    <p className="text-sm">
                                        <span className="font-semibold">Error:</span> {error.error}
                                    </p>
                                    <p className="text-sm">
                                        <span className="font-semibold">Recommendation:</span> {error.recommendation}
                                    </p>
                                </div>
                            ))}
                        </div>
                    )}

                    {/* Overall Feedback */}
                    <div className="mb-6">
                        <h3 className="text-xl font-semibold mb-2">Overall Feedback</h3>
                        <p className="text-sm pl-4 border-l-2 border-blue-500">
                            {feedback.overallFeedback}
                        </p>
                    </div>

                    {/* Overall Score */}
                    <div>
                        <h3 className="text-xl font-semibold mb-2">Overall Score</h3>
                        <p className="text-lg font-bold pl-4 border-l-2 border-green-500">
                            {feedback.overallScore}
                        </p>
                    </div>
                </div>
            )}
        </div>
    );
}

================
File: src/pages/landing/index.js
================
import * as React from "react";
import CourseSection from "../../component/ladingComponent/CourseSection.js";
import CourseCard from "../../component/ladingComponent/CourseCard.js";
import SlideShow from "../../component/ladingComponent/SlideShow.js";
import Footer from "../../layout/footer/index.js";
import loginSlice from "../../redux/reducers/loginSlice.js";
import { useDispatch } from "react-redux";
import banner from '../../assets/images/banner-img.png'
import CategoryCard from "../../component/categories/CattegoryCard.js"
function LandingPageComponent() {
    const dispatch = useDispatch();
    React.useEffect(() => {
        const params = new URLSearchParams(window.location.search);
        const token = params.get("token");
        const lastName = params.get("lastName");
        const email = params.get("email");
        const avatar = params.get("avatar");
        if (token) {
            dispatch(
                loginSlice.actions.setLogin({
                    token,
                    user: {
                        lastName,
                        email,
                        avatar,
                        firstName: "",
                    },
                })
            );
        }
    }, []);
    return (
        <div className="flex flex-col items-center pt-5 bg-neutral-100">
            <main className="w-full">
                <div className="relative mx-auto max-w-screen-xl overflow-hidden my-4 rounded-xl">
                    {/* <SlideShow /> */}
                    <section className="flex flex-col lg:flex-row items-center justify-between py-8 px-4 lg:px-8">
                    <div className="lg:w-1/2 lg:pr-12">
                    <h1 className="text-4xl font-bold mb-4">Learning thet gets you</h1>
                    <p className="text-xl">
                        Skills for your present and your future. Get Started with US
                    </p>
                    </div>
                    <div className="lg:w-full mb-8 lg:mb-0">
                    <img
                        src={banner}
                        width={600}
                        height={400}
                        className="w-full h-auto rounded-lg shadow-lg"
                    />
                    </div>
                </section>
                </div>
                {/* <CourseSection /> */}
                <div className='flex flex-col gap-4 pt-16 items-center justify-center bg-zinc-100'>
                        <h1 className='text-3xl font-medium'>Browse top category </h1>
                        

                        <CategoryCard/>
                    
                        </div>
                <hr />
                <div className="flex items-center justify-center">
                    <CourseCard />
                </div>
            </main>
            <Footer />
        </div>
    );
}

export default LandingPageComponent;

================
File: src/pages/login/index.js
================
import React, { useState, useEffect, Fragment } from "react";
import OAuth2Form from "../../component/auth/OAuth2Form.js";
import * as authService from "../../api/apiService/authService.js";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";
import loginSlice from "../../redux/reducers/loginSlice.js";
import { useDispatch } from "react-redux";
import { Dialog, Transition } from "@headlessui/react";
import ShowPassword from "../../component/auth/ShowPassword.js";
import clsx from "clsx";
import styles from "./Login.module.scss";
import imgbanner from "../../assets/images/Illustrations.png"
export default function Login() {
    const initFormForgotData = {
        email: "",
        code: "",
        password: "",
        confirmPassword: "",
    };
    const [formData, setFormData] = useState({
        email: "",
        password: "",
    });
    const [formForgotData, setFormForgotData] = useState(initFormForgotData);
    const passwordErrorString =
        "Password must have at least 8 characters, including uppercase, normal, and special characters like #@!$...";
    const [errors, setErrors] = useState({});
    const [errorsForgot, setErrosForgot] = useState({});
    const [code, setCode] = useState();
    const [isEmailModalOpen, setEmailModalOpen] = useState(false);
    const [countdown, setCountdown] = useState(0);
    const [validEmailUser, setValidEmailUser] = useState(false);

    const navigate = useNavigate();
    const dispatch = useDispatch();

    const handleGoToSignUp = () => {
        navigate("/sign-up");
    };

    useEffect(() => {
        if (countdown > 0) {
            const timer = setTimeout(() => setCountdown(countdown - 1), 1000);
            return () => clearTimeout(timer);
        }
    }, [countdown]);

    function handleInputChange(event) {
        const { name, value } = event.target;

        setFormData({
            ...formData,
            [name]: value,
        });
        errors[name] = "";
        setErrors(errors);
    }

    const handleInputForgotChange = (e) => {
        const { name, value } = e.target;
        setFormForgotData({
            ...formForgotData,
            [name]: value,
        });
        if (name === "email") {
            setCountdown(0);
        }
        errorsForgot[name] = "";
        setErrosForgot(errorsForgot);
    };

    function handleSubmit(event) {
        event.preventDefault();
        const errors = {};

        Object.keys(formData).forEach((key) => {
            if (formData[key] === "") {
                errors[key] = "This field is required.";
            }
        });

        if (!isPasswordStrong(formData.password)) {
            errors.password =
                "Password must have at least 8 characters, including uppercase, normal, and special characters like #@!$...";
        }

        if (!isValidEmail(formData.email)) {
            errors.email = "Email invalidate";
        }
        if (Object.keys(errors).length > 0) {
            setErrors(errors);
            return;
        }

        const fetchApi = async () => {
            toast.promise(authService.login({ ...formData }), {
                loading: "Loading...",
                success: (data) => {
                    const { token, ...user } = data.content;
                    const payload = {
                        token,
                        user,
                    };
                    dispatch(loginSlice.actions.setLogin(payload));
                    const prePath = sessionStorage.getItem("prevPath");
                    prePath ? navigate(prePath) : navigate("/");
                    sessionStorage.removeItem("prevPath");
                    return "Welcome to Dream Chasers";
                },
                error: (error) => {
                    console.log(error);
                    return "Email or password invalid, please try again";
                },
            });
        };
        fetchApi();
    }

    const handleSubmitSendEmail = (e) => {
        e.preventDefault();
        const errorsForgot = {};
        if (!isValidEmail(formForgotData.email)) {
            errorsForgot.email = "Please enter a valid email";
        }

        if (Object.keys(errorsForgot).length > 0) {
            setErrosForgot(errorsForgot);
            return;
        }

        if (countdown === 0) {
        }
        const fetchApi = () => {
            toast.promise(
                authService.sendResetPasswordEmail(formForgotData.email),
                {
                    loading: "Send email...",
                    success: (res) => {
                        setCode(res);
                        return "Send email successfully";
                    },
                    error: "Email is not registered",
                }
            );
        };

        fetchApi();
        setCountdown(60);
    };

    function isValidEmail(email) {
        const emailRegex = /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/;
        return emailRegex.test(email);
    }

    function isPasswordStrong(password) {
        const passwordRegex =
            /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+])[A-Za-z\d!@#$%^&*()_+]{8,}$/;
        return passwordRegex.test(password);
    }

    const handleForgotPasswordClick = () => {
        setEmailModalOpen(true);
        setValidEmailUser(false);
        setCountdown(0);
        setCode(0);
        setFormForgotData(initFormForgotData);
        setErrosForgot({});
    };

    const closeModal = () => {
        setEmailModalOpen(false);
    };

    const handleForgotSubmit = () => {
        if (!validEmailUser) {
            const errors = {};
            if (formForgotData.email === "") {
                errors.email = "This field is required";
            }
            if (formForgotData.code === "") {
                errors.code = "This field is required";
            }

            if (Object.keys(errors).length > 0) {
                setErrosForgot({ ...errors });
                return;
            }

            if (code != formForgotData.code) {
                errors.code = "Invalid verification the code";
                setErrosForgot({ ...errors });
                return;
            }
            const fetchApi = () => {
                toast.promise(authService.validateCode(formForgotData), {
                    loading: "loading...",
                    success: () => {
                        setValidEmailUser(true);
                        return "Successful authentication";
                    },
                    error: "The verification code is invalid or has expired",
                });
            };
            fetchApi();
            return;
        }

        const errors = {};

        if (formForgotData.password === "") {
            errors.password = "The field is required";
        }

        if (formForgotData.confirmPassword === "") {
            errors.confirmPassword = "The field is required";
        }

        if (
            formForgotData.password !== "" &&
            !isPasswordStrong(formForgotData.password)
        ) {
            errors.password = passwordErrorString;
        }
        console.log(formForgotData.password);

        if (
            formForgotData.confirmPassword !== "" &&
            formForgotData.confirmPassword !== formForgotData.password
        ) {
            errors.confirmPassword = "Confirm password does not match";
        }

        if (Object.keys(errors).length > 0) {
            setErrosForgot({ ...errors });
            return;
        }

        const fetchApi = () => {
            toast.promise(authService.resetPassword(formForgotData), {
                loading: "Processing...",
                success: (data) => {
                    console.log(data);
                    setEmailModalOpen(false);
                    return "Your password has been reset";
                },
                error: (error) => {
                    console.log(error);
                    return "Reset password is error, please try again";
                },
            });
        };

        fetchApi();
    };

    useEffect(() => {
        dispatch(loginSlice.actions.setLogout());
    }, []);
    console.log("re-render");

    return (
        <div className="flex h-screen">
            <div className="hidden md:flex w-1/2 bg-gradient-to-br from-purple-100 to-indigo-100 items-center justify-center object-contain">
                <img
                    src={imgbanner}
                    alt="Illustration"
                    className="max-w-xxl"
                />
            </div>
            <div className="flex w-full md:w-1/2 items-center justify-center mt-10">
            <section className="boxShadow m-auto mt-40 flex flex-col p-10 max-w-full text-base leading-6 bg-white rounded-xl text-neutral-800 w-[540px] max-md:px-5 max-md:mt-10">
                <h2 className="text-4xl font-semibold text-center max-md:max-w-full">
                    Login
                </h2>

                <form onSubmit={handleSubmit} method="post">
                    <div className={clsx(styles.fieldForm, "text-left")}>
                        <label
                            htmlFor="email"
                            className="font-medium max-md:max-w-full"
                        >
                            Email
                        </label>
                        <div
                            className={clsx(
                                styles.input,
                                "flex p-2.5 mt-2.5 bg-gray-50 rounded-lg  text-stone-500 max-md:flex-wrap"
                            )}
                        >
                            <input
                                autoComplete="true"
                                type="email"
                                id="email"
                                name="email"
                                value={formData.email}
                                onChange={handleInputChange}
                                placeholder="Enter your Email"
                                className="flex-1 bg-transparent outline-none"
                            />
                        </div>
                        {errors.email && (
                            <div className="text-red-500 mt-1 text-sm ml-1">
                                {errors.email}
                            </div>
                        )}
                    </div>
                    <div className={clsx(styles.fieldForm, "text-left")}>
                        <label
                            htmlFor="password"
                            className="font-medium max-md:max-w-full"
                        >
                            Password
                        </label>
                        <div
                            className={clsx(
                                styles.input,
                                "flex p-2.5 mt-2.5 bg-gray-50 rounded-lg  text-stone-500 max-md:flex-wrap"
                            )}
                        >
                            <input
                                autoComplete="true"
                                type="password"
                                id="password"
                                name="password"
                                value={formData.password}
                                onChange={handleInputChange}
                                placeholder="Enter your Password"
                                className="flex-1 bg-transparent outline-none"
                            />
                            <ShowPassword
                                passInput={document.getElementById("password")}
                            ></ShowPassword>
                        </div>
                        <div
                            className="text-sm cursor-pointer float-right mt-2 self-stretch relative leading-[150%] text-grey-30 text-right"
                            onClick={handleForgotPasswordClick}
                        >
                            Forgot Password?
                        </div>

                        {errors.password && (
                            <div className="mt-2 text-red-500  text-sm ml-1">
                                {errors.password}
                            </div>
                        )}
                    </div>

                    <button
                        type="submit"
                        className="justify-center px-5 py-3.5 mt-5 text-sm font-medium text-center text-white bg-orange-500 max-md:max-w-full w-full"
                    >
                        Login
                    </button>
                </form>
                <div className="mb-3 flex gap-3 justify-center items-center mt-6 text-sm text-center whitespace-nowrap text-neutral-400 max-md:flex-wrap">
                    <hr className="flex-1 shrink-0 self-stretch my-auto h-px border border-solid bg-zinc-200 border-zinc-200" />
                    <span className="self-stretch">OR</span>
                    <hr className="flex-1 shrink-0 self-stretch my-auto h-px border border-solid bg-zinc-200 border-zinc-200" />
                </div>
                <OAuth2Form></OAuth2Form>
                <p className="flex gap-1.5 justify-center px-20 mt-6 text-center max-md:flex-wrap max-md:px-5">
                    <span>Don't have an account?</span>{" "}
                    <button
                        type="button"
                        to="/sign-up"
                        className="cursor-pointer font-medium underline text-neutral-800"
                        onClick={handleGoToSignUp}
                    >
                        Sign Up
                    </button>
                    <img
                        loading="lazy"
                        src="https://cdn.builder.io/api/v1/image/assets/TEMP/52e263b3f77bfff5dc120002e909b75e45aba8be06ea8bd8be14872be77d8f38?apiKey=9349475655ee4a448868f824f5feb11d&"
                        alt="Arrow icon"
                        className="shrink-0 my-auto w-5 aspect-square"
                    />
                </p>
            </section>
            </div>

            
            <Transition appear show={isEmailModalOpen} as={Fragment}>
                <Dialog as="div" className="relative z-10" onClose={closeModal}>
                    <Transition.Child
                        as={Fragment}
                        enter="ease-out duration-300"
                        enterFrom="opacity-0"
                        enterTo="opacity-100"
                        leave="ease-in duration-200"
                        leaveFrom="opacity-100"
                        leaveTo="opacity-0"
                    >
                        <div className="fixed inset-0 bg-black bg-opacity-25" />
                    </Transition.Child>

                    <div className="fixed inset-0 overflow-y-auto">
                        <div className="flex min-h-full items-center justify-center p-4 text-center">
                            <Transition.Child
                                as={Fragment}
                                enter="ease-out duration-300"
                                enterFrom="opacity-0 scale-95"
                                enterTo="opacity-100 scale-100"
                                leave="ease-in duration-200"
                                leaveFrom="opacity-100 scale-100"
                                leaveTo="opacity-0 scale-95"
                            >
                                <Dialog.Panel className="z-50 w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                                    <form>
                                        <Dialog.Title
                                            as="h2"
                                            className="text-3xl font-semibold text-center max-md:max-w-full"
                                        >
                                            Forgot Password
                                        </Dialog.Title>
                                        {!validEmailUser && (
                                            <>
                                                {" "}
                                                <div
                                                    className={clsx(
                                                        styles.fieldForm,
                                                        "text-left"
                                                    )}
                                                >
                                                    <label
                                                        htmlFor="email"
                                                        className="font-medium max-md:max-w-full"
                                                    >
                                                        Email
                                                    </label>
                                                    <div className="flex p-2.5 mt-2.5 bg-gray-50 rounded-lg border border-gray-100 border-solid text-stone-500 max-md:flex-wrap">
                                                        <input
                                                            type="email"
                                                            id="email"
                                                            name="email"
                                                            value={
                                                                formForgotData.email
                                                            }
                                                            onChange={
                                                                handleInputForgotChange
                                                            }
                                                            placeholder="Enter your Email"
                                                            className="flex-1 bg-transparent outline-none"
                                                        />
                                                    </div>
                                                    {errorsForgot.email && (
                                                        <div className="text-red-500 mt-1 text-sm ml-1">
                                                            {errorsForgot.email}
                                                        </div>
                                                    )}
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.fieldForm,
                                                        "text-left"
                                                    )}
                                                >
                                                    <label
                                                        htmlFor="code"
                                                        className="font-medium max-md:max-w-full"
                                                    >
                                                        Code
                                                    </label>
                                                    <div className="flex mt-2.5 bg-gray-50 rounded-lg border border-gray-100 border-solid text-stone-500 max-md:flex-wrap">
                                                        <input
                                                            type="text"
                                                            id="code"
                                                            name="code"
                                                            placeholder="Enter your Code"
                                                            className=" p-2 flex-1 bg-transparent outline-none"
                                                            onChange={
                                                                handleInputForgotChange
                                                            }
                                                        />
                                                        <button
                                                            className={`px-2 py-1 m-0 rounded-md h-11 w-28 ${
                                                                countdown > 0
                                                                    ? "bg-gray-400 text-white cursor-not-allowed"
                                                                    : "bg-black text-white"
                                                            }  ${
                                                                formForgotData[
                                                                    "email"
                                                                ].length === 0
                                                                    ? "text-whit bg-gray-400"
                                                                    : "bg-black text-white"
                                                            }`}
                                                            onClick={
                                                                handleSubmitSendEmail
                                                            }
                                                            disabled={
                                                                countdown > 0
                                                            }
                                                        >
                                                            {countdown > 0
                                                                ? `${countdown}s`
                                                                : "Send code"}
                                                        </button>
                                                    </div>
                                                    {errorsForgot.code && (
                                                        <div className="text-red-500 mt-1 text-sm ml-1">
                                                            {errorsForgot.code}
                                                        </div>
                                                    )}
                                                </div>
                                            </>
                                        )}
                                        {validEmailUser && (
                                            <>
                                                <div
                                                    className={clsx(
                                                        styles.fieldForm,
                                                        "text-left"
                                                    )}
                                                >
                                                    <label
                                                        htmlFor="email"
                                                        className="font-medium max-md:max-w-full"
                                                    >
                                                        Email
                                                    </label>
                                                    <div className="cursor-not-allowed flex p-2.5 mt-2.5 bg-gray-50 rounded-lg border border-gray-100 border-solid text-stone-500 max-md:flex-wrap">
                                                        <input
                                                            disabled
                                                            type="email"
                                                            id="email"
                                                            name="email"
                                                            placeholder={
                                                                formForgotData.email
                                                            }
                                                            className="cursor-not-allowed flex-1 bg-transparent outline-none"
                                                        />
                                                    </div>
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.fieldForm,
                                                        "text-left"
                                                    )}
                                                >
                                                    <label
                                                        htmlFor="passwordForgot"
                                                        className="font-medium max-md:max-w-full"
                                                    >
                                                        Password
                                                    </label>
                                                    <div className="flex p-2.5 mt-2.5 bg-gray-50 rounded-lg border border-gray-100 border-solid text-stone-500 max-md:flex-wrap">
                                                        <input
                                                            type="password"
                                                            id="passwordForgot"
                                                            name="password"
                                                            value={
                                                                formForgotData.password
                                                            }
                                                            onChange={
                                                                handleInputForgotChange
                                                            }
                                                            placeholder="Enter new password"
                                                            className="flex-1 bg-transparent outline-none"
                                                        />
                                                        <ShowPassword
                                                            passInput={document.getElementById(
                                                                "passwordForgot"
                                                            )}
                                                        ></ShowPassword>
                                                    </div>
                                                    {errorsForgot.password && (
                                                        <div className="text-red-500 mt-1 text-sm ml-1">
                                                            {
                                                                errorsForgot.password
                                                            }
                                                        </div>
                                                    )}
                                                </div>
                                                <div
                                                    className={clsx(
                                                        styles.fieldForm,
                                                        "text-left"
                                                    )}
                                                >
                                                    <label
                                                        htmlFor="cofirmPassword"
                                                        className="font-medium max-md:max-w-full"
                                                    >
                                                        Confirm Password
                                                    </label>
                                                    <div className="flex p-2.5 mt-2.5 bg-gray-50 rounded-lg border border-gray-100 border-solid text-stone-500 max-md:flex-wrap">
                                                        <input
                                                            type="password"
                                                            id="confirmPassword"
                                                            name="confirmPassword"
                                                            placeholder="Enter confirm password"
                                                            className="flex-1 bg-transparent outline-none"
                                                            value={
                                                                formForgotData.confirmPassword
                                                            }
                                                            onChange={
                                                                handleInputForgotChange
                                                            }
                                                        />
                                                        <ShowPassword
                                                            passInput={document.getElementById(
                                                                "confirmPassword"
                                                            )}
                                                        ></ShowPassword>
                                                    </div>
                                                    {errorsForgot.confirmPassword && (
                                                        <div className="text-red-500 mt-1 text-sm ml-1">
                                                            {
                                                                errorsForgot.confirmPassword
                                                            }
                                                        </div>
                                                    )}
                                                </div>
                                            </>
                                        )}
                                        {/* // SUBMIT */}
                                        <div className="mt-4">
                                            <div
                                                className="cursor-pointer justify-center px-5 py-3.5 mt-5 text-sm font-medium text-center text-white bg-black rounded-lg max-md:max-w-full w-full"
                                                onClick={handleForgotSubmit}
                                            >
                                                Submit
                                            </div>
                                        </div>
                                    </form>
                                </Dialog.Panel>
                            </Transition.Child>
                        </div>
                    </div>
                </Dialog>
            </Transition>
        </div>
    );
}

================
File: src/pages/login/Login.module.scss
================
.fieldForm {
    margin-top: 20px;
}

.input {
    border: 1px solid #e0dddd;
    align-items: center !important;
    background: white;
    font-size: 14px;

    &:focus {
        border-color: black;
    }

    svg {
        height: 20px;
        color: black;
    }

    &:focus-within {
        border: 1px solid black !important;
    }
}

================
File: src/pages/notFound/index.js
================
import { Link } from "react-router-dom";
import styles from "./NotFound.module.scss";
import NotFoundImg from "../../assets/images/404.png";
const NotFoundPage = () => {
    return (
        <div className={styles.dashpropsPages404Error}>
            <img
                className={styles.errorImgIcon}
                loading="lazy"
                alt=""
                src={NotFoundImg}
            />
            <div className={styles.mainLayout}>
                <div className={styles.frameParent}>
                    <div className={styles.oopsThePageNotFoundParent}>
                        <h1 className={styles.oopsThePage}>
                            Oops! the page not found.
                        </h1>
                        <div
                            className={styles.orSimplyLeverageTheExpertiWrapper}
                        >
                            <div className={styles.orSimplyLeverage}>
                                Or simply leverage the expertise of our
                                consultation team.
                            </div>
                        </div>
                    </div>
                    <div className={styles.primaryWrapper}>
                        <button className={styles.primary}>
                            <div className={styles.primary1}>
                                <Link className={styles.buttons} to="/">
                                    Go Home
                                </Link>
                            </div>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default NotFoundPage;

================
File: src/pages/notFound/NotFound.module.scss
================
@import url("https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;700&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@600&display=swap");
body {
    margin: 0;
    line-height: normal;
}
:root {
    /* fonts */
    --font-inter: Inter;

    /* font sizes */
    --font-size-sm: 14px;

    /* Colors */
    --gray-200: rgb(245 245 245);
    --theme-colors-primary: black;
    --theme-colors-white: #fff;
    --gray-600: #637381;
    --gray-900: #161c24;

    /* Paddings */
    --padding-xl: 20px;

    /* Border radiuses */
    --br-5xs: 8px;
}

.errorImgIcon {
    width: 706px;
    position: relative;
    max-height: 100%;
    object-fit: contain;
    max-width: 100%;
}
.oopsThePage {
    margin: 0;
    position: relative;
    font-size: inherit;
    letter-spacing: -0.02em;
    font-weight: 700;
    font-family: inherit;
}
.orSimplyLeverage {
    position: relative;
    line-height: 28px;
    width: 400px;
}
.orSimplyLeverageTheExpertiWrapper {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    justify-content: flex-start;
    padding: 0 70px 0 65px;
    text-align: left;
    font-size: var(--font-size-sm);
    color: var(--gray-600);
}
.oopsThePageNotFoundParent {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
}
.buttons {
    position: relative;
    font-size: var(--font-size-sm);
    letter-spacing: -0.03em;
    line-height: 14px;
    font-weight: 600;
    font-family: var(--font-inter);
    color: var(--theme-colors-white);
    text-align: left;
    display: inline-block;
    min-width: 60px;
}
.primary1 {
    border-radius: var(--br-5xs);
    background-color: var(--theme-colors-primary);
    justify-content: flex-start;
    padding: 14px var(--padding-xl);
    white-space: nowrap;
}
.primary,
.primary1,
.primaryWrapper {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
}
.primary {
    cursor: pointer;
    border: 0;
    padding: 0;
    background-color: transparent;
    justify-content: flex-start;
}
.primaryWrapper {
    align-self: stretch;
    justify-content: center;
    padding: 0 27px 0 var(--padding-xl);
}
.frameParent,
.mainLayout {
    display: flex;
    align-items: flex-start;
    max-width: 100%;
}
.frameParent {
    width: 511px;
    flex-direction: column;
    justify-content: flex-start;
    gap: 32px;
}
.mainLayout {
    width: 706px;
    flex-direction: row;
    justify-content: center;
    padding: 0 0 0 7px;
    box-sizing: border-box;
}
.dashpropsPages404Error {
    width: 100%;
    position: relative;
    border-radius: var(--br-5xs);
    background-color: var(--gray-200);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    padding: 120px var(--padding-xl) 231px;
    box-sizing: border-box;
    gap: 37px;
    line-height: normal;
    letter-spacing: normal;
    text-align: center;
    font-size: 42px;
    color: var(--gray-900);
    font-family: var(--font-dm-sans);
}
@media screen and (max-width: 750px) {
    .oopsThePage {
        font-size: 34px;
    }
    .dashpropsPages404Error {
        gap: 18px;
    }
}
@media screen and (max-width: 675px) {
    .orSimplyLeverageTheExpertiWrapper {
        padding-left: 32px;
        padding-right: 35px;
        box-sizing: border-box;
    }
    .frameParent {
        gap: 16px;
    }
}
@media screen and (max-width: 450px) {
    .oopsThePage {
        font-size: 25px;
    }
}

================
File: src/pages/payment/failure/index.js
================
import { Link, useLocation, useParams } from "react-router-dom";
import styles from "../Payment.module.scss";
import clsx from "clsx";
import { useEffect, useState } from "react";
import * as dataApi from "../../../api/apiService/dataService";
function FailurePayment() {
    const [course, setCourse] = useState({
        price: 0,
        discount: 0,
    });
    const location = useLocation();
    const searchParams = new URLSearchParams(location.search);
    const courseId = searchParams.get("courseId");

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getCourseById(courseId);
                setCourse(result.content);
                console.log(result.content);
            } catch (error) {
                console.log(error);
            }
        };

        fetchApi();
    }, [courseId]);

    return (
        <div className="flex ">
            <div className="m-auto flex flex-col justify-center">
                <div className="justify-center flex ml-3 group origin-bottom-right duration-500  hover:-rotate-0 hover:-skew-x-12 hover:-translate-x-6  translate-y-12">
                    <div className="duration-500 group-hover:duration-400 relative rounded-2xl w-80 h-36 bg-zinc-800 text-gray-50 flex flex-col justify-center items-center gap-1 before:-skew-x-12  before:rounded-2xl  before:absolute before:content['']  before:bg-neutral-700 before:right-3 before:top-0 before:w-80 before:h-32 before:-z-10 group-hover:before:-right-3 group-hover:before:skew-x-12 before:duration-500 group-hover:duration-500">
                        <span className="ml-6 text-4xl font-bold">
                            Payment failure!
                        </span>
                        <p className="text-amber-300 font-thin">
                            - Sorry about -
                        </p>
                    </div>
                </div>
                <div className={clsx(styles.boxWrap)}>
                    <h4 className="font-semibold mb-3 uppercase">Your order</h4>
                    <div className={clsx(styles.contentBuild)}>
                        <div className={clsx(styles.itemBuild, "mb-2.5")}>
                            <div>Course:</div>
                            {course && (
                                <div className="font-semibold">
                                    {course.title}
                                </div>
                            )}
                        </div>
                        <div className={clsx(styles.itemBuild, "mb-2.5")}>
                            <div>Original Price:</div>
                            {course.price && (
                                <div>
                                    {course.price.toLocaleString("vi-VN")} VND
                                </div>
                            )}
                        </div>
                        <div className={clsx(styles.itemBuild, "mb-3")}>
                            <div>Discount:</div>
                            {course.discount && (
                                <div>
                                    {course.discount.toLocaleString("vi-VN")}{" "}
                                    VND
                                </div>
                            )}
                        </div>
                        <hr className="cssHr my-3" />
                        <div className={clsx(styles.itemBuild, "mt-3")}>
                            <div className="font-bold text-base">Total</div>
                            <div className="font-bold text-base">
                                {course.discount && course.discount !== 0
                                    ? course.discount.toLocaleString("vi-VN")
                                    : course.price.toLocaleString("vi-VN")}{" "}
                                VND
                            </div>
                        </div>
                    </div>
                </div>
                <div className="text-info-payment text-red-500 text-base font-medium mt-8">
                    Sorry for this unfortunate incident but your payment has
                    failed, please try again.
                </div>
                <div className="flex justify-center gap-2 mt-4">
                    <Link to="/" className="btn-lgbt btn-white">
                        <span>Go home</span>
                    </Link>
                </div>
            </div>
        </div>
    );
}

export default FailurePayment;

================
File: src/pages/payment/index.js
================
import avatar from "../../../src/assets/images/avatar_25.jpg";
import logoVNPAY from "../../../src/assets/images/vnpay-logo.jpg";

import clsx from "clsx";
import styles from "./Payment.module.scss";
import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import * as userApi from "../../api/apiService/authService";
import * as dataApi from "../../api/apiService/dataService";
import { useSelector } from "react-redux";
import { toast } from "sonner";
function Payment() {
    const { id } = useParams();
    const user = useSelector((state) => state.login.user);
    const [paymentInfo, setPaymenInfo] = useState({
        courseId: id,
        email: user.email,
    });
    const [course, setCourse] = useState({
        price: 0,
        discount: 0,
        title: "Temp course",
    });
    const handleMethodPayment = (e) => {
        if (e.target.checked) {
            setPaymenInfo({ ...paymentInfo, method: "vnpay" });
        }
    };

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getCourseById(id);
                setCourse(result.content);
            } catch (error) {
                console.log(error);
            }
        };

        fetchApi();
    }, [id]);

    const handleGetPayment = () => {
        console.log(paymentInfo.method);
        if (paymentInfo.method === "vnpay") {
            console.log("Payment with VNPAY");
            const fetchApi = async () => {
                try {
                    const result = await userApi.getPaymentVNPAY(paymentInfo);
                    window.location.href = result.content;
                } catch (error) {
                    console.log(error);
                }
            };
            fetchApi();
        } else {
            toast.error("Please choose the method payment");
        }
    };

    return (
        <div className={clsx(styles.wrap, "flex")}>
            <div className="mx-auto mt-0 box-md ">
                <div className="row">
                    <div className="col-lg-6">
                        <h2 className="my-8 font-extrabold uppercase">
                            Checkout
                        </h2>
                        <h6 className="font-semibold mb-3 uppercase">
                            Payment method
                        </h6>
                        <div className="">
                            <label
                                htmlFor="vnpay"
                                className={clsx(
                                    styles.itemPayment,
                                    "flex items-center justify-between  mb-12"
                                )}
                            >
                                <div className="flex items-center justify-between">
                                    <div className="mr-2 ml-2 mt-0.5">
                                        <input
                                            onChange={handleMethodPayment}
                                            id="vnpay"
                                            type="checkbox"
                                            className="input"
                                        />
                                        <span className="custom-checkbox"></span>
                                    </div>
                                    <div className={clsx(styles.wrapCard)}>
                                        <svg
                                            viewBox="0 0 40 26"
                                            xmlns="http://www.w3.org/2000/svg"
                                        >
                                            <path
                                                d="m30.19 21.18h-20.19a1.87 1.87 0 0 1 -1.9-1.85v-12.33a1.88 1.88 0 0 1 1.9-1.82h20.2a1.88 1.88 0 0 1 1.89 1.82v12.3a1.88 1.88 0 0 1 -1.9 1.88z"
                                                fill="#212121"
                                                fillRule="evenodd"
                                            />
                                            <g fill="#fff">
                                                <rect
                                                    height="5"
                                                    rx=".5"
                                                    width="5"
                                                    x="25.09"
                                                    y="17.18"
                                                />
                                                <path
                                                    d="m8.09 12.18h24v-3h-24z"
                                                    fillRule="evenodd"
                                                />
                                            </g>
                                        </svg>
                                    </div>
                                    VNPAY Credit/Debit Card
                                </div>
                                <div className={clsx(styles.wrapLogo)}>
                                    <img src={logoVNPAY} alt="" />
                                </div>
                            </label>
                        </div>
                        <h6 className="font-semibold mb-3 uppercase">
                            Order details
                        </h6>
                        <div
                            className={clsx(
                                "flex items-center justify-between",
                                styles.detail
                            )}
                        >
                            <div className="flex gap-2 flex-1">
                                <img
                                    loading="lazy"
                                    src={
                                        course.thumbnail
                                            ? course.thumbnail
                                            : avatar
                                    }
                                    alt="Course images"
                                    className="object-cover"
                                />
                                <div className="text-sm font-bold mr-2">
                                    {course && course.title}
                                </div>
                            </div>
                            <div className="text-sm">
                                {course.price && (
                                    <div className="text-base">
                                        {course.price.toLocaleString("vi-VN")}{" "}
                                        VND
                                    </div>
                                )}
                                {course.discount && course.discount !== 0 && (
                                    <div className="line-through">
                                        {course.discount.toLocaleString(
                                            "vi-VN"
                                        )}{" "}
                                        VND
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                    <div className={clsx(styles.summary, "col-lg-6")}>
                        <div className={clsx(styles.boxWrap)}>
                            <h4 className="font-semibold mb-3 uppercase">
                                Summnary
                            </h4>
                            <div className={clsx(styles.contentBuild)}>
                                <div className={clsx(styles.itemBuild, "mb-2")}>
                                    <div>Original Price:</div>
                                    {course.price && (
                                        <div>
                                            {course.price.toLocaleString(
                                                "vi-VN"
                                            )}{" "}
                                            VND
                                        </div>
                                    )}
                                </div>
                                <div className={clsx(styles.itemBuild, "mb-3")}>
                                    <div>Discount:</div>
                                    {course.discount && (
                                        <div>
                                            {course.discount.toLocaleString(
                                                "vi-VN"
                                            )}{" "}
                                            VND
                                        </div>
                                    )}
                                </div>
                                <hr className="cssHr my-3" />
                                <div className={clsx(styles.itemBuild, "mt-3")}>
                                    <div className="font-bold text-base">
                                        Total
                                    </div>
                                    <div className="font-bold text-base">
                                        {course.discount &&
                                        course.discount !== 0
                                            ? course.discount.toLocaleString(
                                                  "vi-VN"
                                              )
                                            : course.price.toLocaleString(
                                                  "vi-VN"
                                              )}{" "}
                                        VND
                                    </div>
                                </div>
                            </div>
                            <button
                                onClick={handleGetPayment}
                                className={clsx(styles.btnProceed)}
                            >
                                Proceed
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default Payment;

================
File: src/pages/payment/Payment.module.scss
================
.wrap {
    background: linear-gradient(90deg, transparent 50%, #f7f9fa 50%);
    // height: 100vh;
}
.itemPayment {
    border: 1px solid #d1d7dc;
    background: #f7f9fa;
    font-weight: 700;
    line-height: 1.2;
    letter-spacing: 0;
    padding: 6px 0;
    font-size: 14px;
    cursor: pointer;
}

.wrapLogo {
    width: 66px;
    height: 36px;
    border: 1px solid #d1d7dc;
    border-radius: 4px;
    background: #fff;
    margin: 0 0.8rem 0 0;
    img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
}

.wrapCard {
    background: white;
    border: 1px solid #d1d7dc;
    border-radius: 4px;
    margin-right: 6px;
    svg {
        width: 42px;
        height: 28px;
    }
}

.detail {
    img {
        width: 36px;
        height: 36px;
    }
}

.summary {
    max-width: 38.4rem;
    box-sizing: border-box;
    display: table;
    padding: 0 32px 0 48px;
    position: sticky;
    top: 2rem;
    height: calc((100vh - 144px));

    background: #f7f9fa;
}
.boxWrap {
    margin-top: 80px;
}

.itemBuild {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 14px;
    font-weight: 400;
}

.btnProceed {
    position: relative;
    align-items: center;
    border: none;
    cursor: pointer;
    display: inline-flex;
    width: 100%;
    background: black;
    padding: 18px 0;
    margin-top: 28px;
    color: white;
    justify-content: center;
    user-select: none;
    font-weight: 700;
    line-height: 1.2;
    letter-spacing: 0;
    font-size: 20px;
}

================
File: src/pages/payment/success/index.js
================
import { Link, useLocation } from "react-router-dom";
import styles from "../Payment.module.scss";
import clsx from "clsx";
import { useEffect, useState } from "react";
import * as dataApi from "../../../api/apiService/dataService";

function SuccessPayment() {
    const [course, setCourse] = useState({
        price: 0,
        discount: 0,
    });
    const location = useLocation();
    const searchParams = new URLSearchParams(location.search);
    const courseId = searchParams.get("courseId");

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getCourseById(courseId);
                setCourse(result.content);
                console.log(result.content);
            } catch (error) {
                console.log(error);
            }
        };

        fetchApi();
    }, [courseId]);

    return (
        <div className="flex ">
            <div className="m-auto flex flex-col justify-center">
                <div className="justify-center flex ml-3 group origin-bottom-right duration-500  hover:-rotate-0 hover:-skew-x-12 hover:-translate-x-6  translate-y-12">
                    <div className="duration-500 group-hover:duration-400 relative rounded-2xl w-80 h-36 bg-zinc-800 text-gray-50 flex flex-col justify-center items-center gap-1 before:-skew-x-12  before:rounded-2xl  before:absolute before:content['']  before:bg-neutral-700 before:right-3 before:top-0 before:w-80 before:h-32 before:-z-10 group-hover:before:-right-3 group-hover:before:skew-x-12 before:duration-500 group-hover:duration-500">
                        <span className="ml-6 text-4xl font-bold">
                            Payment successfully!
                        </span>
                        <p className="text-amber-300 font-thin">
                            - Thank you -
                        </p>
                    </div>
                </div>
                <div className={clsx(styles.boxWrap)}>
                    <h4 className="font-semibold mb-3 uppercase">Your order</h4>
                    <div className={clsx(styles.contentBuild)}>
                        <div className={clsx(styles.itemBuild, "mb-2.5")}>
                            <div>Course:</div>
                            {course && (
                                <div className="font-semibold">
                                    {course.title}
                                </div>
                            )}
                        </div>
                        <div className={clsx(styles.itemBuild, "mb-2.5")}>
                            <div>Original Price:</div>
                            {course.price && (
                                <div>
                                    {course.price.toLocaleString("vi-VN")} VND
                                </div>
                            )}
                        </div>
                        <div className={clsx(styles.itemBuild, "mb-3")}>
                            <div>Discount:</div>
                            {course.discount && (
                                <div>
                                    {course.discount.toLocaleString("vi-VN")}{" "}
                                    VND
                                </div>
                            )}
                        </div>
                        <hr className="cssHr my-3" />
                        <div className={clsx(styles.itemBuild, "mt-3")}>
                            <div className="font-bold text-base">Total</div>
                            <div className="font-bold text-base">
                                {course.discount && course.discount !== 0
                                    ? course.discount.toLocaleString("vi-VN")
                                    : course.price.toLocaleString("vi-VN")}{" "}
                                VND
                            </div>
                        </div>
                    </div>
                </div>
                <div className="text-info-payment text-base font-medium mt-8">
                    Thanks you for enroll our course, I hope our course will
                    bring you a lot of useful knowledge.
                </div>
                <div className="flex justify-center gap-2 mt-4">
                    <Link to="/" className="btn-lgbt btn-white">
                        <span>Go home</span>
                    </Link>
                    <Link
                        to={`/course/detail/${courseId}`}
                        className="btn-lgbt btn-black"
                    >
                        <span>Study now</span>
                    </Link>
                </div>
            </div>
        </div>
    );
}

export default SuccessPayment;

================
File: src/pages/Post/create/CreatePost.module.scss
================
@import "../../../component/globalStyles/GlobalStyles.scss";
.formField {
    position: relative;
    border-radius: 8px;
}
.formLabel {
    position: absolute;
    transform: translateY(-50%);
    left: 14px;
    font-size: 15px;
    background-color: rgb(255, 255, 255);
    user-select: none;
    color: $label-gray;
    transition: 200ms ease-in-out;
    top: 0;
    font-weight: 600;
    font-size: 14px;
    background-color: white;
}
.formInput {
    border: 0px;
    background: none;
    margin: 0px;
    -webkit-tap-highlight-color: transparent;
    display: block;
    min-width: 0px;
    width: 100%;
    animation-duration: 10ms;
    line-height: 23px;
    border-radius: 8px;
    padding: 16.5px 14px;
    border: 1px solid $border-color;
    font-weight: 600;
    font-size: 24px;

    &:focus + .formLabel {
        top: 0;
        font-weight: 600;
        font-size: 16px;
        background-color: white;
        color: rgb(33, 43, 54);
    }

    &:focus + .formLabel.descInput {
        top: 0;
        transform: translateY(-50%);
        font-weight: 600;
        font-size: 14px;
        background-color: white;
        color: rgb(33, 43, 54);
    }
}

================
File: src/pages/Post/create/index.js
================
import React, { useCallback, useEffect, useMemo, useState } from "react";
import clsx from "clsx";
import styles from "./CreatePost.module.scss";
import ReactQuill from "react-quill";
import "react-quill/dist/quill.snow.css";
import "quill-image-uploader/dist/quill.imageUploader.min.css";
import ImageUploader from "quill-image-uploader";
import { Quill } from "react-quill/lib";
import { toast } from "sonner";
import * as dataApi from "../../../api/apiService/dataService";
import * as userApi from "../../../api/apiService/authService";
import { legacy_createStore } from "@reduxjs/toolkit";
import { useSelector } from "react-redux";
import { Link } from "react-router-dom";

const init = {
    title: "",
    content: "",
};

const handleUpload = (file) => {
    if (!file) {
        return;
    }
    const fetchApi = async () => {
        try {
            const result = await dataApi.uploadImg(file);
            return result.content;
        } catch (error) {
            console.log(error);
        }
    };

    return fetchApi();
};

Quill.register("modules/imageUploader", ImageUploader);
function CreatePost() {
    const [post, setPost] = useState(init);
    const user = useSelector((state) => state.login.user);
    const handleChangeQuill = (content, delta, source, editor) =>
        setPost({ ...post, content: content });

    // const handleCreatePost = () => {
    //     toast.promise(userApi.createPost({ ...post, email: user.email }), {
    //         loading: "loading...",
    //         success: (result) => {
    //             return result.mess;
    //         },
    //         error: (error) => {
    //             console.log(error);
    //             return error.mess;
    //         },
    //     });
    // };

    return (
        <div className="container mt-10">
            <div className="wrap">
                <h1 className="font-bold text-3xl uppercase ">Create Post</h1>
                <div className={clsx(styles.wrap, "mt-10")}>
                    <form>
                        <div className={clsx(styles.formField, "text-xl ")}>
                            <textarea
                                required
                                value={post.title}
                                onChange={(e) =>
                                    setPost({
                                        ...post,
                                        title: e.target.value,
                                    })
                                }
                                name="title"
                                className={clsx(styles.formInput)}
                                placeholder="Enter a title..."
                                type="text"
                            />
                            <label className={clsx(styles.formLabel)}>
                                Title
                            </label>
                        </div>
                        <div className="mt-6">
                            <ReactQuill
                                theme="snow"
                                value={post.content || ""}
                                onChange={(content, delta, source, editor) => {
                                    handleChangeQuill(
                                        content,
                                        delta,
                                        source,
                                        editor
                                    );
                                }}
                                modules={toolbar}
                                formats={formats}
                            ></ReactQuill>
                        </div>
                    </form>
                </div>

                <Link
                    to={"/me/post/create/sub"}
                    className="cursor-pointer hover:opacity-80z w-auto rounded-lg inline-block float-end mt-4 px-4 py-2 text-white bg-black font-semibold text-base"
                >
                    Publish
                </Link>
            </div>
        </div>
    );
}

export default CreatePost;

const toolbar = {
    toolbar: {
        container: [
            [{ header: "1" }, { header: "2" }],
            [{ size: [] }],
            ["bold", "italic", "underline", "strike"],
            [
                { list: "ordered" },
                { list: "bullet" },
                { indent: "-1" },
                { indent: "+1" },
            ],
            ["link", "image"],
            ["clean"],
        ],
        // handlers: {
        //     image: imageHandler,
        // },
    },
    imageUploader: {
        upload: handleUpload,
    },
    clipboard: {
        matchVisual: false,
    },
};

const formats = [
    "header",
    "size",
    "bold",
    "italic",
    "underline",
    "strike",
    "list",
    "bullet",
    "indent",
    "link",
    "image",
    "imageBlot",
];

================
File: src/pages/Post/create/subContent/index.js
================
import styles from "../../../admin/Course/create/CreateCourse.module.scss";
import clsx from "clsx";
import btnClose from "../../../../assets/images/btnClose.svg";
import fileSelect from "../../../../assets/images/fileSelect.svg";
import { useState } from "react";
import React from "react";
import CreatableSelect from "react-select/creatable";

const options = ["Java", "React", "Node", "Python", "C++", "C#"].map(
    (option) => ({
        value: option,
        label: option,
    })
);

const customStyles = {
    control: (provided) => ({
        ...provided,
        height: 50,
    }),
};
function SubContent() {
    const [thumbnail, setThumbnail] = useState(null);
    const [tags, setTags] = useState([]);
    const handleRemovePreview = () => {
        setThumbnail(null);
    };

    const handleChangeTag = (e) => {
        if (tags.length <= 4 && e.length <= 4) {
            setTags(e);
        }
    };

    const handlePublish = () => {
        console.log("object");
    };

    return (
        <div className="container mt-10">
            <div className="row">
                <div className="col-lg-6">
                    <div className="px-4">
                        <span className="font-semibold text-lg">Preview</span>
                        <div className={clsx("mt-2 text-sm font-light")}>
                            Adding an attractive thumbnail picture will make
                            your article more attractive to readers.
                        </div>
                        <div className="flex overflow-hidden">
                            <div
                                className={clsx(
                                    styles.formField,
                                    "w-full overflow-hidden"
                                )}
                            >
                                <label
                                    htmlFor="thumbnail"
                                    style={{
                                        backgroundImage: thumbnail
                                            ? `url(${thumbnail})`
                                            : `url(${fileSelect})`,
                                        backgroundSize: "cover",
                                        backgroundPosition: "50%",
                                    }}
                                    className={clsx(
                                        styles.formLabel2,
                                        styles.labelFile,
                                        "h-52 p-0"
                                    )}
                                ></label>
                                <button
                                    onClick={handleRemovePreview}
                                    className={clsx(styles.btnClosePreview)}
                                >
                                    <img src={btnClose} alt="" />
                                </button>
                                <input
                                    onChange={(e) =>
                                        setThumbnail(
                                            URL.createObjectURL(
                                                e.target.files[0]
                                            )
                                        )
                                    }
                                    name="thumbnail"
                                    id="thumbnail"
                                    type="file"
                                    hidden
                                    accept=".jpg, .jpeg, .png"
                                />
                            </div>
                        </div>
                    </div>
                </div>
                <div className="col-lg-6">
                    <div className="px-4">
                        <div className="text-sm font-light mb-3">
                            Add up to 4 tags to let readers know what your post
                            is about.
                        </div>
                        <CreatableSelect
                            isMulti
                            value={tags}
                            options={options}
                            onChange={handleChangeTag}
                            styles={customStyles}
                        />
                        <div>
                            <button
                                className="cursor-pointer hover:opacity-80z w-auto rounded-lg inline-block float-end mt-4 px-4 py-2 text-white bg-black font-medium text-sm"
                                onClick={handlePublish}
                            >
                                Publist Now
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default SubContent;

================
File: src/pages/Post/index.js
================
import { Link } from "react-router-dom";
import styles from "./Post.module.scss";
import clsx from "clsx";
import { useEffect, useState } from "react";
import * as dataApi from "../../api/apiService/dataService";
import avatar from "../../assets/images/avatar_25.jpg";

const PostItem = () => {
    return (
        <div className="boxShadow rounded-lg border-solid border border-gray-400">
            <div className={clsx("px-3 py-3")}>
                <div className={clsx("flex justify-between")}>
                    <div className="flex">
                        <img
                            loading="lazy"
                            className="mr-3 w-9 h-9 rounded-full"
                            src={avatar}
                            alt="Avatar"
                        />
                        <span className="text-sm font-semibold self-center">
                            Nguyen Thanh
                        </span>
                    </div>
                    <div className="cursor-pointer hover:opacity-80">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            strokeWidth={1.5}
                            stroke="currentColor"
                            className="size-6"
                        >
                            <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"
                            />
                        </svg>
                    </div>
                </div>
                <div className="flex">
                    <div className="pr-4 flex-1">
                        <div className={clsx("mt-2.5 flex justify-between ")}>
                            <div>
                                <span className="font-bold text-lg line-clamp-3">
                                    Config Zsh with ubuntuConfig Zsh with
                                    ubuntuConfig Zsh withConfig Zsh with
                                    ubuntuConfig Zsh with ubuntuConfig Zsh
                                </span>
                                <span className="text-sm mt-2 font-light line-clamp-2">
                                    Lorem ipsum dolor sit amet consectetur
                                    adipisicing elit. Minus soluta quas
                                    blanditiis, rem modi doloremque nam
                                    asperiores veniam eius harum culpa ea vel
                                    laboriosam quaerat! Vel obcaecati rem
                                    blanditiis voluptatum?
                                </span>
                            </div>
                        </div>
                        <div className={clsx("pt-2.5")}>
                            <div
                                className={clsx(
                                    styles.sub,
                                    "text-xs flex items-center gap-2"
                                )}
                            >
                                <span className="bg-gray-200 rounded-xl px-2 py-1 font-medium ">
                                    Ubuntu
                                </span>
                                <span className="font-medium">
                                    {" "}
                                    1 month ago
                                </span>
                            </div>
                        </div>
                    </div>
                    <div className="max-h-32 w-52">
                        <img
                            className="w-full h-full block rounded-lg object-cover"
                            src="https://files.fullstack.edu.vn/f8-prod/blog_posts/10266/6628ed851ef83.png"
                            alt="post thumbnail"
                        />
                    </div>
                </div>
            </div>
        </div>
    );
};

function Post() {
    const [page, setPaeg] = useState(0);
    const [size, setSize] = useState(5);
    const [posts, setPosts] = useState([]);

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await dataApi.getPosts(page, size);
                console.log(result);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, [size, page]);
    return (
        <div className="flex flex-wrap gap-5 mx-auto max-w-screen-xl text-start mt-10">
            <div className="container">
                <div className="flex justify-between items-center">
                    <h1 className={clsx("uppercase font-bold text-3xl")}>
                        featured article
                    </h1>
                    <Link
                        to={"/me/post/create"}
                        className="hover:opacity-80 px-3 py-3 rounded-lg bg-black text-white cursor-pointer"
                    >
                        Create post
                    </Link>
                </div>
                <span>
                    Collection of articles sharing experiences of self-learning
                    online programming and web programming techniques.
                </span>
                <div className="wrap">
                    <div className={clsx("mt-8")}>
                        <PostItem></PostItem>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default Post;

================
File: src/pages/Quiz/VocabularyPage.js
================
import React from "react";
import FlashcardSetComponent from "./FlashcardSet";
import VocabularyManager from "./VocabularyManager";

const VocabularyPage = () => {
    const userId = JSON.parse(sessionStorage.getItem("user"))?.id;

    return (
        <div className="max-w-6xl mx-auto p-6 bg-gray-100 min-h-screen">
            <h1 className="text-3xl font-bold mb-6 text-center">Vocabulary Learning</h1>
            <FlashcardSetComponent userId={userId} />
            <VocabularyManager userId={userId} />
        </div>
    );
};

export default VocabularyPage;

================
File: src/pages/searchResult/index.js
================
import React, { useEffect, useState } from "react";
import { Link, useParams } from "react-router-dom";
import styles from "./searchResult.module.scss";
import { getCourseByName } from "../../api/apiService/dataService";

const SearchResults = () => {
    const { query } = useParams();
    const [results, setResults] = useState([]);
    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await getCourseByName(query, 0, 10);
                setResults(response.content); // Assuming the API response structure
            } catch (error) {
                console.error("Error fetching courses:", error);
            }
        };

        if (query) {
            fetchData();
        }
    }, [query]);

    return (
        <div className={styles.container}>
            <div className={styles.header}>
                <h1>{query}</h1>
            </div>
            <div className={styles.results}>
                <h2>Khóa học</h2>
                {results.map((result, index) => (
                    <div key={index} className={styles.resultItem}>
                        <div className={styles.imageWrapper}>
                            <img src={result.thumbnail} alt={result.title} />
                        </div>
                        <div className={styles.contentWrapper}>
                            <h3>
                                <Link to={`/courses/${result.id}`}>
                                    {result.title}
                                </Link>
                            </h3>
                            <p>{result.description}</p>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default SearchResults;

================
File: src/pages/searchResult/searchResult.module.scss
================
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 32px 16px;

    @media (max-width: 768px) {
        padding: 16px;
    }
}

.header {
    margin-bottom: 24px;

    h1 {
        font-size: 2.5rem;
        font-weight: bold;
        color: #333;

        @media (max-width: 768px) {
            font-size: 2rem;
        }
    }
}

.results {
    h2 {
        font-size: 1.5rem;
        font-weight: bold;
        color: #333;
        margin-bottom: 16px;
        border-bottom: 2px solid #000;
        padding-bottom: 4px;
    }
}

.resultItem {
    display: flex;
    gap: 16px;
    padding: 16px 0;
    border-bottom: 1px solid #e0e0e0;

    &:last-child {
        border-bottom: none;
    }

    @media (max-width: 768px) {
        flex-direction: column;
    }
}

.imageWrapper {
    flex-shrink: 0;

    img {
        width: 150px;
        height: 100px;
        object-fit: cover;
        border-radius: 8px;

        @media (max-width: 768px) {
            width: 100%;
            height: auto;
        }
    }
}

.contentWrapper {
    display: flex;
    flex-direction: column;
    justify-content: center;

    h3 {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1a202c;
        margin-bottom: 8px;

        a {
            text-decoration: none;
            color: inherit;
        }
    }

    p {
        font-size: 1rem;
        color: #4a5568;
    }
}

================
File: src/pages/signUp/index.js
================
import * as React from "react";
import { useState, useEffect } from "react";
import OAuth2Form from "../../component/auth/OAuth2Form.js";
import * as authService from "../../api/apiService/authService.js";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";
import eyeSlash from "../../assets/images/eye-slash.png";
import { useDispatch, useSelector } from "react-redux";
import loginSlice from "../../redux/reducers/loginSlice.js";
import styles from "../login/Login.module.scss";
import clsx from "clsx";
export default function SignUp() {
    const [lastClickTime, setLastClickTime] = useState(0);
    const [countdown, setCountdown] = useState(0);
    const [formData, setFormData] = useState({
        firstName: "",
        lastName: "",
        email: "",
        password: "",
        code: "",
    });
    const [errors, setErrors] = useState({});
    const [code, setCode] = useState();
    const navigate = useNavigate();
    const dangLogin = useSelector((state) => state.login.isLogin);
    const dispatch = useDispatch();

    const handleGoToLogin = () => {
        if (dangLogin) return;
        dispatch(loginSlice.actions.setLogout());
        navigate("/login");
    };

    useEffect(() => {
        if (countdown > 0) {
            const timer = setInterval(() => {
                setCountdown((prevCount) => prevCount - 1);
            }, 1000);
            return () => clearInterval(timer);
        }
    }, [countdown]);

    function handleInputChange(event) {
        const { name, value } = event.target;
        if (name === "email") {
            setCountdown(0);
        }
        setFormData({
            ...formData,
            [name]: value,
        });
        errors[name] = "";
        setErrors(errors);
    }

    function handleOtpButtonClick() {
        const currentTime = new Date().getTime();
        if (!isValidEmail(formData["email"])) {
            errors.email = "Please enter a valid email";
            setErrors((err) => {
                return { ...err };
            });
            return;
        }
        if (countdown === 0) {
            const fetchApi = async () => {
                toast.promise(authService.sendMail(formData["email"]), {
                    loading: "Sending mail...",
                    success: (result) => {
                        console.log(result);
                        setCode(result);
                        return "Send email successfully";
                    },
                    error: (err) => {
                        return err;
                    },
                });
            };
            fetchApi();
            setLastClickTime(currentTime);
            setCountdown(60);
        }
    }

    function handleSubmit(event) {
        event.preventDefault();
        const errors = {};

        Object.keys(formData).forEach((key) => {
            if (!formData[key]) {
                errors[key] = "This field is required.";
            }
        });

        if (!isPasswordStrong(formData.password)) {
            errors.password =
                "Password must have at least 8 characters, including uppercase, normal, and special characters like #@!$...";
        }

        if (!isValidEmail(formData.email)) {
            errors.email = "Email invalidate";
        }

        if (code != document.querySelector("#code").value) {
            errors.code = "The code is invalid";
            setErrors(errors);
        }

        if (
            formData["confirmPassword"] !== "" &&
            formData["password"] !== "" &&
            formData["confirmPassword"] !== formData["password"]
        ) {
            errors.confirmPassword = "Confirm password doesn't match";
        }
        if (Object.keys(errors).length > 0) {
            setErrors(errors);
            return;
        }
        const fetchApi = async () => {
            toast.promise(authService.register({ ...formData }), {
                loading: "Loading...",
                success: () => {
                    // nhận mã 200 - ok
                    navigate("/login");
                    return "Sign up successfully";
                },
                error: "Error registering",
            });
        };
        fetchApi();
    }
    function isValidEmail(email) {
        const emailRegex = /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/;
        return emailRegex.test(email);
    }

    useEffect(() => {
        if (formData["email"] === "") {
            setCountdown(0);
        }
    });

    function isPasswordStrong(password) {
        const passwordRegex =
            /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+])[A-Za-z\d!@#$%^&*()_+]{8,}$/;
        return passwordRegex.test(password);
    }

    function handleShowPassword(e, name) {
        let passInput = document.getElementById(name);

        if (passInput.type === "password") {
            passInput.type = "text";
            e.target.src =
                "https://cdn.builder.io/api/v1/image/assets/TEMP/a8819b1cf48d19a6e95bc57cb5d373ec0162742f3cfe62b7ec31b90b0b48de06?apiKey=9349475655ee4a448868f824f5feb11d&";
        } else {
            passInput.type = "password";
            e.target.src = eyeSlash;
        }
    }

    return (
        <div className="w-full flex">
            <section className="boxShadow m-auto flex flex-col p-10 mt-10 max-w-full text-base leading-6 bg-white rounded-xl text-neutral-800 w-[540px] max-md:px-5 max-md:mt-10">
                <h2 className="text-4xl font-semibold text-center max-md:max-w-full">
                    Sign Up
                </h2>

                <form onSubmit={handleSubmit} method="post">
                    <div className="flex mt-10">
                        <div className="flex-1 mr-5">
                            <div className="text-left">
                                <label
                                    htmlFor="firstName"
                                    className="font-medium max-md:max-w-full"
                                >
                                    First Name
                                </label>
                                <input
                                    type="text"
                                    id="firstName"
                                    name="firstName"
                                    placeholder="Enter your First Name"
                                    value={formData.firstName}
                                    onChange={handleInputChange}
                                    className={clsx(
                                        styles.input,
                                        `justify-center p-2.5 mt-2.5 
                                    bg-white text-sm rounded-lg  
                                    text-stone-500 max-md:max-w-full w-full outline-none`
                                    )}
                                />
                                {errors.firstName !== "" && (
                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                        {errors.firstName}
                                    </div>
                                )}
                            </div>
                        </div>
                        <div className={clsx("flex-1 ml-5")}>
                            <div className="text-left">
                                <label
                                    htmlFor="lastName"
                                    className="font-medium max-md:max-w-full"
                                >
                                    Last Name
                                </label>
                                <input
                                    type="text"
                                    id="lastName"
                                    name="lastName"
                                    placeholder="Enter your Last Name"
                                    value={formData.lastName}
                                    onChange={handleInputChange}
                                    className={clsx(
                                        styles.input,
                                        `justify-center p-2.5 mt-2.5 
                                    bg-white text-sm rounded-lg  
                                    text-stone-500 max-md:max-w-full w-full outline-none`
                                    )}
                                />
                                {errors.lastName && (
                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                        {errors.lastName}
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                    <div className={clsx(styles.fieldForm, "text-left")}>
                        <label
                            htmlFor="email"
                            className="font-medium max-md:max-w-full"
                        >
                            Email
                        </label>
                        <div
                            className={clsx(
                                styles.input,
                                "flex p-2.5 mt-2.5 bg-white text-sm rounded-lg text-stone-500 max-md:flex-wrap"
                            )}
                        >
                            <input
                                type="email"
                                id="email"
                                name="email"
                                value={formData.email}
                                onChange={handleInputChange}
                                placeholder="Enter your Email"
                                className="flex-1 bg-transparent outline-none"
                            />
                        </div>
                        {errors.email && (
                            <div className="text-red-500 mt-1 text-sm ml-1">
                                {errors.email}
                            </div>
                        )}
                    </div>
                    <div className={clsx(styles.fieldForm, "text-left")}>
                        <label
                            htmlFor="password"
                            className="font-medium max-md:max-w-full"
                        >
                            Password
                        </label>
                        <div
                            className={clsx(
                                styles.input,
                                "flex p-2.5 mt-2.5 bg-white text-sm rounded-lg text-stone-500 max-md:flex-wrap"
                            )}
                        >
                            <input
                                type="password"
                                id="password"
                                name="password"
                                value={formData.password}
                                onChange={handleInputChange}
                                placeholder="Enter your Password"
                                className="flex-1 bg-transparent outline-none"
                            />
                            <img
                                loading="lazy"
                                src="https://cdn.builder.io/api/v1/image/assets/TEMP/a8819b1cf48d19a6e95bc57cb5d373ec0162742f3cfe62b7ec31b90b0b48de06?apiKey=9349475655ee4a448868f824f5feb11d&"
                                // src={eyeSlash}
                                alt="Eye icon"
                                className="cursor-pointer shrink-0 w-6 aspect-square"
                                onClick={(e) =>
                                    handleShowPassword(e, "password")
                                }
                            />
                        </div>

                        {errors.password && (
                            <div className="text-red-500 mt-1 text-sm ml-1">
                                {errors.password}
                            </div>
                        )}
                    </div>
                    <div className={clsx(styles.fieldForm, "text-left")}>
                        <label
                            htmlFor="confirmPassword"
                            className="font-medium max-md:max-w-full"
                        >
                            Confirm Password
                        </label>
                        <div
                            className={clsx(
                                styles.input,
                                "flex p-2.5 mt-2.5 bg-white text-sm rounded-lg text-stone-500 max-md:flex-wrap"
                            )}
                        >
                            <input
                                type="password"
                                name="confirmPassword"
                                id="confirmPassword"
                                // value={formData.confirmPassword}
                                onChange={handleInputChange}
                                placeholder="Enter your confirm Password"
                                className="flex-1 bg-transparent outline-none"
                            />
                            <img
                                loading="lazy"
                                src="https://cdn.builder.io/api/v1/image/assets/TEMP/a8819b1cf48d19a6e95bc57cb5d373ec0162742f3cfe62b7ec31b90b0b48de06?apiKey=9349475655ee4a448868f824f5feb11d&"
                                alt="Eye icon"
                                className="cursor-pointer shrink-0 w-6 aspect-square"
                                onClick={(e) =>
                                    handleShowPassword(e, "confirmPassword")
                                }
                            />
                        </div>

                        {errors.confirmPassword && (
                            <div className="text-red-500 mt-1 text-sm ml-1">
                                {errors.confirmPassword}
                            </div>
                        )}
                    </div>
                    <div className={clsx(styles.fieldForm, "text-left")}>
                        <label
                            htmlFor="code"
                            className="font-medium max-md:max-w-full"
                        >
                            Code
                        </label>
                        <div
                            className={clsx(
                                styles.input,
                                "flex mt-2.5 bg-white text-sm rounded-lg text-stone-500 max-md:flex-wrap"
                            )}
                        >
                            <input
                                type="text"
                                id="code"
                                name="code"
                                placeholder="Enter your Code"
                                className=" p-2 flex-1 bg-transparent outline-none"
                                onChange={handleInputChange}
                            />
                            <button
                                className={`px-2 py-1 m-0 rounded-md h-11 w-28 ${
                                    countdown > 0
                                        ? "bg-gray-400 text-white cursor-not-allowed"
                                        : "bg-black text-white"
                                }  ${
                                    formData["email"].length === 0
                                        ? "text-whit bg-gray-400"
                                        : "bg-black text-white"
                                }`}
                                onClick={(e) => {
                                    e.preventDefault();
                                    handleOtpButtonClick();
                                }}
                                disabled={countdown > 0}
                            >
                                {countdown > 0 ? `${countdown}s` : "Send code"}
                            </button>
                        </div>
                    </div>
                    {errors.code && (
                        <div className="text-left text-red-500 mt-1 text-sm ml-1">
                            {errors.code}
                        </div>
                    )}
                    <button
                        type="submit"
                        className="justify-center px-5 py-3.5 mt-5 text-sm font-medium text-center text-white bg-black rounded-lg max-md:max-w-full w-full"
                    >
                        Sign Up
                    </button>
                </form>
                <div className="mb-3 flex gap-3 justify-center items-center mt-6 text-sm text-center whitespace-nowrap text-neutral-400 max-md:flex-wrap">
                    <hr className="flex-1 shrink-0 self-stretch my-auto h-px border border-solid bg-zinc-200 border-zinc-200" />
                    <span className="self-stretch">OR</span>
                    <hr className="flex-1 shrink-0 self-stretch my-auto h-px border border-solid bg-zinc-200 border-zinc-200" />
                </div>
                <OAuth2Form></OAuth2Form>
                <p className="flex gap-1.5 justify-center px-20 mt-6 text-center max-md:flex-wrap max-md:px-5">
                    <span>Already have an account?</span>{" "}
                    <button
                        onClick={handleGoToLogin}
                        type="button"
                        to="/login"
                        className="cursor-pointer font-medium underline text-neutral-800"
                    >
                        Login
                    </button>
                    <img
                        loading="lazy"
                        src="https://cdn.builder.io/api/v1/image/assets/TEMP/52e263b3f77bfff5dc120002e909b75e45aba8be06ea8bd8be14872be77d8f38?apiKey=9349475655ee4a448868f824f5feb11d&"
                        alt="Arrow icon"
                        className="shrink-0 my-auto w-5 aspect-square"
                    />
                </p>
            </section>
        </div>
    );
}

================
File: src/pages/user/courseFilterPage/component/CoursesComponent.js
================
import React, { useEffect, useState } from "react";
import { getCoursesByCategory, getAllCourse, getCourseByName } from "../../../../api/apiService/dataService";
import { CourseCard } from "../../../../component/ladingComponent/CourseCard";

const CoursesComponent = ({ filteredCategories, searchTerm, currentPage, onPageChange }) => {
  const [courses, setCourses] = useState([]);
  const coursesPerPage = 10; // Number of courses per page

  useEffect(() => {
    const fetchCourses = async () => {
      try {
        if (searchTerm) {
          // Search functionality
          const res = await getCourseByName(searchTerm, currentPage - 1, coursesPerPage);
          setCourses(res.content.content);
        } else if (filteredCategories.length > 0) {
          // Filter by categories
          const res = await Promise.all(
            filteredCategories.map((catId) =>
              getCoursesByCategory(catId, currentPage - 1, coursesPerPage)
            )
          );
          const mergedCourses = res.flatMap((r) => r.content.content);
          setCourses(mergedCourses);
        } else {
          // Get all courses
          const res = await getAllCourse(currentPage - 1, coursesPerPage);
          setCourses(res.content.content);
        }
      } catch (error) {
        console.error("Error fetching courses:", error);
      }
    };

    fetchCourses();
  }, [filteredCategories, searchTerm, currentPage]);

  return (
    <div>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {courses.map((course) => (
          <CourseCard key={course.id} course={course} />
        ))}
      </div>
      <div className="flex justify-center mt-4">
        <button
          className="px-4 py-2 border rounded-lg mx-2"
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
        >
          Previous
        </button>
        <button
          className="px-4 py-2 border rounded-lg mx-2"
          onClick={() => onPageChange(currentPage + 1)}
        >
          Next
        </button>
      </div>
    </div>
  );
};

export default CoursesComponent;

================
File: src/pages/user/courseFilterPage/component/FilterSortBar.js
================
import React, { useState, useEffect } from "react";
import { BsFilter, BsSearch } from "react-icons/bs";
import { getAllCategories } from "../../../../api/apiService/dataService";

const FilterSortBar = ({ onFilterChange, onSearchChange }) => {
  const [searchValue, setSearchValue] = useState("");
  const [categories, setCategories] = useState([]);
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [activeFilters, setActiveFilters] = useState(0);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const res = await getAllCategories(0, 99);
        setCategories(res.content.content); // Adjust according to API response structure
      } catch (error) {
        console.error("Error fetching categories:", error);
      }
    };
    fetchCategories();
  }, []);

  const handleCategoryChange = (categoryId) => {
    const updatedSelectedCategories = selectedCategories.includes(categoryId)
      ? selectedCategories.filter((id) => id !== categoryId)
      : [...selectedCategories, categoryId];

    setSelectedCategories(updatedSelectedCategories);
    setActiveFilters(updatedSelectedCategories.length);
    onFilterChange(updatedSelectedCategories);
  };

  const handleSearchInput = (e) => {
    const value = e.target.value;
    setSearchValue(value);
    onSearchChange(value); // Notify the parent of search changes
  };

  const toggleDropdown = () => {
    setIsDropdownOpen(!isDropdownOpen);
  };

  const resetFilter = () => {
    setSelectedCategories([]);
    setActiveFilters(0);
    onFilterChange([]);
    setIsDropdownOpen(false);
  };

  return (
    <div className="flex items-center justify-between bg-white px-4 py-2">
      {/* Filter Button */}
      <div className="relative">
        <button
          className="flex items-center bg-orange-100 px-4 py-2 rounded-lg text-orange-700 font-semibold text-sm"
          onClick={toggleDropdown}
        >
          <BsFilter className="mr-2" />
          Filter
          {activeFilters > 0 && (
            <span className="ml-2 bg-orange-500 text-white rounded-full px-2 py-1 text-xs">
              {activeFilters}
            </span>
          )}
        </button>

        {/* Dropdown Filter Menu */}
        {isDropdownOpen && (
          <div className="absolute mt-2 bg-white rounded-lg shadow-lg w-64 z-10 p-4">
            <div className="flex justify-between items-center">
              <h3 className="text-sm font-semibold text-gray-700">
                Filter by Categories
              </h3>
              <button
                onClick={resetFilter}
                className="text-xs text-blue-500 underline"
              >
                Reset
              </button>
            </div>
            <div className="grid grid-cols-1 gap-2 mt-2">
              {categories.map((category) => (
                <label
                  key={category.id}
                  className="flex items-center space-x-2 cursor-pointer"
                >
                  <input
                    type="checkbox"
                    value={category.id}
                    checked={selectedCategories.includes(category.id)}
                    onChange={() => handleCategoryChange(category.id)}
                    className="form-checkbox text-orange-500"
                  />
                  <span className="text-sm text-gray-700">{category.name}</span>
                </label>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Search Section */}
      <div className="flex items-center w-1/2 relative">
        <BsSearch className="absolute left-3 text-gray-400" />
        <input
          type="text"
          placeholder="Search..."
          value={searchValue}
          onChange={handleSearchInput}
          className="w-full pl-10 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
        />
      </div>
    </div>
  );
};

export default FilterSortBar;

================
File: src/pages/user/courseFilterPage/index.js
================
import React, { useState } from "react";
import { useSelector } from "react-redux";
import FilterSortBar from "./component/FilterSortBar";
import CoursesComponent from "./component/CoursesComponent";

const UserHome = () => {
  const userInfo = useSelector((state) => state.login.user);
  const [filteredCategories, setFilteredCategories] = useState([]);
  const [searchTerm, setSearchTerm] = useState(""); // Search input value
  const [currentPage, setCurrentPage] = useState(1); // Current page for pagination

  const handleFilterChange = (categories) => {
    setFilteredCategories(categories);
    setCurrentPage(1); // Reset to page 1 when the filter changes
  };

  const handleSearchChange = (term) => {
    setSearchTerm(term);
    setCurrentPage(1); // Reset to page 1 when the search term changes
  };

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  return (
    <div className="bg-gray-100 min-h-screen mt-20">
      {/* Header Section */}
      <header className="bg-white shadow-md py-4">
        <div className="container mx-auto px-4 flex justify-between items-center">
          <h1 className="text-xl font-bold text-gray-800">
            Welcome, {userInfo?.lastName || "Guest"}!
          </h1>
        </div>
      </header>

      {/* Search and Filter Section */}
      <div className="container mx-auto px-4 py-4">
        <FilterSortBar
          onFilterChange={handleFilterChange}
          onSearchChange={handleSearchChange}
        />
      </div>

      {/* Courses Grid */}
      <div className="container mx-auto px-4 py-8">
        <CoursesComponent
          filteredCategories={filteredCategories}
          searchTerm={searchTerm}
          currentPage={currentPage}
          onPageChange={handlePageChange}
        />
      </div>
    </div>
  );
};

export default UserHome;

================
File: src/pages/user/usercourse/index.js
================
import React, { memo, useEffect, useState } from "react";
import styles from "./userCourses.module.scss";
import clsx from "clsx";
import { useSelector } from "react-redux";
import { Link } from "react-router-dom";
import * as userApi from "../../../api/apiService/authService";
import Footer from "../../../layout/footer";

function Badge({ children }) {
    return (
        <div className="flex justify-center px-2.5 py-1 bg-white rounded-md border border-gray-500 border-solid text-xs ">
            {children}
        </div>
    );
}
export const CourseCard = memo(
    ({ course, textBtn = "Go to learn", courseId = -1 }) => {
        return (
            <div className="course-card w-full col-lg-3 px-4 flex flex-col mb-7">
                <div className="b-shadow bg-white rounded-xl border border-gray-100 p-6 flex flex-col">
                    <div className="flex justify-center">
                        <img
                            loading="lazy"
                            src={course.thumbnail}
                            alt=""
                            className="course-image w-full rounded-t-lg mb-4  object-cover"
                        />
                    </div>
                    <div className="flex justify-start space-x-2 mb-2">
                        {course.categories.map((category) => (
                            <Badge key={category.id}>{category.name}</Badge>
                        ))}
                    </div>
                    <h3 className="text-md sm:text-lg font-semibold text-neutral-800 mb-2  text-start">
                        {course.title}
                    </h3>

                    <Link
                        to={`/course/detail/${course.id}`}
                        className="px-4 py-2 text-xs sm:text-sm font-medium text-center rounded-md border border-gray-100 bg-neutral-100 text-neutral-800"
                    >
                        {textBtn}
                    </Link>
                </div>
            </div>
        );
    }
);

const MyCourses = () => {
    const user = useSelector((state) => state.login.user);
    const [courses, setCourses] = useState([]);
    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await userApi.getUserByEmail(user.email);
                let listCourse = [];
                result.content.progresses.forEach((pro) => {
                    listCourse.push(pro.course);
                });
                setCourses(listCourse);
            } catch (error) {
                console.log(error);
            }
        };

        fetchApi();
    }, []);

    return (
        <div className={clsx("bg-neutral-100")}>
            <div className={clsx(styles.header)}>
                <div className="container">
                    <h1 className={clsx("uppercase font-extrabold")}>
                        My courses
                    </h1>
                </div>
            </div>
            <div className={clsx(styles.wrapContent, "container mt-6")}>
                <div>
                    {courses?.length > 0 ? (
                        courses.map((course, ind) => (
                            <CourseCard
                                key={ind}
                                course={course}
                                courseId={course.id}
                            />
                        ))
                    ) : (
                        <div className="font-base font-semibold">
                            You have not enroll for any courses yet
                        </div>
                    )}
                </div>
            </div>
            <Footer />
        </div>
    );
};

export default MyCourses;

================
File: src/pages/user/usercourse/userCourses.module.scss
================
.header {
    background: #2d2f31;
    color: white;
    padding-top: 48px;
    padding-bottom: 20px;
}

================
File: src/pages/user/userprofile/index.js
================
import React, { useState, useEffect } from "react";
import styles from "./userProfile.module.scss";
import clsx from "clsx";
// import avatar from "../../../assets/images/avatar_25.jpg";
import ShowPassword from "../../../component/auth/ShowPassword";
import * as userApi from "../../../api/apiService/authService";
import { toast } from "sonner";
import { useSelector } from "react-redux";
import avatar from "../../../assets/images/Avatar.png"
import { BrowserRouter as Router, Routes, Route, Link } from "react-router-dom";
import Messages from "../../../component/profileComponent/Messages";
import Settings from "../../../component/profileComponent/Setting";
function isValidEmail(email) {
    const emailRegex = /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/;
    return emailRegex.test(email);
}

function isPasswordStrong(password) {
    const passwordRegex =
        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+])[A-Za-z\d!@#$%^&*()_+]{8,}$/;
    return passwordRegex.test(password);
}

function UserProfile({ adminOpen = false }) {

    const userInfo = useSelector((user) => user.login.user);
    console.log(userInfo)
    const [user, setUser] = useState({ ...userInfo });
    const [activeSection, setActiveSection] = useState("messages");


    const [activeForm, setActiveForm] = useState("details");
    const [errors, setErrors] = useState({});
    const [passwords, setPasswords] = useState({
        oldPassword: "",
        newPassword: "",
        confirmPassword: "",
    });

    const [selectedBtn, setSelectedBtn] = useState("0");

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setUser({
            ...user,
            [name]: value,
        });
        setErrors((prevErrors) => ({
            ...prevErrors,
            [name]: "",
        }));
    };

    const handleInputPasswordChange = (e) => {
        const { name, value } = e.target;
        setPasswords({ ...passwords, [name]: value });
        setErrors((prevErrors) => ({
            ...prevErrors,
            [name]: "",
        }));
    };

    const handleFileChange = (event) => {
        const file = event.target.files[0];
        if (file) {
            setUser({ ...user, avatar: file });
        }
    };

    const handleSwitchPage = (e) => {
        const newIndex = e.target.dataset.index;
        setSelectedBtn(newIndex);

        switch (newIndex) {
            case "0":
                setActiveForm("details");
                break;
            case "1":
                setActiveForm("password");
                break;
            default:
                console.log("Unhandled index!");
        }
    };

    const handleSubmitChangePassword = (e) => {
        e.preventDefault();
        if (!validateForm()) {
            console.error("Invalid password input");
            return;
        }

        toast.promise(userApi.updatePassword(passwords), {
            loading: "Updating password...",
            success: (data) => {
                return data.mess;
            },
            error: (err) => {
                return "Update Failed";
            },
        });
    };

    const validateForm = () => {
        let valid = true;
        const newErrors = {};
        if (user.firstName === null) {
            newErrors.firstName = "First name cannot be empty";
            valid = false;
        }
        if (user.firstName !== null && !user.firstName.trim()) {
            newErrors.firstName = "First name cannot be empty";
            valid = false;
        }
        if (user.lastName === null) {
            newErrors.lastName = "Last name cannot be empty";
            valid = false;
        }
        if (user.lastName !== null && !user.lastName.trim()) {
            newErrors.lastName = "Last name cannot be empty";
            valid = false;
        }

        if (activeForm === "details") {
            if (!isValidEmail(user.email)) {
                newErrors.email = "Please enter a valid email";
                valid = false;
            }
        } else if (activeForm === "password") {
            if (!passwords.oldPassword) {
                newErrors.oldPassword = "Old password is required.";
                valid = false;
            }
            if (!isPasswordStrong(passwords.newPassword)) {
                newErrors.newPassword =
                    "Password must have at least 8 characters, including uppercase, lowercase, and special characters.";

                valid = false;
            }
            if (passwords.newPassword !== passwords.confirmPassword) {
                newErrors.confirmPassword = "Passwords do not match.";
                valid = false;
            }
        }

        setErrors(newErrors);
        return valid;
    };

    const handleSubmit = (event) => {
        event.preventDefault();
        if (!validateForm()) {
            return;
        }
        const { avatar, ...userData } = user;
        toast.promise(userApi.updateProfile(userData, avatar), {
            loading: "Loading...",
            success: (data) => {
                console.log(data);
                // setUser(data.content);
                return "Update successfully";
            },
            error: (err) => {
                return err.mess;
            },
        });
    };

    useEffect(() => {
        const fetchApi = async () => {
            try {
                const result = await userApi.getUserByEmail(userInfo.email);
                // if (!result.content.email.includes("@")) {
                //     result.content.email = null;
                // }
                setUser(result.content);
                setPasswords({ ...passwords, email: result.content.email });
            } catch (error) {
                console.log(error);
            }
        };
        fetchApi();
    }, [userInfo?.email]);

    return (
        <div className="min-h-screen flex flex-col">
        {/* Header */}
        <header className="bg-white shadow-md">
          <div className="p-6 flex items-center justify-between bg-gray-50">
            <div className="flex items-center space-x-4">
              <img
                src={user.avatar}
                alt="Profile"
                className="h-16 w-16 rounded-full border"
              />
              <div>
                <h1 className="font-bold text-xl">{userInfo.firstName} {userInfo.lastName}</h1>
                <p className="text-sm text-gray-500">
                  Web Designer & Best-Selling Instructor
                </p>
              </div>
            </div>
            <button className="bg-orange-500 text-white px-4 py-2 rounded-lg">
              Become Instructor →
            </button>
          </div>
  
          {/* Navigation Tabs */}
          <nav className="bg-white border-t border-b p-4">
            <ul className="flex justify-center space-x-6 text-sm font-medium">
              <li
                onClick={() => setActiveSection("messages")}
                className={clsx("cursor-pointer", {
                  "text-orange-500 font-bold": activeSection === "messages",
                  "hover:text-orange-500": activeSection !== "messages",
                })}
              >
                Messages
              </li>
              <li
                onClick={() => setActiveSection("settings")}
                className={clsx("cursor-pointer", {
                  "text-orange-500 font-bold": activeSection === "settings",
                  "hover:text-orange-500": activeSection !== "settings",
                })}
              >
                Settings
              </li>
            </ul>
          </nav>
        </header>
  
        {/* Main Content */}
        <main className="flex-1 p-4">
          {activeSection === "messages" && <Messages />}
          {activeSection === "settings" && <Settings />}
        </main>
      </div>
    
      
    
      
    
    
        // <div className={styles.container}>
            /* <div className={clsx("container")}>
                <div className={clsx("row justify-center gap-6")}>
                    <div className={clsx(styles.header, "col-lg-10")}>
                        <ul className={clsx("flex gap-10 mb-0")}>
                            <li
                                onClick={handleSwitchPage}
                                className={clsx(styles.item, {
                                    [styles.selected]: selectedBtn === "0",
                                })}
                                data-index="0"
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    viewBox="0 0 16 16"
                                    fill="currentColor"
                                >
                                    <path
                                        fillRule="evenodd"
                                        d="M3 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H3Zm2.5 5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3ZM10 5.75a.75.75 0 0 1 .75-.75h1.5a.75.75 0 0 1 0 1.5h-1.5a.75.75 0 0 1-.75-.75Zm.75 3.75a.75.75 0 0 0 0 1.5h1.5a.75.75 0 0 0 0-1.5h-1.5ZM10 8a.75.75 0 0 1 .75-.75h1.5a.75.75 0 0 1 0 1.5h-1.5A.75.75 0 0 1 10 8Zm-2.378 3c.346 0 .583-.343.395-.633A2.998 2.998 0 0 0 5.5 9a2.998 2.998 0 0 0-2.517 1.367c-.188.29.05.633.395.633h4.244Z"
                                        clipRule="evenodd"
                                    />
                                </svg>
                                General
                            </li>
                            <li
                                onClick={handleSwitchPage}
                                data-index="1"
                                className={clsx(styles.item, {
                                    [styles.selected]: selectedBtn === "1",
                                })}
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    viewBox="0 0 16 16"
                                    fill="currentColor"
                                >
                                    <path
                                        fillRule="evenodd"
                                        d="M14 6a4 4 0 0 1-4.899 3.899l-1.955 1.955a.5.5 0 0 1-.353.146H5v1.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2.293a.5.5 0 0 1 .146-.353l3.955-3.955A4 4 0 1 1 14 6Zm-4-2a.75.75 0 0 0 0 1.5.5.5 0 0 1 .5.5.75.75 0 0 0 1.5 0 2 2 0 0 0-2-2Z"
                                        clipRule="evenodd"
                                    />
                                </svg>
                                Security
                            </li>
                        </ul>
                    </div>
                    {selectedBtn == 0 ? (
                        <>
                            <div className={clsx("col-lg-4")}>
                                <div className="p-6  h-full flex items-center flex-col justify-center rounded-xl b-shadow-sm">
                                    <div className={clsx(styles.avatar)}>
                                        <img
                                            loading="lazy"
                                            src={
                                                user.avatar
                                                    ? user.avatar instanceof
                                                          File ||
                                                      user.avatar instanceof
                                                          Blob
                                                        ? URL.createObjectURL(
                                                              user.avatar
                                                          )
                                                        : user.avatar
                                                    : avatar
                                            }
                                            alt="User avatar"
                                        />
                                        <input
                                            accept=".jpg, .png, .jpeg"
                                            id="avatar"
                                            type="file"
                                            hidden
                                            onChange={handleFileChange}
                                            name=""
                                        />
                                        <label
                                            htmlFor="avatar"
                                            className={clsx(styles.updatePhoto)}
                                        >
                                            <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                viewBox="0 0 16 16"
                                                fill="currentColor"
                                            >
                                                <path d="M9.5 8.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z" />
                                                <path
                                                    fillRule="evenodd"
                                                    d="M2.5 5A1.5 1.5 0 0 0 1 6.5v5A1.5 1.5 0 0 0 2.5 13h11a1.5 1.5 0 0 0 1.5-1.5v-5A1.5 1.5 0 0 0 13.5 5h-.879a1.5 1.5 0 0 1-1.06-.44l-1.122-1.12A1.5 1.5 0 0 0 9.38 3H6.62a1.5 1.5 0 0 0-1.06.44L4.439 4.56A1.5 1.5 0 0 1 3.38 5H2.5ZM11 8.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                                                    clipRule="evenodd"
                                                />
                                            </svg>
                                            Update photo
                                        </label>
                                    </div>

                                    <div className={clsx(styles.sub)}>
                                        Allowed *.jpg, *.png, *.jpeg
                                    </div>
                                </div>
                            </div>
                            <div
                                className={clsx(
                                    "col-lg-6  rounded-xl b-shadow-sm"
                                )}
                            >
                                <div className={clsx("p-6")}>
                                    <div className={clsx(styles.field)}>
                                        <div
                                            className={clsx(
                                                "flex gap-3 w-full "
                                            )}
                                        >
                                            <div className="flex-1">
                                                <div
                                                    className={clsx(
                                                        styles.formField,
                                                        "flex-1"
                                                    )}
                                                >
                                                    <input
                                                        required
                                                        onChange={
                                                            handleInputChange
                                                        }
                                                        value={
                                                            user.firstName || ""
                                                        }
                                                        name="firstName"
                                                        data-validate
                                                        className={clsx(
                                                            styles.formInput
                                                        )}
                                                        type="text"
                                                    />
                                                    <label
                                                        className={clsx(
                                                            styles.formLabel
                                                        )}
                                                    >
                                                        First Name
                                                    </label>
                                                </div>
                                                {errors.firstName && (
                                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                                        {errors.firstName}
                                                    </div>
                                                )}
                                            </div>
                                            <div className="flex-1">
                                                <div
                                                    className={clsx(
                                                        styles.formField,
                                                        "flex-1"
                                                    )}
                                                >
                                                    <input
                                                        required
                                                        onChange={
                                                            handleInputChange
                                                        }
                                                        value={
                                                            user.lastName || ""
                                                        }
                                                        name="lastName"
                                                        data-validate
                                                        className={clsx(
                                                            styles.formInput
                                                        )}
                                                        type="text"
                                                    />
                                                    <label
                                                        className={clsx(
                                                            styles.formLabel
                                                        )}
                                                    >
                                                        Last Name
                                                    </label>
                                                </div>
                                                {errors.lastName && (
                                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                                        {errors.lastName}
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                        <div>
                                            <div
                                                className={clsx(
                                                    styles.formField,
                                                    "w-full disabled-field"
                                                    // {
                                                    //     "disabled-field":
                                                    //         userInfo.email.includes(
                                                    //             "@"
                                                    //         ) === null,
                                                    // }
                                                )}
                                            >
                                                <div className="relative">
                                                    <input
                                                        required
                                                        onChange={
                                                            handleInputChange
                                                        }
                                                        value={user.email}
                                                        name="email"
                                                        data-validate
                                                        className={clsx(
                                                            styles.formInput
                                                        )}
                                                        
                                                        type="text"
                                                        // disabled={
                                                        //     userInfo.email.includes(
                                                        //         "@"
                                                        //     ) === null
                                                        // }
                                                        disabled
                                                    />
                                                    <label
                                                        className={clsx(
                                                            styles.formLabel
                                                        )}
                                                    >
                                                        Email
                                                    </label>
                                                </div>
                                                {errors.email && (
                                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                                        {errors.email}
                                                    </div>
                                                )}
                                            </div>

                                            <div
                                                className={clsx(
                                                    styles.formField,
                                                    "w-full "
                                                )}
                                            >
                                                <div className="relative">
                                                    <input
                                                        required
                                                        onChange={
                                                            handleInputChange
                                                        }
                                                        value={
                                                            user.phoneNumber ||
                                                            " "
                                                        }
                                                        name="phoneNumber"
                                                        data-validate
                                                        className={clsx(
                                                            styles.formInput
                                                        )}
                                                        type="text"
                                                    />
                                                    <label
                                                        className={clsx(
                                                            styles.formLabel
                                                        )}
                                                    >
                                                        Phone Number
                                                    </label>
                                                    {errors.phoneNumber && (
                                                        <div className="text-red-500 mt-1 text-sm ml-1">
                                                            {errors.phoneNumber}
                                                        </div>
                                                    )}
                                                </div>
                                            </div>
                                            <div
                                                className={clsx(styles.btn)}
                                                onClick={handleSubmit}
                                            >
                                                Save changes
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </>
                    ) : (
                        <>
                            <div
                                className={clsx(
                                    "col-lg-10  rounded-xl b-shadow-sm"
                                )}
                            >
                                <div className={clsx("p-6")}>
                                    <form
                                        className={clsx(styles.field)}
                                        action=""
                                    >
                                        {!adminOpen && (
                                            <div>
                                                <div
                                                    className={clsx(
                                                        styles.formField,
                                                        "w-full "
                                                    )}
                                                >
                                                    <div className="px-2 w-full flex text-sm">
                                                        <input
                                                            id="oldPassword"
                                                            autoComplete="off"
                                                            required
                                                            onChange={
                                                                handleInputPasswordChange
                                                            }
                                                            name="oldPassword"
                                                            value={
                                                                passwords.oldPassword ||
                                                                ""
                                                            }
                                                            data-validate
                                                            className={clsx(
                                                                styles.formInput
                                                            )}
                                                            type="password"
                                                        ></input>
                                                        <label
                                                            className={clsx(
                                                                styles.formLabel
                                                            )}
                                                        >
                                                            Old Password
                                                        </label>
                                                        <ShowPassword
                                                            passInput={document.getElementById(
                                                                "oldPassword"
                                                            )}
                                                        ></ShowPassword>
                                                    </div>
                                                </div>
                                                {errors.oldPassword && (
                                                    <div className="text-red-500 mt-1 text-sm ml-1">
                                                        {errors.oldPassword}
                                                    </div>
                                                )}
                                            </div>
                                        )}
                                        <div>
                                            <div
                                                className={clsx(
                                                    styles.formField,
                                                    "w-full "
                                                )}
                                            >
                                                <div className="px-2 w-full flex text-sm">
                                                    <input
                                                        autoComplete="off"
                                                        id="newPassword"
                                                        required
                                                        onChange={
                                                            handleInputPasswordChange
                                                        }
                                                        value={
                                                            passwords.newPassword
                                                        }
                                                        name="newPassword"
                                                        data-validate
                                                        className={clsx(
                                                            styles.formInput
                                                        )}
                                                        type="password"
                                                    ></input>
                                                    <label
                                                        className={clsx(
                                                            styles.formLabel
                                                        )}
                                                    >
                                                        New Password
                                                    </label>
                                                    <ShowPassword
                                                        passInput={document.getElementById(
                                                            "newPassword"
                                                        )}
                                                    ></ShowPassword>
                                                </div>
                                            </div>
                                            {errors.newPassword && (
                                                <div className="text-red-500 text-sm ml-1">
                                                    {errors.newPassword}
                                                </div>
                                            )}
                                        </div>
                                        <div>
                                            <div
                                                className={clsx(
                                                    styles.formField,
                                                    "w-full "
                                                )}
                                            >
                                                <div className="px-2 w-full flex text-sm">
                                                    <input
                                                        autoComplete="off"
                                                        id="confirmPassword"
                                                        required
                                                        onChange={
                                                            handleInputPasswordChange
                                                        }
                                                        value={
                                                            passwords.confirmPassword
                                                        }
                                                        name="confirmPassword"
                                                        data-validate
                                                        className={clsx(
                                                            styles.formInput
                                                        )}
                                                        type="password"
                                                    ></input>
                                                    <label
                                                        className={clsx(
                                                            styles.formLabel
                                                        )}
                                                    >
                                                        Confirm Password
                                                    </label>
                                                    <ShowPassword
                                                        passInput={document.getElementById(
                                                            "confirmPassword"
                                                        )}
                                                    ></ShowPassword>
                                                </div>
                                            </div>
                                            {errors.confirmPassword && (
                                                <div className="text-red-500 mt-1 text-sm ml-1">
                                                    {errors.confirmPassword}
                                                </div>
                                            )}
                                        </div>
                                        <button
                                            type="submit"
                                            className={clsx(styles.btn)}
                                            onClick={handleSubmitChangePassword}
                                        >
                                            Save changes
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </>
                    )}
                </div>
            </div> */

        // </div>
        
    );
}

export default UserProfile;

================
File: src/pages/user/userprofile/userProfile.module.scss
================
@import "../../../component//globalStyles/GlobalStyles.scss";

.container {
    width: 100%;
    display: flex;
    justify-content: center;
}

.formInput {
    width: 100%;
    background: none;
    font-size: 14px;
    animation-duration: 10ms;
    line-height: 23px;
    font-weight: 400;
    border-radius: 8px;
    padding: 10px 8px;
    flex: 1;
    &:focus {
        outline: none;
    }
    &:focus + .formLabel {
        top: 0;
        font-weight: 600;
        font-size: 14px;
        background-color: white;
        color: rgb(33, 43, 54);
    }
}

.formLabel {
    position: absolute;
    transform: translateY(-50%);
    left: 14px;
    font-size: 12px;
    background-color: rgb(255, 255, 255);
    user-select: none;
    color: $label-gray;
    transition: 200ms ease;
    top: 0;
    font-weight: 600;
    font-size: 12px;
    background-color: white;
}

.formField {
    position: relative;
    border-radius: 8px;
    border: 1px solid $border-color;
    &:focus-within {
        border-color: black;
    }

    svg {
        cursor: pointer;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        right: 1%;
        width: 20px;
        height: 20px;
    }
}

.avatar {
    position: relative;
    cursor: pointer;
    width: 160px;
    height: 160px;
    border-radius: 100rem;
    border: 1px solid #eeebeb;
    display: flex;

    &:hover {
        .updatePhoto {
            display: flex;
        }
    }

    img {
        width: 140px;
        height: 140px;
        margin: auto;
        border-radius: 100rem;
    }
}

.sub {
    margin-top: 20px;
    line-height: 1.5;
    font-size: 0.75rem;
    font-weight: 400;
    color: rgb(145, 158, 171);
    display: block;
    text-align: center;
}

.field {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.updatePhoto {
    display: none;
    position: absolute;
    top: -2%;
    left: 6%;
    cursor: pointer;
    width: 140px;
    height: 140px;
    background-color: rgba(22, 28, 36, 0.64);
    border-radius: 100rem;
    margin-top: 12px;
    color: white;
    gap: 10px;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    font-size: 12px;
    svg {
        width: 30px;
        height: 30px;
    }
}

.btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    position: relative;
    cursor: pointer;
    font-weight: 700;
    line-height: 1.71429;
    font-size: 0.875rem;
    min-width: 64px;
    padding: 6px 12px;
    border-radius: 8px;
    color: rgb(255, 255, 255);
    background-color: rgb(33, 43, 54);
}

.header {
    padding-left: 0;
}

.item {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    line-height: 1.25;
    font-size: 0.875rem;
    max-width: 360px;
    position: relative;
    overflow: hidden;
    text-align: center;
    color: inherit;
    min-width: 48px;
    padding: 10px 0;
    color: rgb(99, 115, 129);
    font-weight: 500;
    transition: all 0.3 ease;
    border-bottom: 2px solid transparent;

    svg {
        margin-right: 8px;
        width: 20px;
        height: 20px;
    }
}

.item.selected {
    color: $c-black !important;
    svg {
        margin-right: 8px;
        width: 20px;
        height: 20px;
    }
    border-bottom-color: black;
}

================
File: src/redux/reducers/loginSlice.js
================
import { createSlice } from "@reduxjs/toolkit";

const loginSlice = createSlice({
    name: "login",
    initialState: {
        isLogin: sessionStorage.getItem("token") !== null,
        user: sessionStorage.getItem("user")
            ? JSON.parse(sessionStorage.getItem("user"))
            : null,

        token: sessionStorage.getItem("token"),
    },
    reducers: {
        setLogin: (state, action) => {
            if (action) {
                const { token, user } = action.payload;
                state.user = user;
                user && sessionStorage.setItem("user", JSON.stringify(user));
                token && sessionStorage.setItem("token", token);
            }
            state.isLogin = true;
        },
        setLogout: (state, action) => {
            sessionStorage.removeItem("token");
            sessionStorage.removeItem("user");
            localStorage.removeItem("prevPath");
            state.isLogin = false;
            state.user = null;
        },
    },
});

export default loginSlice;

================
File: src/redux/reducers/notificationSlice.js
================
import { createSlice } from "@reduxjs/toolkit";

const notificationSlice = createSlice({
    name: "notification",
    initialState: {
        notifications: [],
    },
    reducers: {
        add: (state, action) => {
            state.notifications.unshift(action.payload);
        },
        init: (state, action) => {
            state.notifications = action.payload;
        },
        update: (state, action) => {
            const index = state.notifications.findIndex(
                (noti) => noti.id === action.payload.id
            );
            console.log(index);
            state.notifications[index] = action.payload;
        },
        readAll: (state, action) => {
            state.notifications.forEach((noti) => {
                noti.isRead = true;
            });
        },
        removeAll: (state, action) => {
            state.notifications = [];
        },
    },
});

export default notificationSlice;

================
File: src/redux/reducers/sidebarReducer.js
================
const sidebarReducer = (state, action) => {
    if(action.type === "TOGGLE_SIDEBAR"){
        return { ...state, isSidebarOpen: !state.isSidebarOpen}
    }
    throw new Error(`No matching "${action.type} action type`);
}

export default sidebarReducer;

================
File: src/redux/selector.js
================
import { createSelector } from "@reduxjs/toolkit";
const isLoginSelector = (state) => state.isLogin;

export const rootSelector = createSelector(isLoginSelector);

================
File: src/redux/store.js
================
import { configureStore } from "@reduxjs/toolkit";
import loginSlice from "./reducers/loginSlice";
import notificationSlice from "./reducers/notificationSlice";
const store = configureStore({
    reducer: {
        login: loginSlice.reducer,
        notification: notificationSlice.reducer,
    },
});

export default store;

================
File: src/router/index.js
================
import SignUp from "../pages/signUp";
import Login from "../pages/login";
import LandingPage from "../pages/landing";
import AdminPage from "../pages/admin";
import NotFoundPage from "../pages/notFound";
import ListCourse from "../pages/admin/Course/list";
import CreateCourse from "../pages/admin/Course/create";
import EditCourse from "../pages/admin/Course/edit";
import DetailCourseAdmin from "../pages/admin/Course/detail";
import DetailCourse from "../pages/course/detail";
import Course from "../pages/course";
import ListCategory from "../pages/admin/Category/list";
import CategoryEdit from "../pages/admin/Category/edit";
import CreateCategory from "../pages/admin/Category/create";
import HistoryDeleted from "../pages/admin/Course/historyDeleted";
import HistoryDeletedCategory from "../pages/admin/Category/historyDeleted";
import ListUser from "../pages/admin/user/list";
import ListDeletedUser from "../pages/admin/user/historyDeleted";
import userProfile from "../pages/user/userprofile/index";
import Payment from "../pages/payment";
import SuccessPayment from "../pages/payment/success";
import FailurePayment from "../pages/payment/failure";
import AdminView from "../pages/admin/user/userProfileAdmin";
import MyCourses from "../pages/user/usercourse/index";
import ListInvoice from "../pages/admin/invoice/list";
import ListDeleteInvoice from "../pages/admin/invoice/historyDelete";
import CreateUser from "../pages/admin/user/create";
import AdminDetailCourse from "../pages/admin/Course/detail";
import Post from "../pages/Post";
import SubContent from "../pages/Post/create/subContent";
import CreatePost from "../pages/Post/create";
import WritingTaskList from "../pages/admin/Test/WritingTask/List";
import WritingTaskCreate from "../pages/admin/Test/WritingTask/Create";
import WritingTaskEdit from "../pages/admin/Test/WritingTask/Edit";
import WritingSubmission from "../pages/IELTS/WritingSubmission";
import UserHome from "../pages/user/courseFilterPage"
const publicRoutes = [
    { path: "/", component: LandingPage },
    { path: "/sign-up", component: SignUp },
    { path: "/login", component: Login },
    { path: "*", component: NotFoundPage },
    { path: "/course/:id", component: Course },
    { path: "/posts/", component: Post },
    // { path: "/search/:query", component: SearchResults },
    { path: "/courses", component: UserHome },

];

const userRoutes = [
    { path: "/course/detail/:id", component: DetailCourse },
    {
        path: "/course/detail/:id/openComment",
        component: DetailCourse,
    },
    { path: "/me/my-courses", component: MyCourses },
    { path: "/course/payment/:id", component: Payment },
    { path: "/payment/success", component: SuccessPayment },
    { path: "/payment/failure", component: FailurePayment },
    { path: "me/profile/:email", component: userProfile },
    { path: "me/post/create", component: CreatePost },
    { path: "me/post/create/sub", component: SubContent },
    { path: "IELTS/Writing/Test", component: WritingSubmission },
];

const adminRoutes = [
    { path: "/admin", component: AdminPage },
    { path: "/admin/course/list", component: ListCourse },
    { path: "/admin/course/create", component: CreateCourse },
    { path: "/admin/course/edit/:id", component: EditCourse },
    {
        path: "/admin/course/detail/:id",
        component: AdminDetailCourse,
    },
    { path: "/admin/course/historyDelete", component: HistoryDeleted },
    { path: "/admin/category/list", component: ListCategory },
    { path: "/admin/category/create", component: CreateCategory },
    { path: "/admin/category/edit/:id", component: CategoryEdit },
    {
        path: "/admin/category/historyDelete",
        component: HistoryDeletedCategory,
    },
    { path: "/admin/writing-task/list", component: WritingTaskList  },
    { path: "/admin/writing-task/create", component: WritingTaskCreate },
    { path: "/admin/writing-task/edit/:id", component: WritingTaskEdit },
    { path: "/admin/user/list", component: ListUser },
    { path: "/admin/user/create", component: CreateUser },
    { path: "/admin/user/edit/:id", component: EditCourse },
    { path: "/admin/user/detail/:id", component: DetailCourseAdmin },
    { path: "/admin/user/historyDelete", component: ListDeletedUser },
    { path: "/admin/user/view/:email", component: AdminView },

    { path: "/admin/invoice/list", component: ListInvoice },
    { path: "/admin/invoice/create", component: CreateCourse },
    { path: "/admin/invoice/historyDelete", component: ListDeleteInvoice },
];

export { publicRoutes, adminRoutes, userRoutes };

================
File: src/util/utils.js
================
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}

================
File: src/utils/validation.js
================
// src/utils/validation.js

export const isValidEmail = (email) => {
    // Simple email validation regex
    const re = /\S+@\S+\.\S+/;
    return re.test(email);
  };
  
  export const isPasswordStrong = (password) => {
    // Password must be at least 8 characters, include uppercase, lowercase, and special character
    const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}$/;
    return re.test(password);
  };

================
File: src/utils/WebSocket.js
================
// import { Client } from "@stomp/stompjs";
// import SockJS from "sockjs-client";

// const socketUrl = "http://localhost:8080/ws";

// const stompClient = new Client({
//     brokerURL: socketUrl,
//     webSocketFactory: () => new SockJS(socketUrl),
//     reconnectDelay: 5000,
//     debug: (str) => console.log(str),
// });

// export default stompClient;

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
const withMT = require("@material-tailwind/react/utils/withMT");

// module.exports = {
//     content: [
//         "./src/**/*.{js,jsx,ts,tsx}",
//         "./node_modules/react-tailwindcss-datepicker/dist/index.esm.js",
//     ],
//     theme: {
//         extend: {},
//     },
//     plugins: [
       

//     ],
// };
module.exports = withMT({
    content: ["./src/**/*.{js,jsx,ts,tsx}",
        "./node_modules/react-tailwindcss-datepicker/dist/index.esm.js",
    "./node_modules/@material-tailwind/react/components/**/*.{js,ts,jsx,tsx}",
    "./node_modules/@material-tailwind/react/theme/components/**/*.{js,ts,jsx,tsx}"],
    theme: {
      extend: {
        colors: {
          'primary-100': '#FFEEE8',
        },
      },
    },
    plugins: [],
  });
